(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IScreen = function() { };
$hxClasses["IScreen"] = IScreen;
IScreen.__name__ = "IScreen";
IScreen.__isInterface__ = true;
IScreen.prototype = {
	dispose: null
	,update: null
	,render: null
	,__class__: IScreen
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.setFullHTML5Canvas = function() {
	window.document.documentElement.style.padding = "0";
	window.document.documentElement.style.margin = "0";
	window.document.body.style.padding = "0";
	window.document.body.style.margin = "0";
	window.document.body.style.overflow = "hidden";
	var canvas = window.document.getElementById("khanvas");
	canvas.style.display = "block";
	ScaleManager.addOnResizeCallback(function() {
		var tmp = window.innerWidth | 0;
		canvas.width = tmp;
		var tmp = window.innerHeight | 0;
		canvas.height = tmp;
		canvas.style.width = window.document.documentElement.clientWidth + "px";
		canvas.style.height = window.document.documentElement.clientHeight + "px";
	});
};
Main.main = function() {
	window.onresize = function() {
		ScaleManager.screen.resize(window.innerWidth,window.innerHeight);
	};
	Main.setFullHTML5Canvas();
	kha_System.start(new kha_SystemOptions("Project GelaVolt",1920,1080,null,new kha_FramebufferOptions(60,false,32,16,8,1)),function(_) {
		kha_Assets.loadEverything(function() {
			Pipelines.init();
			save_$data_SaveManager.loadProfiles();
			save_$data_SaveManager.loadGraphics();
			save_$data_Profile.changePrimary(save_$data_SaveManager.profiles[0]);
			input_AnyInputDevice.init();
			ScreenManager.init();
			ScaleManager.screen.resize(kha_System.windowWidth(),kha_System.windowHeight());
			lobby_LobbyPage.handleURLJoin();
			window.ondrop = function(ev) {
				var fr = new FileReader();
				fr.readAsText(ev.dataTransfer.files.item(0));
				return fr.onload = function() {
					return;
				};
			};
			Main.lastT = kha_Scheduler.realTime();
			kha_System.notifyOnFrames(function(frames) {
				var now = kha_Scheduler.realTime();
				var frameTime = now - Main.lastT;
				Main.lastT = now;
				Main.accumulator += frameTime;
				while(Main.accumulator >= Main.FIXED_UPDATE_DELTA) {
					input_InputDevice.update();
					ScreenManager.updateCurrent();
					Main.accumulator -= Main.FIXED_UPDATE_DELTA;
				}
				Main.alpha = Main.accumulator / Main.FIXED_UPDATE_DELTA;
				ScreenManager.renderCurrent(frames[0],Main.alpha);
			});
		});
	});
};
Math.__name__ = "Math";
var NullScreen = function() {
};
$hxClasses["NullScreen"] = NullScreen;
NullScreen.__name__ = "NullScreen";
NullScreen.__interfaces__ = [IScreen];
NullScreen.prototype = {
	dispose: function() {
	}
	,update: function() {
	}
	,render: function(g,g4,alpha) {
	}
	,__class__: NullScreen
};
var Pipelines = function() { };
$hxClasses["Pipelines"] = Pipelines;
Pipelines.__name__ = "Pipelines";
Pipelines.init = function() {
	var emptryStructure = new kha_graphics4_VertexStructure();
	emptryStructure.add("vertexPosition",2);
	emptryStructure.add("vertexUV",1);
	emptryStructure.add("vertexColor",3);
	Pipelines.FADE_TO_WHITE = new kha_graphics4_PipelineState();
	Pipelines.FADE_TO_WHITE.inputLayout = [emptryStructure];
	Pipelines.FADE_TO_WHITE.vertexShader = kha_Shaders.painter_image_vert;
	Pipelines.FADE_TO_WHITE.fragmentShader = kha_Shaders.fade_to_white_frag;
	Pipelines.FADE_TO_WHITE.blendSource = 1;
	Pipelines.FADE_TO_WHITE.blendDestination = 5;
	Pipelines.FADE_TO_WHITE.alphaBlendSource = 3;
	Pipelines.FADE_TO_WHITE.alphaBlendDestination = 3;
	Pipelines.FADE_TO_WHITE.compile();
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var ScaleManager = function(designWidth,designHeight) {
	this.designWidth = designWidth;
	this.designHeight = designHeight;
	this.onResize = [];
};
$hxClasses["ScaleManager"] = ScaleManager;
ScaleManager.__name__ = "ScaleManager";
ScaleManager.transformedScissor = function(g,x,y,width,height) {
	var scale = ScaleManager.screen.smallerScale;
	var transform = g.transformations[g.transformationIndex];
	var x1 = transform._20 + x * scale | 0;
	var y1 = transform._21 + y * scale | 0;
	var w = width * scale | 0;
	var h = height * scale | 0;
	g.scissor(x1,y1,w,h);
};
ScaleManager.addOnResizeCallback = function(callback) {
	ScaleManager.screen.onResize.push(callback);
	callback();
};
ScaleManager.prototype = {
	designWidth: null
	,designHeight: null
	,onResize: null
	,width: null
	,height: null
	,smallerScale: null
	,resize: function(newWidth,newHeight) {
		this.width = newWidth;
		this.height = newHeight;
		this.smallerScale = Math.min(this.width / this.designWidth,this.height / this.designHeight);
		var _g = 0;
		var _g1 = this.onResize;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
	,__class__: ScaleManager
};
var ScreenManager = function() { };
$hxClasses["ScreenManager"] = ScreenManager;
ScreenManager.__name__ = "ScreenManager";
ScreenManager.init = function() {
	ScreenManager.overlay = new ui_Menu(new ui_MenuOptions(null,0,1,0.9,save_$data_Profile.primary.prefs));
	ScreenManager.showOverlay = false;
	ScreenManager.currentScreen = NullScreen.instance;
};
ScreenManager.pushOverlay = function(page) {
	ScreenManager.overlay.pushPage(page);
	ScreenManager.overlay.onShow(input_AnyInputDevice.instance);
	ScreenManager.showOverlay = true;
};
ScreenManager.updateCurrent = function() {
	if(ScreenManager.showOverlay) {
		ScreenManager.overlay.update();
		return;
	}
	ScreenManager.currentScreen.update();
};
ScreenManager.renderCurrent = function(fb,alpha) {
	var g4 = fb.get_g4();
	var g = fb.get_g2();
	g.begin();
	ScreenManager.currentScreen.render(g,g4,alpha);
	if(ScreenManager.showOverlay) {
		ScreenManager.overlay.render(g,alpha);
	}
	g.end();
};
ScreenManager.switchScreen = function(newScreen) {
	ScreenManager.currentScreen.dispose();
	ScreenManager.currentScreen = newScreen;
	ScreenManager.showOverlay = false;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var game_AllClearManagerOptions = function(rng,geometries,particleManager,borderColorMediator) {
	this.rng = rng;
	this.geometries = geometries;
	this.particleManager = particleManager;
	this.borderColorMediator = borderColorMediator;
};
$hxClasses["game.AllClearManagerOptions"] = game_AllClearManagerOptions;
game_AllClearManagerOptions.__name__ = "game.AllClearManagerOptions";
game_AllClearManagerOptions.prototype = {
	rng: null
	,geometries: null
	,particleManager: null
	,borderColorMediator: null
	,__class__: game_AllClearManagerOptions
};
var game_copying_ICopyFrom = function() { };
$hxClasses["game.copying.ICopyFrom"] = game_copying_ICopyFrom;
game_copying_ICopyFrom.__name__ = "game.copying.ICopyFrom";
game_copying_ICopyFrom.__isInterface__ = true;
var game_AllClearManager = function(opts) {
	this.rng = opts.rng;
	this.geometries = opts.geometries;
	this.particleManager = opts.particleManager;
	this.borderColorMediator = opts.borderColorMediator;
	this.targetY = game_geometries_BoardGeometries.HEIGHT / 5;
	this.boardCenterX = game_geometries_BoardGeometries.CENTER.x;
	this.font = kha_Assets.fonts.ka1;
	this.fontSize = 64;
	this.fontHeight = this.font.height(this.fontSize);
	this.shortStrHalfWidth = this.font.width(this.fontSize,game_AllClearManager.SHORT_STR) / 2;
	this.acCounter = 0;
	this.sendAllClearBonus = false;
};
$hxClasses["game.AllClearManager"] = game_AllClearManager;
game_AllClearManager.__name__ = "game.AllClearManager";
game_AllClearManager.__interfaces__ = [game_copying_ICopyFrom];
game_AllClearManager.prototype = {
	rng: null
	,geometries: null
	,particleManager: null
	,borderColorMediator: null
	,font: null
	,fontSize: null
	,fontHeight: null
	,targetY: null
	,boardCenterX: null
	,line1: null
	,line2: null
	,line1HalfWidth: null
	,line2HalfWidth: null
	,shortStrHalfWidth: null
	,t: null
	,y: null
	,scaleX: null
	,showAnimation: null
	,acCounter: null
	,sendAllClearBonus: null
	,setACText: function(topLine,bottomLine) {
		this.line1 = topLine;
		this.line2 = bottomLine;
		this.line1HalfWidth = this.font.width(this.fontSize,this.line1) / 2;
		this.line2HalfWidth = this.font.width(this.fontSize,this.line2) / 2;
	}
	,startAnimation: function() {
		this.t = 0;
		this.y = game_geometries_BoardGeometries.HEIGHT;
		this.scaleX = 1;
		this.showAnimation = true;
		this.sendAllClearBonus = true;
		this.borderColorMediator.changeColor(-23296);
		if(this.rng.data.GetUpTo(Math.max(20 / this.acCounter,1) | 0) == 1) {
			this.setACText("RINTO","MOMENT");
		} else {
			this.setACText("ALL","CLEAR");
		}
		this.acCounter++;
	}
	,stopAnimation: function() {
		this.scaleX = 0;
		this.showAnimation = false;
		this.sendAllClearBonus = false;
		this.borderColorMediator.changeColor(-1);
	}
	,updateRisingPhase: function() {
		var step = this.t / 45;
		var min = game_geometries_BoardGeometries.HEIGHT;
		var c1 = 1.70150;
		var c3 = c1 + 1;
		this.y = min + (this.targetY - min) * (1 + c3 * Math.pow(step - 1,3) + c1 * Math.pow(step - 1,2));
	}
	,updateTextFlipPhase: function() {
		this.scaleX = 1 + -2 * ((this.t - 55) / 10);
	}
	,updateSmallStarPhase: function() {
		var absText = this.geometries.absolutePosition.add(new utils_Point(game_geometries_BoardGeometries.CENTER.x,this.targetY + this.fontHeight / 2));
		var randomX1 = this.rng.data.GetIn(-192,192);
		var randomY1 = this.rng.data.GetIn(-192,192);
		var randomX2 = this.rng.data.GetIn(-192,192);
		var randomY2 = this.rng.data.GetIn(-192,192);
		var absPos1 = absText.add(new utils_Point(randomX1,randomY1));
		var absPos2 = absText.add(new utils_Point(randomX2,randomY2));
		this.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_SmallStarParticle.create(new game_particles_SmallStarParticleOptions(absPos1.x,absPos1.y,-1)));
		this.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_SmallStarParticle.create(new game_particles_SmallStarParticleOptions(absPos2.x,absPos2.y,-23296)));
	}
	,updatePixelFloatPhase: function() {
		var x = game_geometries_BoardGeometries.WIDTH * this.rng.data.GetFloatIn(-0.75,0.75);
		var y = game_geometries_BoardGeometries.HEIGHT * this.rng.data.GetFloatIn(-0.75,0.75);
		var absPos = this.geometries.absolutePosition.add(game_geometries_BoardGeometries.CENTER.add(new utils_Point(x,y)));
		var _g = absPos.x;
		var _g1 = absPos.y;
		this.particleManager.add(game_particles_ParticleLayer.BACK,game_particles_PixelFloatParticle.create(new game_particles_PixelFloatParticleOptions(0,this.rng.data.GetFloatIn(-12,-5),this.rng.data.GetIn(20,35),-23296,12,_g,_g1)));
	}
	,update: function() {
		if(!this.showAnimation) {
			return;
		}
		if(this.t <= 45) {
			this.updateRisingPhase();
		} else if(55 < this.t && this.t <= 65) {
			this.updateTextFlipPhase();
		}
		if(this.t < 55 && this.t % 3 == 0) {
			this.updateSmallStarPhase();
		}
		if(this.scaleX <= -1) {
			this.updatePixelFloatPhase();
		}
		this.t++;
	}
	,renderBackground: function(g) {
		var scale = -this.scaleX;
		if(scale <= 0) {
			return;
		}
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = this.boardCenterX;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = this.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = scale;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		g.set_color(kha_Color.fromFloats(0.35,0.35,0.35));
		g.drawString(game_AllClearManager.SHORT_STR,-this.shortStrHalfWidth,0);
		g.popTransformation();
	}
	,renderForeground: function(g) {
		if(this.scaleX <= 0) {
			return;
		}
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = this.boardCenterX;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = this.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = this.scaleX;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		utils_Utils.shadowDrawString(g,6,-23296,-1,this.line1,-this.line1HalfWidth,0);
		utils_Utils.shadowDrawString(g,6,-23296,-1,this.line2,-this.line2HalfWidth,this.fontHeight);
		g.popTransformation();
	}
	,copyFrom: function(other) {
		this.targetY = other.targetY;
		this.boardCenterX = other.boardCenterX;
		this.line1 = other.line1;
		this.line2 = other.line2;
		this.line1HalfWidth = other.line1HalfWidth;
		this.line2HalfWidth = other.line2HalfWidth;
		this.shortStrHalfWidth = other.shortStrHalfWidth;
		this.t = other.t;
		this.y = other.y;
		this.scaleX = other.scaleX;
		this.showAnimation = other.showAnimation;
		this.acCounter = other.acCounter;
		return this;
	}
	,__class__: game_AllClearManager
};
var kha_Color = {};
kha_Color.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha_Color.fromValue = function(value) {
	return kha_Color._new(value);
};
kha_Color.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
};
kha_Color.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha_Color._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha_Color.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha_Color._new(colorValue | 0);
	} else {
		throw haxe_Exception.thrown("Invalid Color string: '" + value + "'");
	}
};
kha_Color._new = function(value) {
	var this1 = value;
	return this1;
};
kha_Color.get_value = function(this1) {
	return this1;
};
kha_Color.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha_Color.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha_Color.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha_Color.get_Bb = function(this1) {
	return this1 & 255;
};
kha_Color.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha_Color.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha_Color.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha_Color.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha_Color.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha_Color.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha_Color.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha_Color.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha_Color.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha_Color.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha_Color.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha_Color.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha_Color.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var game_ChainCounter = function() {
	this.numberFont = kha_Assets.fonts.superstar_memesbruh03;
	this.numberHeight = this.numberFont.height(game_ChainCounter.NUMBER_FONTSIZE);
	this.textFont = kha_Assets.fonts.DigitalDisco;
	this.textWidth = this.textFont.width(game_ChainCounter.TEXT_FONTSIZE,game_ChainCounter.TEXT);
	this.state = 0;
};
$hxClasses["game.ChainCounter"] = game_ChainCounter;
game_ChainCounter.__name__ = "game.ChainCounter";
game_ChainCounter.__interfaces__ = [game_copying_ICopyFrom];
game_ChainCounter.prototype = {
	numberFont: null
	,numberHeight: null
	,textFont: null
	,textWidth: null
	,x: null
	,y: null
	,number: null
	,numberColor: null
	,numberWidth: null
	,totalHalfWidth: null
	,t: null
	,state: null
	,updateAnimation: function() {
		if(this.t == 60) {
			this.state = 0;
			return;
		}
		this.t++;
	}
	,renderAnimation: function(g,alpha) {
		var min = this.t - 1;
		var alphaT = min + (this.t - min) * alpha;
		var scale = Math.min(1,Math.sin(alphaT / 25) * 4);
		var textLength = game_ChainCounter.TEXT.length * (Math.max(0,alphaT - 15) / 20) | 0;
		var numberYOffset = Math.pow(1.2,Math.max(0,alphaT - 38));
		var textYOffset = Math.pow(1.2,Math.max(0,alphaT - 40));
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = this.x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = this.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = scale;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		g.pushOpacity(Math.sin(alphaT / 20));
		g.set_font(this.numberFont);
		g.set_fontSize(game_ChainCounter.NUMBER_FONTSIZE);
		utils_Utils.shadowDrawString(g,4,-16777216,this.numberColor,this.number,-this.totalHalfWidth,-this.numberHeight - numberYOffset + 20);
		g.set_font(this.textFont);
		g.set_fontSize(game_ChainCounter.TEXT_FONTSIZE);
		utils_Utils.shadowDrawString(g,4,-16777216,-1,HxOverrides.substr(game_ChainCounter.TEXT,0,textLength),-this.totalHalfWidth + this.numberWidth,-this.numberHeight / 2 - textYOffset);
		g.popOpacity();
		g.popTransformation();
		g.set_color(-1);
	}
	,startAnimation: function(chain,begin,isPowerful) {
		this.x = begin.x;
		this.y = begin.y;
		if(isPowerful) {
			this.number = "P" + chain;
			this.numberColor = game_ChainCounter.POWERED_COLOR;
		} else {
			this.number = "" + chain;
			this.numberColor = -256;
		}
		this.numberWidth = this.numberFont.width(game_ChainCounter.NUMBER_FONTSIZE,this.number);
		this.totalHalfWidth = (this.numberWidth + this.textWidth) / 2;
		this.t = 0;
		this.state = 1;
	}
	,update: function() {
		switch(this.state) {
		case 0:
			break;
		case 1:
			this.updateAnimation();
			break;
		}
	}
	,render: function(g,alpha) {
		switch(this.state) {
		case 0:
			break;
		case 1:
			this.renderAnimation(g,alpha);
			break;
		}
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.number = other.number;
		this.numberColor = other.numberColor;
		this.numberWidth = other.numberWidth;
		this.totalHalfWidth = other.totalHalfWidth;
		this.t = other.t;
		this.state = other.state;
		return this;
	}
	,__class__: game_ChainCounter
};
var game_gelogroups_GeloGroupType = $hxEnums["game.gelogroups.GeloGroupType"] = { __ename__:"game.gelogroups.GeloGroupType",__constructs__:null
	,PAIR: {_hx_name:"PAIR",_hx_index:0,__enum__:"game.gelogroups.GeloGroupType",toString:$estr}
};
game_gelogroups_GeloGroupType.__constructs__ = [game_gelogroups_GeloGroupType.PAIR];
var game_Dropsets = function() { };
$hxClasses["game.Dropsets"] = game_Dropsets;
game_Dropsets.__name__ = "game.Dropsets";
var game_Macros = function() { };
$hxClasses["game.Macros"] = game_Macros;
game_Macros.__name__ = "game.Macros";
game_Macros.checkForOverride = function(ct) {
	if(ct.superClass == null) {
		return false;
	}
	var sc = ct.superClass.t.get();
	var _this = sc.fields.get();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i].name;
	}
	var fields = result;
	if(fields.indexOf("copyFrom") != -1) {
		return true;
	}
	return game_Macros.checkForOverride(sc);
};
game_Macros.checkInterfaces = function(ct) {
	var _g = 0;
	var _g1 = ct.interfaces;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var it = i.t.get();
		if(it.name == "ICopy") {
			return 1;
		}
		if(it.name == "ICopyFrom") {
			return 2;
		}
		var sup = game_Macros.checkInterfaces(it);
		if(sup != 0) {
			return sup;
		}
	}
	if(ct.superClass == null) {
		return 0;
	}
	return game_Macros.checkInterfaces(ct.superClass.t.get());
};
var game_Queue = function(groups) {
	this.groups = new game_copying_CopyableArray([]);
	var _g = 0;
	while(_g < groups.length) {
		var g = groups[_g];
		++_g;
		this.groups.data.push(g);
	}
	this.currentIndex = 0;
};
$hxClasses["game.Queue"] = game_Queue;
game_Queue.__name__ = "game.Queue";
game_Queue.__interfaces__ = [game_copying_ICopyFrom];
game_Queue.prototype = {
	groups: null
	,currentIndex: null
	,load: function(groups) {
		var _g = 0;
		while(_g < groups.length) {
			var g = groups[_g];
			++_g;
			this.groups.data.push(g);
		}
		this.currentIndex = 0;
	}
	,get: function(index) {
		var d = this.groups.data.length;
		var r = index % d;
		return this.groups.data[(r < 0 ? r + d : r) | 0];
	}
	,setIndex: function(index) {
		if(index == null) {
			return;
		}
		this.currentIndex = index;
	}
	,previous: function() {
		this.currentIndex--;
	}
	,next: function() {
		this.currentIndex++;
	}
	,getCurrent: function() {
		return this.get(this.currentIndex);
	}
	,copyFrom: function(other) {
		this.groups.copyFrom(other.groups);
		this.currentIndex = other.currentIndex;
		return this;
	}
	,__class__: game_Queue
};
var game_ScoreManagerOptions = function(softDropBonus,orientation) {
	this.softDropBonus = softDropBonus;
	this.orientation = orientation;
};
$hxClasses["game.ScoreManagerOptions"] = game_ScoreManagerOptions;
game_ScoreManagerOptions.__name__ = "game.ScoreManagerOptions";
game_ScoreManagerOptions.prototype = {
	softDropBonus: null
	,orientation: null
	,__class__: game_ScoreManagerOptions
};
var game_ScoreManager = function(opts) {
	this.softDropBonus = opts.softDropBonus;
	this.orientation = opts.orientation;
	this.scoreFont = kha_Assets.fonts.DigitalDisco;
	this.scoreFontSize = 52;
	this.scoreTextWidth = this.scoreFont.width(this.scoreFontSize,"00000000");
	this.scoreTextHeight = this.scoreFont.height(this.scoreFontSize);
	this.formulaFontSize = 34;
	this.formulaTextHeight = this.scoreFont.height(this.formulaFontSize);
	this.formulaTextY = -this.scoreTextHeight / 2 + this.scoreTextHeight - this.formulaTextHeight;
	this.actionFont = kha_Assets.fonts.ka1;
	this.actionFontSize = 44;
	this.actionTextHeight = this.actionFont.height(this.actionFontSize);
	this.scoreScaleY = 1;
	this.showChainFormula = false;
	this.showActionText = false;
	this.score = 0;
	this.dropBonus = 0;
};
$hxClasses["game.ScoreManager"] = game_ScoreManager;
game_ScoreManager.__name__ = "game.ScoreManager";
game_ScoreManager.__interfaces__ = [game_copying_ICopyFrom];
game_ScoreManager.prototype = {
	softDropBonus: null
	,orientation: null
	,scoreFont: null
	,scoreFontSize: null
	,scoreTextWidth: null
	,scoreTextHeight: null
	,formulaFontSize: null
	,formulaTextHeight: null
	,formulaTextY: null
	,actionFont: null
	,actionFontSize: null
	,actionTextHeight: null
	,actionTextColor: null
	,scoreScaleY: null
	,formulaText: null
	,formulaTextWidth: null
	,lastFormulaT: null
	,formulaT: null
	,showChainFormula: null
	,actionText: null
	,actionTextT: null
	,actionTextCharacters: null
	,showActionText: null
	,score: null
	,dropBonus: null
	,renderScore: function(g) {
		g.set_font(this.scoreFont);
		g.set_fontSize(this.scoreFontSize);
		utils_Utils.shadowDrawString(g,6,-16777216,-1,StringTools.lpad("" + Math.floor(this.score),"0",8),6,-this.scoreTextHeight / 2 + 6);
	}
	,updateChainFormula: function() {
		if(this.formulaT == 60) {
			this.formulaT = 0;
			this.showChainFormula = false;
		} else {
			this.formulaT++;
		}
	}
	,renderChainFormula: function(g,x,alpha) {
		var min = this.lastFormulaT;
		var lerpedT = min + (this.formulaT - min) * alpha;
		g.set_fontSize(this.formulaFontSize);
		g.pushOpacity(Math.sin(lerpedT / 15));
		utils_Utils.shadowDrawString(g,4,-16777216,-16711681,this.formulaText,x - 4,this.formulaTextY - 4);
		g.popOpacity();
	}
	,updateActionText: function() {
		if(this.actionTextT <= 5) {
			this.scoreScaleY -= 0.166666666666666657;
		} else if(15 < this.actionTextT && this.actionTextT <= 45) {
			this.actionTextCharacters = this.actionText.length * ((this.actionTextT - 15) / 20) | 0;
		} else if(55 < this.actionTextT && this.actionTextT <= 61) {
			this.scoreScaleY += 0.166666666666666657;
		} else if(61 < this.actionTextT) {
			this.showActionText = false;
		}
		this.actionTextT++;
	}
	,renderActionText: function(g,x) {
		g.set_font(this.actionFont);
		g.set_fontSize(this.actionFontSize);
		g.pushOpacity(1 - this.scoreScaleY);
		utils_Utils.shadowDrawString(g,6,-16777216,this.actionTextColor,HxOverrides.substr(this.actionText,0,this.actionTextCharacters),x,-this.scoreTextHeight / 2 + 6);
		g.popOpacity();
		g.set_color(-1);
	}
	,addScoreFromLink: function(info) {
		this.score += info.score;
		this.formulaText = "" + info.clearCount * 10 + " X " + (info.chainPower + info.groupBonus + info.colorBonus);
		this.formulaTextWidth = this.scoreFont.width(this.formulaFontSize,this.formulaText);
		this.formulaT = 0;
		this.showChainFormula = true;
	}
	,addDropBonus: function() {
		this.score += this.softDropBonus.v;
		this.dropBonus += this.softDropBonus.v;
	}
	,resetDropBonus: function() {
		this.dropBonus = 0;
	}
	,displayActionText: function(text,color) {
		this.actionText = text;
		this.actionTextT = 0;
		this.scoreScaleY = 1;
		this.actionTextCharacters = 0;
		this.actionTextColor = color;
		this.showActionText = true;
	}
	,update: function() {
		this.lastFormulaT = this.formulaT;
		if(this.showActionText) {
			this.updateActionText();
		}
		if(this.showChainFormula) {
			this.updateChainFormula();
		}
	}
	,render: function(g,y,alpha) {
		var scoreX;
		switch(this.orientation._hx_index) {
		case 0:
			scoreX = game_geometries_BoardGeometries.WIDTH - this.scoreTextWidth;
			break;
		case 1:
			scoreX = 0;
			break;
		}
		var transl__00 = 1;
		var transl__10 = 0;
		var transl__20 = scoreX;
		var transl__01 = 0;
		var transl__11 = 1;
		var transl__21 = y;
		var transl__02 = 0;
		var transl__12 = 0;
		var transl__22 = 1;
		var scale__00 = 1;
		var scale__10 = 0;
		var scale__20 = 0;
		var scale__01 = 0;
		var scale__11 = this.scoreScaleY;
		var scale__21 = 0;
		var scale__02 = 0;
		var scale__12 = 0;
		var scale__22 = 1;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transl__00 + _this._10 * transl__01 + _this._20 * transl__02;
		var trans__10 = _this._00 * transl__10 + _this._10 * transl__11 + _this._20 * transl__12;
		var trans__20 = _this._00 * transl__20 + _this._10 * transl__21 + _this._20 * transl__22;
		var trans__01 = _this._01 * transl__00 + _this._11 * transl__01 + _this._21 * transl__02;
		var trans__11 = _this._01 * transl__10 + _this._11 * transl__11 + _this._21 * transl__12;
		var trans__21 = _this._01 * transl__20 + _this._11 * transl__21 + _this._21 * transl__22;
		var trans__02 = _this._02 * transl__00 + _this._12 * transl__01 + _this._22 * transl__02;
		var trans__12 = _this._02 * transl__10 + _this._12 * transl__11 + _this._22 * transl__12;
		var trans__22 = _this._02 * transl__20 + _this._12 * transl__21 + _this._22 * transl__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * scale__00 + _this._10 * scale__01 + _this._20 * scale__02;
		var trans__10 = _this._00 * scale__10 + _this._10 * scale__11 + _this._20 * scale__12;
		var trans__20 = _this._00 * scale__20 + _this._10 * scale__21 + _this._20 * scale__22;
		var trans__01 = _this._01 * scale__00 + _this._11 * scale__01 + _this._21 * scale__02;
		var trans__11 = _this._01 * scale__10 + _this._11 * scale__11 + _this._21 * scale__12;
		var trans__21 = _this._01 * scale__20 + _this._11 * scale__21 + _this._21 * scale__22;
		var trans__02 = _this._02 * scale__00 + _this._12 * scale__01 + _this._22 * scale__02;
		var trans__12 = _this._02 * scale__10 + _this._12 * scale__11 + _this._22 * scale__12;
		var trans__22 = _this._02 * scale__20 + _this._12 * scale__21 + _this._22 * scale__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		this.renderScore(g);
		var formulaX;
		switch(this.orientation._hx_index) {
		case 0:
			formulaX = -scoreX;
			break;
		case 1:
			formulaX = game_geometries_BoardGeometries.WIDTH - this.formulaTextWidth;
			break;
		}
		if(this.showChainFormula) {
			this.renderChainFormula(g,formulaX,alpha);
		}
		g.popTransformation();
		if(this.showActionText) {
			this.renderActionText(g,formulaX);
		}
		g.popTransformation();
	}
	,copyFrom: function(other) {
		this.actionTextColor = other.actionTextColor;
		this.formulaText = other.formulaText;
		this.formulaTextWidth = other.formulaTextWidth;
		this.lastFormulaT = other.lastFormulaT;
		this.formulaT = other.formulaT;
		this.showChainFormula = other.showChainFormula;
		this.actionText = other.actionText;
		this.actionTextT = other.actionTextT;
		this.actionTextCharacters = other.actionTextCharacters;
		this.showActionText = other.showActionText;
		this.score = other.score;
		this.dropBonus = other.dropBonus;
		return this;
	}
	,__class__: game_ScoreManager
};
var game_actionbuffers_ActionSnapshot = function(shiftLeft,shiftRight,rotateLeft,rotateRight,softDrop,hardDrop) {
	this.shiftLeft = shiftLeft;
	this.shiftRight = shiftRight;
	this.rotateLeft = rotateLeft;
	this.rotateRight = rotateRight;
	this.softDrop = softDrop;
	this.hardDrop = hardDrop;
};
$hxClasses["game.actionbuffers.ActionSnapshot"] = game_actionbuffers_ActionSnapshot;
game_actionbuffers_ActionSnapshot.__name__ = "game.actionbuffers.ActionSnapshot";
game_actionbuffers_ActionSnapshot.fromBitField = function(bitField) {
	var s = new game_actionbuffers_ActionSnapshot((bitField & 32) == 32,(bitField & 16) == 16,(bitField & 8) == 8,(bitField & 4) == 4,(bitField & 2) == 2,(bitField & 1) == 1);
	return s;
};
game_actionbuffers_ActionSnapshot.prototype = {
	shiftLeft: null
	,shiftRight: null
	,rotateLeft: null
	,rotateRight: null
	,softDrop: null
	,hardDrop: null
	,toBitField: function() {
		return (this.shiftLeft ? 32 : 0) + (this.shiftRight ? 16 : 0) + (this.rotateLeft ? 8 : 0) + (this.rotateRight ? 4 : 0) + (this.softDrop ? 2 : 0) + (this.hardDrop ? 1 : 0);
	}
	,isNotEqual: function(other) {
		if(!(this.softDrop != other.softDrop || this.shiftLeft != other.shiftLeft || this.shiftRight != other.shiftRight || this.rotateLeft != other.rotateLeft || this.rotateRight != other.rotateRight)) {
			return this.hardDrop != other.hardDrop;
		} else {
			return true;
		}
	}
	,__class__: game_actionbuffers_ActionSnapshot
};
var game_actionbuffers_IActionBuffer = function() { };
$hxClasses["game.actionbuffers.IActionBuffer"] = game_actionbuffers_IActionBuffer;
game_actionbuffers_IActionBuffer.__name__ = "game.actionbuffers.IActionBuffer";
game_actionbuffers_IActionBuffer.__isInterface__ = true;
game_actionbuffers_IActionBuffer.prototype = {
	isActive: null
	,update: null
	,exportReplayData: null
	,__class__: game_actionbuffers_IActionBuffer
};
var game_actionbuffers_LocalActionBufferOptions = function(frameCounter,inputDevice,frameDelay) {
	this.frameCounter = frameCounter;
	this.inputDevice = inputDevice;
	this.frameDelay = frameDelay;
};
$hxClasses["game.actionbuffers.LocalActionBufferOptions"] = game_actionbuffers_LocalActionBufferOptions;
game_actionbuffers_LocalActionBufferOptions.__name__ = "game.actionbuffers.LocalActionBufferOptions";
game_actionbuffers_LocalActionBufferOptions.prototype = {
	frameCounter: null
	,inputDevice: null
	,frameDelay: null
	,__class__: game_actionbuffers_LocalActionBufferOptions
};
var game_actionbuffers_LocalActionBuffer = function(opts) {
	this.frameCounter = opts.frameCounter;
	this.inputDevice = opts.inputDevice;
	this.frameDelay = opts.frameDelay;
	var _g = new haxe_ds_IntMap();
	var value = new game_actionbuffers_ActionSnapshot(false,false,false,false,false,false);
	_g.h[0] = value;
	this.actions = _g;
	this.isActive = true;
};
$hxClasses["game.actionbuffers.LocalActionBuffer"] = game_actionbuffers_LocalActionBuffer;
game_actionbuffers_LocalActionBuffer.__name__ = "game.actionbuffers.LocalActionBuffer";
game_actionbuffers_LocalActionBuffer.__interfaces__ = [game_actionbuffers_IActionBuffer];
game_actionbuffers_LocalActionBuffer.prototype = {
	frameCounter: null
	,inputDevice: null
	,frameDelay: null
	,actions: null
	,isActive: null
	,getAction: function(frame) {
		while(frame > 0) {
			if(this.actions.h.hasOwnProperty(frame)) {
				break;
			}
			--frame;
		}
		return this.actions.h[frame];
	}
	,update: function() {
		var latestAction = this.getAction(this.frameCounter.value);
		if(!this.isActive) {
			return latestAction;
		}
		var currentAction = new game_actionbuffers_ActionSnapshot(this.inputDevice.getAction("SHIFT_LEFT"),this.inputDevice.getAction("SHIFT_RIGHT"),this.inputDevice.getAction("ROTATE_LEFT"),this.inputDevice.getAction("ROTATE_RIGHT"),this.inputDevice.getAction("SOFT_DROP"),this.inputDevice.getAction("HARD_DROP"));
		if(latestAction.isNotEqual(currentAction)) {
			this.actions.h[this.frameCounter.value + this.frameDelay] = currentAction;
			latestAction = currentAction;
		}
		return latestAction;
	}
	,exportReplayData: function() {
		var data = new haxe_ds_IntMap();
		var map = this.actions;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var k = _g1_key;
			var v = _g1_value;
			var v1 = v.toBitField();
			data.h[k] = v1;
		}
		return data;
	}
	,__class__: game_actionbuffers_LocalActionBuffer
};
var game_actionbuffers_NullActionBuffer = function() {
	this.nullAction = game_actionbuffers_ActionSnapshot.fromBitField(0);
};
$hxClasses["game.actionbuffers.NullActionBuffer"] = game_actionbuffers_NullActionBuffer;
game_actionbuffers_NullActionBuffer.__name__ = "game.actionbuffers.NullActionBuffer";
game_actionbuffers_NullActionBuffer.__interfaces__ = [game_actionbuffers_IActionBuffer];
game_actionbuffers_NullActionBuffer.__properties__ = {get_instance:"get_instance"};
game_actionbuffers_NullActionBuffer.get_instance = function() {
	if(game_actionbuffers_NullActionBuffer.instance == null) {
		game_actionbuffers_NullActionBuffer.instance = new game_actionbuffers_NullActionBuffer();
	}
	return game_actionbuffers_NullActionBuffer.instance;
};
game_actionbuffers_NullActionBuffer.prototype = {
	nullAction: null
	,isActive: null
	,copy: function() {
		return game_actionbuffers_NullActionBuffer.get_instance();
	}
	,update: function() {
		return this.nullAction;
	}
	,exportReplayData: function() {
		return new haxe_ds_IntMap();
	}
	,__class__: game_actionbuffers_NullActionBuffer
};
var game_actionbuffers__$ReceiveActionBuffer_LatestActionResults = function(frame,actions) {
	this.frame = frame;
	this.actions = actions;
};
$hxClasses["game.actionbuffers._ReceiveActionBuffer.LatestActionResults"] = game_actionbuffers__$ReceiveActionBuffer_LatestActionResults;
game_actionbuffers__$ReceiveActionBuffer_LatestActionResults.__name__ = "game.actionbuffers._ReceiveActionBuffer.LatestActionResults";
game_actionbuffers__$ReceiveActionBuffer_LatestActionResults.prototype = {
	frame: null
	,actions: null
	,__class__: game_actionbuffers__$ReceiveActionBuffer_LatestActionResults
};
var game_actionbuffers_ReceiveActionBufferOptions = function(frameCounter,rollbackMediator) {
	this.frameCounter = frameCounter;
	this.rollbackMediator = rollbackMediator;
};
$hxClasses["game.actionbuffers.ReceiveActionBufferOptions"] = game_actionbuffers_ReceiveActionBufferOptions;
game_actionbuffers_ReceiveActionBufferOptions.__name__ = "game.actionbuffers.ReceiveActionBufferOptions";
game_actionbuffers_ReceiveActionBufferOptions.prototype = {
	frameCounter: null
	,rollbackMediator: null
	,__class__: game_actionbuffers_ReceiveActionBufferOptions
};
var game_actionbuffers_ReceiveActionBuffer = function(opts) {
	this.frameCounter = opts.frameCounter;
	this.rollbackMediator = opts.rollbackMediator;
	var _g = new haxe_ds_IntMap();
	var value = new game_actionbuffers_ActionSnapshot(false,false,false,false,false,false);
	_g.h[0] = value;
	this.actions = _g;
};
$hxClasses["game.actionbuffers.ReceiveActionBuffer"] = game_actionbuffers_ReceiveActionBuffer;
game_actionbuffers_ReceiveActionBuffer.__name__ = "game.actionbuffers.ReceiveActionBuffer";
game_actionbuffers_ReceiveActionBuffer.__interfaces__ = [game_actionbuffers_IActionBuffer];
game_actionbuffers_ReceiveActionBuffer.prototype = {
	frameCounter: null
	,rollbackMediator: null
	,actions: null
	,isActive: null
	,getAction: function(frame) {
		while(frame > 0) {
			if(this.actions.h.hasOwnProperty(frame)) {
				break;
			}
			--frame;
		}
		return this.actions.h[frame];
	}
	,onInput: function(history) {
		var rollbackTo = null;
		var _g = 0;
		while(_g < history.length) {
			var e = history[_g];
			++_g;
			var frame = e.frame;
			var frameDiff = this.frameCounter.value - frame;
			var snapshot = game_actionbuffers_ActionSnapshot.fromBitField(e.actions);
			this.actions.h[frame] = snapshot;
			if(frameDiff < 1) {
				continue;
			}
			if(rollbackTo != null) {
				continue;
			}
			if(this.getAction(frame).isNotEqual(snapshot)) {
				rollbackTo = frame;
			}
		}
		if(rollbackTo != null) {
			this.rollbackMediator.rollback(rollbackTo);
		}
	}
	,update: function() {
		return this.getAction(this.frameCounter.value);
	}
	,exportReplayData: function() {
		var data = new haxe_ds_IntMap();
		var map = this.actions;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var k = _g1_key;
			var v = _g1_value;
			var v1 = v.toBitField();
			data.h[k] = v1;
		}
		return data;
	}
	,__class__: game_actionbuffers_ReceiveActionBuffer
};
var game_actionbuffers_ReplayActionBufferOptions = function(replayData,frameCounter,inputDevice,frameDelay) {
	game_actionbuffers_LocalActionBufferOptions.call(this,frameCounter,inputDevice,frameDelay);
	this.replayData = replayData;
};
$hxClasses["game.actionbuffers.ReplayActionBufferOptions"] = game_actionbuffers_ReplayActionBufferOptions;
game_actionbuffers_ReplayActionBufferOptions.__name__ = "game.actionbuffers.ReplayActionBufferOptions";
game_actionbuffers_ReplayActionBufferOptions.__super__ = game_actionbuffers_LocalActionBufferOptions;
game_actionbuffers_ReplayActionBufferOptions.prototype = $extend(game_actionbuffers_LocalActionBufferOptions.prototype,{
	replayData: null
	,__class__: game_actionbuffers_ReplayActionBufferOptions
});
var game_actionbuffers_ReplayActionBuffer = function(opts) {
	game_actionbuffers_LocalActionBuffer.call(this,opts);
	var map = opts.replayData;
	var _g_map = map;
	var _g_keys = map.keys();
	while(_g_keys.hasNext()) {
		var key = _g_keys.next();
		var _g1_value = _g_map.get(key);
		var _g1_key = key;
		var f = _g1_key;
		var d = _g1_value;
		var this1 = this.actions;
		var v = game_actionbuffers_ActionSnapshot.fromBitField(d);
		this1.h[f] = v;
	}
	this.mode = 0;
};
$hxClasses["game.actionbuffers.ReplayActionBuffer"] = game_actionbuffers_ReplayActionBuffer;
game_actionbuffers_ReplayActionBuffer.__name__ = "game.actionbuffers.ReplayActionBuffer";
game_actionbuffers_ReplayActionBuffer.__super__ = game_actionbuffers_LocalActionBuffer;
game_actionbuffers_ReplayActionBuffer.prototype = $extend(game_actionbuffers_LocalActionBuffer.prototype,{
	mode: null
	,update: function() {
		if(this.mode == 0) {
			return this.getAction(this.frameCounter.value);
		}
		return game_actionbuffers_LocalActionBuffer.prototype.update.call(this);
	}
	,__class__: game_actionbuffers_ReplayActionBuffer
});
var game_actionbuffers_SenderActionBufferOptions = function(session,frameCounter,inputDevice,frameDelay) {
	game_actionbuffers_LocalActionBufferOptions.call(this,frameCounter,inputDevice,frameDelay);
	this.session = session;
};
$hxClasses["game.actionbuffers.SenderActionBufferOptions"] = game_actionbuffers_SenderActionBufferOptions;
game_actionbuffers_SenderActionBufferOptions.__name__ = "game.actionbuffers.SenderActionBufferOptions";
game_actionbuffers_SenderActionBufferOptions.__super__ = game_actionbuffers_LocalActionBufferOptions;
game_actionbuffers_SenderActionBufferOptions.prototype = $extend(game_actionbuffers_LocalActionBufferOptions.prototype,{
	session: null
	,__class__: game_actionbuffers_SenderActionBufferOptions
});
var game_actionbuffers_SenderActionBuffer = function(opts) {
	game_actionbuffers_LocalActionBuffer.call(this,opts);
	this.session = opts.session;
};
$hxClasses["game.actionbuffers.SenderActionBuffer"] = game_actionbuffers_SenderActionBuffer;
game_actionbuffers_SenderActionBuffer.__name__ = "game.actionbuffers.SenderActionBuffer";
game_actionbuffers_SenderActionBuffer.__super__ = game_actionbuffers_LocalActionBuffer;
game_actionbuffers_SenderActionBuffer.prototype = $extend(game_actionbuffers_LocalActionBuffer.prototype,{
	session: null
	,update: function() {
		var latestAction = game_actionbuffers_LocalActionBuffer.prototype.update.call(this);
		var bf = latestAction.toBitField();
		if(this.isActive) {
			this.session.isInputIdle = bf == 0;
		} else {
			this.session.isInputIdle = true;
		}
		this.session.sendInput(this.frameCounter.value + this.frameDelay,bf);
		return latestAction;
	}
	,__class__: game_actionbuffers_SenderActionBuffer
});
var game_actions_Action = {};
game_actions_Action.getValues = function() {
	return ["PAUSE","MENU_LEFT","MENU_RIGHT","MENU_DOWN","MENU_UP","BACK","CONFIRM","SHIFT_LEFT","SHIFT_RIGHT","SOFT_DROP","HARD_DROP","ROTATE_LEFT","ROTATE_RIGHT","TOGGLE_EDIT_MODE","EDIT_LEFT","EDIT_RIGHT","EDIT_DOWN","EDIT_UP","EDIT_SET","EDIT_CLEAR","PREVIOUS_STEP","NEXT_STEP","PREVIOUS_COLOR","NEXT_COLOR","PREVIOUS_GROUP","NEXT_GROUP","TOGGLE_MARKERS","QUICK_RESTART","SAVE_STATE","LOAD_STATE"];
};
var input_InputType = $hxEnums["input.InputType"] = { __ename__:"input.InputType",__constructs__:null
	,HOLD: {_hx_name:"HOLD",_hx_index:0,__enum__:"input.InputType",toString:$estr}
	,PRESS: {_hx_name:"PRESS",_hx_index:1,__enum__:"input.InputType",toString:$estr}
	,REPEAT: {_hx_name:"REPEAT",_hx_index:2,__enum__:"input.InputType",toString:$estr}
};
input_InputType.__constructs__ = [input_InputType.HOLD,input_InputType.PRESS,input_InputType.REPEAT];
var game_actions_ActionDataEntry = function(title,description,inputType,isUnbindable) {
	this.title = title;
	this.description = description;
	this.inputType = inputType;
	this.isUnbindable = isUnbindable;
};
$hxClasses["game.actions.ActionDataEntry"] = game_actions_ActionDataEntry;
game_actions_ActionDataEntry.__name__ = "game.actions.ActionDataEntry";
game_actions_ActionDataEntry.prototype = {
	title: null
	,description: null
	,inputType: null
	,isUnbindable: null
	,__class__: game_actions_ActionDataEntry
};
var game_auto_$attack_AutoAttackLinkData = function() {
	var _g = new haxe_ds_IntMap();
	_g.h[0] = 0;
	_g.h[1] = 0;
	_g.h[2] = 0;
	_g.h[3] = 0;
	_g.h[4] = 0;
	this.clearsByColor = _g;
	this.sendsAllClearBonus = false;
};
$hxClasses["game.auto_attack.AutoAttackLinkData"] = game_auto_$attack_AutoAttackLinkData;
game_auto_$attack_AutoAttackLinkData.__name__ = "game.auto_attack.AutoAttackLinkData";
game_auto_$attack_AutoAttackLinkData.prototype = {
	clearsByColor: null
	,sendsAllClearBonus: null
	,__class__: game_auto_$attack_AutoAttackLinkData
};
var game_auto_$attack_AutoAttackManagerOptions = function(popCount,rng,geometries,trainingSettings,prefsSettings,linkBuilder,garbageManager,chainCounter,particleManager) {
	this.popCount = popCount;
	this.rng = rng;
	this.geometries = geometries;
	this.trainingSettings = trainingSettings;
	this.prefsSettings = prefsSettings;
	this.linkBuilder = linkBuilder;
	this.garbageManager = garbageManager;
	this.chainCounter = chainCounter;
	this.particleManager = particleManager;
};
$hxClasses["game.auto_attack.AutoAttackManagerOptions"] = game_auto_$attack_AutoAttackManagerOptions;
game_auto_$attack_AutoAttackManagerOptions.__name__ = "game.auto_attack.AutoAttackManagerOptions";
game_auto_$attack_AutoAttackManagerOptions.prototype = {
	popCount: null
	,rng: null
	,geometries: null
	,trainingSettings: null
	,prefsSettings: null
	,linkBuilder: null
	,garbageManager: null
	,chainCounter: null
	,particleManager: null
	,__class__: game_auto_$attack_AutoAttackManagerOptions
};
var game_auto_$attack_AutoAttackManager = function(opts) {
	this.popCount = opts.popCount;
	this.rng = opts.rng;
	this.geometries = opts.geometries;
	this.trainingSettings = opts.trainingSettings;
	this.prefsSettings = opts.prefsSettings;
	this.linkBuilder = opts.linkBuilder;
	this.garbageManager = opts.garbageManager;
	this.chainCounter = opts.chainCounter;
	this.particleManager = opts.particleManager;
	this.links = new game_copying_ConstantCopyableArray([]);
	this.linkData = new game_copying_ConstantCopyableArray([]);
	this.isPaused = true;
	this.type = "RANDOM";
};
$hxClasses["game.auto_attack.AutoAttackManager"] = game_auto_$attack_AutoAttackManager;
game_auto_$attack_AutoAttackManager.__name__ = "game.auto_attack.AutoAttackManager";
game_auto_$attack_AutoAttackManager.__interfaces__ = [game_copying_ICopyFrom];
game_auto_$attack_AutoAttackManager.prototype = {
	popCount: null
	,rng: null
	,geometries: null
	,trainingSettings: null
	,prefsSettings: null
	,linkBuilder: null
	,garbageManager: null
	,chainCounter: null
	,particleManager: null
	,links: null
	,accumGarbage: null
	,linkIndex: null
	,linkData: null
	,timer: null
	,chain: null
	,state: null
	,isPaused: null
	,type: null
	,constructRandomLinks: function() {
		this.links.data.length = 0;
		this.accumGarbage = 0;
		this.chain = 0;
		var remainder = 0.0;
		var _g = 0;
		var _g1 = this.rng.data.GetIn(this.trainingSettings.minAttackChain,this.trainingSettings.maxAttackChain);
		while(_g < _g1) {
			var _ = _g++;
			var _g2 = new haxe_ds_IntMap();
			_g2.h[0] = 0;
			_g2.h[1] = 0;
			_g2.h[2] = 0;
			_g2.h[3] = 0;
			_g2.h[4] = 0;
			var clearsByColor = _g2;
			var colorCount = this.rng.data.GetIn(this.trainingSettings.minAttackColors,this.trainingSettings.maxAttackColors);
			var _g3 = 0;
			var _g4 = colorCount;
			while(_g3 < _g4) {
				var i = _g3++;
				var v = this.popCount.v + this.rng.data.GetIn(this.trainingSettings.minAttackGroupDiff,this.trainingSettings.maxAttackGroupDiff);
				clearsByColor.h[i] = v;
			}
			var link = this.linkBuilder.build(new game_simulation_LinkInfoBuildParameters(clearsByColor,++this.chain,0,remainder,false,this.accumGarbage));
			remainder = link.garbageRemainder;
			this.accumGarbage = link.accumulatedGarbage;
			this.links.data.push(link);
		}
	}
	,onWaitingEnd: function() {
		this.garbageManager.clear();
		this.linkIndex = 0;
		if(this.type == "RANDOM") {
			this.constructRandomLinks();
		}
		if(this.links.data.length > 0) {
			this.state = 1;
		} else {
			this.reset();
		}
	}
	,onSendingEnd: function() {
		var link = this.links.data[this.linkIndex];
		this.linkIndex++;
		this.garbageManager.sendGarbage(link.garbage,[new game_gelos_ScreenGeloPoint(1,0,800)]);
		var coords = new utils_Point(112,800);
		this.chainCounter.startAnimation(link.chain,coords,link.isPowerful);
		var absCoords = this.geometries.absolutePosition.add(coords);
		var color = this.prefsSettings.primaryColors.h[1];
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			var tmp = this.particleManager;
			var _g1 = absCoords.x + 32 * this.rng.data.GetFloatIn(-1,1);
			var _g2 = absCoords.y + 32 * this.rng.data.GetFloatIn(-1,1);
			var _g3 = (i % 2 == 0 ? -8 : 8) * this.rng.data.GetFloatIn(0.5,1.5);
			var _g4 = -10 * this.rng.data.GetFloatIn(0.5,1.5);
			tmp.add(game_particles_ParticleLayer.FRONT,game_particles_GeloPopParticle.create(new game_particles_GeloPopParticleOptions(_g3,0.75 * this.rng.data.GetFloatIn(0.5,1.5),color,(30 + i * 6) * this.rng.data.GetFloatIn(0.5,1.5) | 0,_g1,_g2,_g4)));
		}
		if(this.linkIndex == this.links.data.length) {
			this.garbageManager.confirmGarbage(this.accumGarbage);
			this.reset();
		} else {
			this.timer = 80;
		}
	}
	,reset: function() {
		this.timer = this.rng.data.GetIn(this.trainingSettings.minAttackTime,this.trainingSettings.maxAttackTime) * 60;
		this.state = 0;
	}
	,constructLinks: function() {
		this.links.data.length = 0;
		this.accumGarbage = 0;
		this.chain = 0;
		var remainder = 0.0;
		var _g = 0;
		var _g1 = this.linkData.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var link = this.linkBuilder.build(new game_simulation_LinkInfoBuildParameters(d.clearsByColor,++this.chain,0,remainder,d.sendsAllClearBonus,this.accumGarbage));
			remainder = link.garbageRemainder;
			this.accumGarbage = link.accumulatedGarbage;
			this.links.data.push(link);
		}
	}
	,update: function() {
		if(this.isPaused) {
			return;
		}
		if(this.timer == 0) {
			switch(this.state) {
			case 0:
				this.onWaitingEnd();
				break;
			case 1:
				this.onSendingEnd();
				break;
			}
			return;
		}
		this.timer--;
		this.chainCounter.update();
	}
	,render: function(g,alpha) {
		this.chainCounter.render(g,alpha);
	}
	,copyFrom: function(other) {
		this.accumGarbage = other.accumGarbage;
		this.linkIndex = other.linkIndex;
		this.linkData.copyFrom(other.linkData);
		this.timer = other.timer;
		this.chain = other.chain;
		this.state = other.state;
		this.isPaused = other.isPaused;
		this.type = other.type;
		return this;
	}
	,__class__: game_auto_$attack_AutoAttackManager
};
var game_backgrounds__$NestBackground_BackgroundParticle = function(rng) {
	this.rng = rng;
	this.randomizeData();
	this.y += ScaleManager.screen.height / 8;
};
$hxClasses["game.backgrounds._NestBackground.BackgroundParticle"] = game_backgrounds__$NestBackground_BackgroundParticle;
game_backgrounds__$NestBackground_BackgroundParticle.__name__ = "game.backgrounds._NestBackground.BackgroundParticle";
game_backgrounds__$NestBackground_BackgroundParticle.prototype = {
	rng: null
	,lastY: null
	,x: null
	,y: null
	,dy: null
	,t: null
	,randomizeData: function() {
		this.x = this.rng.data.GetFloatIn(0,ScaleManager.screen.width);
		this.y = ScaleManager.screen.height * this.rng.data.GetFloatIn(1,1.25);
		this.dy = this.rng.data.GetFloatIn(0.5,2);
		this.t = this.rng.data.GetIn(0,12);
		this.lastY = this.y;
	}
	,update: function() {
		if(this.y < -64) {
			this.randomizeData();
		}
		this.lastY = this.y;
		this.y -= this.dy;
		++this.t;
	}
	,render: function(g,alpha) {
		var min = this.lastY;
		var lerpY = min + (this.y - min) * alpha;
		var c = Math.sin(this.t / (this.dy * 50));
		var r = c * 12;
		g.pushOpacity(Math.max(c,0));
		g.set_color(-65536);
		kha_graphics2_GraphicsExtension.fillCircle(g,this.x,lerpY,r,8);
		g.set_color(-16777216);
		kha_graphics2_GraphicsExtension.fillCircle(g,this.x,lerpY,r - 4,8);
		g.set_color(-1);
		g.popOpacity();
	}
	,__class__: game_backgrounds__$NestBackground_BackgroundParticle
};
var game_backgrounds_NestBackground = function(rng) {
	this.rng = rng;
	this.particles = [];
	var _g = 0;
	while(_g < 128) {
		var x = _g++;
		this.particles.push(new game_backgrounds__$NestBackground_BackgroundParticle(rng));
	}
};
$hxClasses["game.backgrounds.NestBackground"] = game_backgrounds_NestBackground;
game_backgrounds_NestBackground.__name__ = "game.backgrounds.NestBackground";
game_backgrounds_NestBackground.prototype = {
	rng: null
	,particles: null
	,update: function() {
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.update();
		}
	}
	,render: function(g,alpha) {
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.render(g,alpha);
		}
	}
	,__class__: game_backgrounds_NestBackground
};
var game_boardmanagers_DualBoardManagerOptions = function(doesBoardOneHavePriority,boardOne,boardTwo) {
	this.doesBoardOneHavePriority = doesBoardOneHavePriority;
	this.boardOne = boardOne;
	this.boardTwo = boardTwo;
};
$hxClasses["game.boardmanagers.DualBoardManagerOptions"] = game_boardmanagers_DualBoardManagerOptions;
game_boardmanagers_DualBoardManagerOptions.__name__ = "game.boardmanagers.DualBoardManagerOptions";
game_boardmanagers_DualBoardManagerOptions.prototype = {
	doesBoardOneHavePriority: null
	,boardOne: null
	,boardTwo: null
	,__class__: game_boardmanagers_DualBoardManagerOptions
};
var game_boardmanagers_IBoardManager = function() { };
$hxClasses["game.boardmanagers.IBoardManager"] = game_boardmanagers_IBoardManager;
game_boardmanagers_IBoardManager.__name__ = "game.boardmanagers.IBoardManager";
game_boardmanagers_IBoardManager.__isInterface__ = true;
game_boardmanagers_IBoardManager.prototype = {
	addDesyncInfo: null
	,update: null
	,render: null
	,__class__: game_boardmanagers_IBoardManager
};
var game_boardmanagers_DualBoardManager = function(opts) {
	this.doesBoardOneHavePriority = opts.doesBoardOneHavePriority;
	this.boardOne = opts.boardOne;
	this.boardTwo = opts.boardTwo;
};
$hxClasses["game.boardmanagers.DualBoardManager"] = game_boardmanagers_DualBoardManager;
game_boardmanagers_DualBoardManager.__name__ = "game.boardmanagers.DualBoardManager";
game_boardmanagers_DualBoardManager.__interfaces__ = [game_boardmanagers_IBoardManager];
game_boardmanagers_DualBoardManager.prototype = {
	doesBoardOneHavePriority: null
	,boardOne: null
	,boardTwo: null
	,addDesyncInfo: function(ctx) {
		if(this.doesBoardOneHavePriority) {
			this.boardOne.addDesyncInfo(ctx);
			this.boardTwo.addDesyncInfo(ctx);
		} else {
			this.boardTwo.addDesyncInfo(ctx);
			this.boardOne.addDesyncInfo(ctx);
		}
	}
	,update: function() {
		this.boardOne.update();
		this.boardTwo.update();
	}
	,render: function(g,g4,alpha) {
		this.boardOne.render(g,g4,alpha);
		this.boardTwo.render(g,g4,alpha);
	}
	,__class__: game_boardmanagers_DualBoardManager
};
var game_boardmanagers_SingleBoardManagerOptions = function(geometries,board) {
	this.geometries = geometries;
	this.board = board;
};
$hxClasses["game.boardmanagers.SingleBoardManagerOptions"] = game_boardmanagers_SingleBoardManagerOptions;
game_boardmanagers_SingleBoardManagerOptions.__name__ = "game.boardmanagers.SingleBoardManagerOptions";
game_boardmanagers_SingleBoardManagerOptions.prototype = {
	geometries: null
	,board: null
	,__class__: game_boardmanagers_SingleBoardManagerOptions
};
var game_boardmanagers_SingleBoardManager = function(opts) {
	this.geometries = opts.geometries;
	this.board = opts.board;
};
$hxClasses["game.boardmanagers.SingleBoardManager"] = game_boardmanagers_SingleBoardManager;
game_boardmanagers_SingleBoardManager.__name__ = "game.boardmanagers.SingleBoardManager";
game_boardmanagers_SingleBoardManager.__interfaces__ = [game_boardmanagers_IBoardManager];
game_boardmanagers_SingleBoardManager.prototype = {
	geometries: null
	,board: null
	,addDesyncInfo: function(ctx) {
		this.board.addDesyncInfo(ctx);
	}
	,update: function() {
		this.board.update();
	}
	,render: function(g,g4,alpha) {
		var absPos = this.geometries.absolutePosition;
		var absX = absPos.x;
		var absY = absPos.y;
		var scale = this.geometries.scale;
		ScaleManager.transformedScissor(g,absX,absY,game_geometries_BoardGeometries.WIDTH * scale,game_geometries_BoardGeometries.HEIGHT * scale);
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = absX;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = absY;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = scale;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = scale;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		this.board.renderScissored(g,g4,alpha);
		g.disableScissor();
		this.board.renderFloating(g,g4,alpha);
		g.popTransformation();
	}
	,__class__: game_boardmanagers_SingleBoardManager
};
var game_boards_EndlessBoardOptions = function(endlessState,pauseMediator,inputDevice,state) {
	this.endlessState = endlessState;
	this.pauseMediator = pauseMediator;
	this.inputDevice = inputDevice;
	this.state = state;
};
$hxClasses["game.boards.EndlessBoardOptions"] = game_boards_EndlessBoardOptions;
game_boards_EndlessBoardOptions.__name__ = "game.boards.EndlessBoardOptions";
game_boards_EndlessBoardOptions.prototype = {
	endlessState: null
	,pauseMediator: null
	,inputDevice: null
	,state: null
	,__class__: game_boards_EndlessBoardOptions
};
var game_boards_IBoard = function() { };
$hxClasses["game.boards.IBoard"] = game_boards_IBoard;
game_boards_IBoard.__name__ = "game.boards.IBoard";
game_boards_IBoard.__isInterface__ = true;
game_boards_IBoard.__interfaces__ = [game_copying_ICopyFrom];
game_boards_IBoard.prototype = {
	inputDevice: null
	,addDesyncInfo: null
	,update: null
	,renderScissored: null
	,renderFloating: null
	,copyFrom: null
	,__class__: game_boards_IBoard
};
var game_boards_SingleStateBoard = function(opts) {
	this.pauseMediator = opts.pauseMediator;
	this.inputDevice = opts.inputDevice;
	this.state = opts.state;
};
$hxClasses["game.boards.SingleStateBoard"] = game_boards_SingleStateBoard;
game_boards_SingleStateBoard.__name__ = "game.boards.SingleStateBoard";
game_boards_SingleStateBoard.__interfaces__ = [game_boards_IBoard];
game_boards_SingleStateBoard.prototype = {
	pauseMediator: null
	,inputDevice: null
	,state: null
	,addDesyncInfo: function(ctx) {
		this.state.addDesyncInfo(ctx);
	}
	,update: function() {
		if(this.inputDevice.getAction("PAUSE")) {
			this.pauseMediator.pause(this.inputDevice);
		}
		this.state.update();
	}
	,renderScissored: function(g,g4,alpha) {
		this.state.renderScissored(g,g4,alpha);
	}
	,renderFloating: function(g,g4,alpha) {
		this.state.renderFloating(g,g4,alpha);
	}
	,copyFrom: function(other) {
		return this;
	}
	,__class__: game_boards_SingleStateBoard
};
var game_boards_EndlessBoard = function(opts) {
	game_boards_SingleStateBoard.call(this,new game_boards_SingleStateBoardOptions(opts.pauseMediator,opts.inputDevice,opts.endlessState));
	this.endlessState = opts.endlessState;
};
$hxClasses["game.boards.EndlessBoard"] = game_boards_EndlessBoard;
game_boards_EndlessBoard.__name__ = "game.boards.EndlessBoard";
game_boards_EndlessBoard.__super__ = game_boards_SingleStateBoard;
game_boards_EndlessBoard.prototype = $extend(game_boards_SingleStateBoard.prototype,{
	endlessState: null
	,update: function() {
		if(this.inputDevice.getAction("QUICK_RESTART")) {
			this.endlessState.onLose();
		}
		game_boards_SingleStateBoard.prototype.update.call(this);
	}
	,copyFrom: function(other) {
		game_boards_SingleStateBoard.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_boards_EndlessBoard
});
var game_boards_SingleStateBoardOptions = function(pauseMediator,inputDevice,state) {
	this.pauseMediator = pauseMediator;
	this.inputDevice = inputDevice;
	this.state = state;
};
$hxClasses["game.boards.SingleStateBoardOptions"] = game_boards_SingleStateBoardOptions;
game_boards_SingleStateBoardOptions.__name__ = "game.boards.SingleStateBoardOptions";
game_boards_SingleStateBoardOptions.prototype = {
	pauseMediator: null
	,inputDevice: null
	,state: null
	,__class__: game_boards_SingleStateBoardOptions
};
var game_boards_TrainingBoardOptions = function(pauseMediator,inputDevice,infoState,controlHintContainer,saveGameStateMediator,playState,editState) {
	this.pauseMediator = pauseMediator;
	this.inputDevice = inputDevice;
	this.infoState = infoState;
	this.controlHintContainer = controlHintContainer;
	this.saveGameStateMediator = saveGameStateMediator;
	this.playState = playState;
	this.editState = editState;
};
$hxClasses["game.boards.TrainingBoardOptions"] = game_boards_TrainingBoardOptions;
game_boards_TrainingBoardOptions.__name__ = "game.boards.TrainingBoardOptions";
game_boards_TrainingBoardOptions.prototype = {
	pauseMediator: null
	,inputDevice: null
	,infoState: null
	,controlHintContainer: null
	,saveGameStateMediator: null
	,playState: null
	,editState: null
	,__class__: game_boards_TrainingBoardOptions
};
var ui_ControlHint = function(actions,description) {
	this.actions = actions;
	this.description = description;
};
$hxClasses["ui.ControlHint"] = ui_ControlHint;
ui_ControlHint.__name__ = "ui.ControlHint";
ui_ControlHint.prototype = {
	actions: null
	,description: null
	,__class__: ui_ControlHint
};
var game_boards_TrainingBoard = function(opts) {
	this.pauseMediator = opts.pauseMediator;
	this.inputDevice = opts.inputDevice;
	this.infoState = opts.infoState;
	this.controlHintContainer = opts.controlHintContainer;
	this.saveGameStateMediator = opts.saveGameStateMediator;
	this.playState = opts.playState;
	this.editState = opts.editState;
	this.changeToGame();
};
$hxClasses["game.boards.TrainingBoard"] = game_boards_TrainingBoard;
game_boards_TrainingBoard.__name__ = "game.boards.TrainingBoard";
game_boards_TrainingBoard.__interfaces__ = [game_boards_IBoard];
game_boards_TrainingBoard.prototype = {
	pauseMediator: null
	,inputDevice: null
	,infoState: null
	,controlHintContainer: null
	,saveGameStateMediator: null
	,playState: null
	,editState: null
	,activeState: null
	,setControlHints: function(hints) {
		var d = this.controlHintContainer.value.data;
		d.length = 0;
		var _g = 0;
		while(_g < hints.length) {
			var h = hints[_g];
			++_g;
			d.push(h);
		}
	}
	,changeToEdit: function() {
		this.editState.loadStep();
		this.infoState.showChainSteps();
		this.setControlHints(game_boards_TrainingBoard.EDIT_CONTROL_HINTS);
		this.activeState = this.editState;
	}
	,changeToGame: function() {
		this.playState.resume();
		this.infoState.hideChainSteps();
		this.setControlHints(game_boards_TrainingBoard.GAME_CONTROL_HINTS);
		this.activeState = this.playState;
	}
	,getField: function() {
		if(this.activeState == this.playState) {
			return this.playState.getField();
		}
		return this.editState.field;
	}
	,clearField: function() {
		if(this.activeState == this.playState) {
			this.playState.clearField();
		} else {
			this.editState.clearField();
		}
	}
	,addDesyncInfo: function(ctx) {
	}
	,update: function() {
		if(this.inputDevice.getAction("PAUSE")) {
			this.pauseMediator.pause(this.inputDevice);
		}
		if(this.inputDevice.getAction("TOGGLE_EDIT_MODE")) {
			if(this.activeState == this.playState) {
				this.changeToEdit();
			} else {
				this.changeToGame();
			}
		}
		if(this.activeState == this.playState) {
			if(this.inputDevice.getAction("PREVIOUS_GROUP")) {
				this.playState.previousGroup();
			} else if(this.inputDevice.getAction("NEXT_GROUP")) {
				this.playState.nextGroup();
			}
			if(this.inputDevice.getAction("QUICK_RESTART")) {
				this.playState.onLose();
			}
			if(this.inputDevice.getAction("SAVE_STATE")) {
				this.saveGameStateMediator.saveState();
			} else if(this.inputDevice.getAction("LOAD_STATE")) {
				this.saveGameStateMediator.loadState();
			}
		} else if(this.inputDevice.getAction("PREVIOUS_STEP")) {
			this.editState.viewPrevious();
			this.infoState.onViewChainStep();
		} else if(this.inputDevice.getAction("NEXT_STEP")) {
			this.editState.viewNext();
			this.infoState.onViewChainStep();
		}
		this.activeState.update();
	}
	,renderScissored: function(g,g4,alpha) {
		this.activeState.renderScissored(g,g4,alpha);
	}
	,renderFloating: function(g,g4,alpha) {
		this.activeState.renderFloating(g,g4,alpha);
	}
	,copyFrom: function(other) {
		this.activeState.copyFrom(other.activeState);
		return this;
	}
	,__class__: game_boards_TrainingBoard
};
var game_boardstates_EditingBoardStateOptions = function(geometries,inputDevice,chainSim,chainCounter,prefsSettings,field) {
	this.geometries = geometries;
	this.inputDevice = inputDevice;
	this.chainSim = chainSim;
	this.chainCounter = chainCounter;
	this.prefsSettings = prefsSettings;
	this.field = field;
};
$hxClasses["game.boardstates.EditingBoardStateOptions"] = game_boardstates_EditingBoardStateOptions;
game_boardstates_EditingBoardStateOptions.__name__ = "game.boardstates.EditingBoardStateOptions";
game_boardstates_EditingBoardStateOptions.prototype = {
	geometries: null
	,inputDevice: null
	,chainSim: null
	,chainCounter: null
	,prefsSettings: null
	,field: null
	,__class__: game_boardstates_EditingBoardStateOptions
};
var game_boardstates_IBoardState = function() { };
$hxClasses["game.boardstates.IBoardState"] = game_boardstates_IBoardState;
game_boardstates_IBoardState.__name__ = "game.boardstates.IBoardState";
game_boardstates_IBoardState.__isInterface__ = true;
game_boardstates_IBoardState.__interfaces__ = [game_copying_ICopyFrom];
game_boardstates_IBoardState.prototype = {
	addDesyncInfo: null
	,update: null
	,renderScissored: null
	,renderFloating: null
	,copyFrom: null
	,__class__: game_boardstates_IBoardState
};
var game_boardstates_EditingBoardState = function(opts) {
	this.geometries = opts.geometries;
	this.inputDevice = opts.inputDevice;
	this.chainSim = opts.chainSim;
	this.chainCounter = opts.chainCounter;
	this.prefsSettings = opts.prefsSettings;
	this.field = opts.field;
	this.markers = [game_fields_ChainFieldMarker.create(),game_fields_AllClearFieldMarker.create(this.prefsSettings,0),game_fields_AllClearFieldMarker.create(this.prefsSettings,1),game_fields_AllClearFieldMarker.create(this.prefsSettings,2),game_fields_AllClearFieldMarker.create(this.prefsSettings,3),game_fields_AllClearFieldMarker.create(this.prefsSettings,4),game_fields_DependencyFieldMarker.create(this.prefsSettings,0),game_fields_DependencyFieldMarker.create(this.prefsSettings,1),game_fields_DependencyFieldMarker.create(this.prefsSettings,2),game_fields_DependencyFieldMarker.create(this.prefsSettings,3),game_fields_DependencyFieldMarker.create(this.prefsSettings,4),game_fields_ColorConflictFieldMarker.create(this.prefsSettings,0),game_fields_ColorConflictFieldMarker.create(this.prefsSettings,1),game_fields_ColorConflictFieldMarker.create(this.prefsSettings,2),game_fields_ColorConflictFieldMarker.create(this.prefsSettings,3),game_fields_ColorConflictFieldMarker.create(this.prefsSettings,4)];
	this.field = opts.field;
	this.cursorX = (this.field.columns / 2 | 0) - 1;
	this.cursorY = this.field.totalRows - 1;
	this.moveCursor(0,0);
	this.selectedIndex = 0;
	this.mode = 0;
};
$hxClasses["game.boardstates.EditingBoardState"] = game_boardstates_EditingBoardState;
game_boardstates_EditingBoardState.__name__ = "game.boardstates.EditingBoardState";
game_boardstates_EditingBoardState.__interfaces__ = [game_boardstates_IBoardState];
game_boardstates_EditingBoardState.prototype = {
	geometries: null
	,inputDevice: null
	,chainSim: null
	,chainCounter: null
	,prefsSettings: null
	,markers: null
	,cursorX: null
	,cursorY: null
	,cursorDisplayX: null
	,cursorDisplayY: null
	,selectedIndex: null
	,mode: null
	,field: null
	,moveCursor: function(deltaX,deltaY) {
		this.cursorX = Math.min(this.field.columns - 1,Math.max(this.cursorX + deltaX,0)) | 0;
		this.cursorY = Math.min(this.field.totalRows - 1,Math.max(this.cursorY + deltaY,this.field.garbageRows)) | 0;
		var screenCoords = this.field.cellToScreen(this.cursorX,this.cursorY);
		this.cursorDisplayX = screenCoords.x - 32;
		this.cursorDisplayY = screenCoords.y - 32;
	}
	,changeIndex: function(delta) {
		var modulo = this.mode == 0 ? game_boardstates_EditingBoardState.COLORS.length : this.markers.length;
		var r = (this.selectedIndex + delta) % modulo;
		this.selectedIndex = (r < 0 ? r + modulo : r) | 0;
	}
	,modifyChain: function() {
		this.chainSim.modify(this.field.copy());
	}
	,set: function() {
		switch(this.mode) {
		case 0:
			this.field.newGelo(this.cursorX,this.cursorY,game_boardstates_EditingBoardState.COLORS[this.selectedIndex],false);
			this.field.setSpriteVariations();
			break;
		case 1:
			this.field.setMarker(this.cursorX,this.cursorY,this.markers[this.selectedIndex]);
			break;
		}
		this.modifyChain();
	}
	,clear: function() {
		switch(this.mode) {
		case 0:
			this.field.clear(this.cursorX,this.cursorY);
			this.field.setSpriteVariations();
			break;
		case 1:
			this.field.clearMarker(this.cursorX,this.cursorY);
			break;
		}
		this.modifyChain();
	}
	,switchMode: function() {
		this.mode = (this.mode + 1) % 2;
		this.selectedIndex = 0;
	}
	,renderCurrentSelection: function(g) {
		var geloDisplay = this.geometries.editGeloDisplay;
		var displayX = geloDisplay.x;
		var displayY = geloDisplay.y;
		switch(this.mode) {
		case 0:
			game_gelos_Gelo.renderStatic(g,displayX,displayY,game_boardstates_EditingBoardState.COLORS[this.selectedIndex],0);
			break;
		case 1:
			this.markers[this.selectedIndex].render(g,displayX,displayY);
			break;
		}
	}
	,clearField: function() {
		this.field.clearAll();
		this.modifyChain();
	}
	,loadStep: function() {
		var _this = this.chainSim;
		var step = _this.steps.data[_this.viewIndex];
		this.field.copyFrom(step.fieldSnapshot);
	}
	,viewPrevious: function() {
		this.chainSim.view(-1);
		this.chainSim.editViewed();
		this.loadStep();
	}
	,viewNext: function() {
		this.chainSim.view(1);
		this.chainSim.editViewed();
		this.loadStep();
	}
	,addDesyncInfo: function(ctx) {
	}
	,update: function() {
		if(this.inputDevice.getAction("EDIT_LEFT")) {
			this.moveCursor(-1,0);
		} else if(this.inputDevice.getAction("EDIT_RIGHT")) {
			this.moveCursor(1,0);
		}
		if(this.inputDevice.getAction("EDIT_UP")) {
			this.moveCursor(0,-1);
		} else if(this.inputDevice.getAction("EDIT_DOWN")) {
			this.moveCursor(0,1);
		}
		if(this.inputDevice.getAction("PREVIOUS_COLOR")) {
			this.changeIndex(-1);
		} else if(this.inputDevice.getAction("NEXT_COLOR")) {
			this.changeIndex(1);
		}
		if(this.inputDevice.getAction("TOGGLE_MARKERS")) {
			this.switchMode();
		}
		if(this.inputDevice.getAction("EDIT_SET")) {
			this.set();
		} else if(this.inputDevice.getAction("EDIT_CLEAR")) {
			this.clear();
		}
		this.field.update();
		this.chainCounter.update();
	}
	,renderScissored: function(g,g4,alpha) {
		g.set_color(kha_Color.fromBytes(64,32,32));
		g.fillRect(0,0,game_geometries_BoardGeometries.WIDTH,game_geometries_BoardGeometries.HEIGHT);
		g.set_color(-1);
	}
	,renderFloating: function(g,g4,alpha) {
		g.drawImage(kha_Assets.images.Border,-12,-12);
		this.renderCurrentSelection(g);
		this.field.render(g,g4,alpha);
		g.drawRect(this.cursorDisplayX,this.cursorDisplayY,64,64,8);
		this.chainCounter.render(g,alpha);
	}
	,copyFrom: function(other) {
		this.cursorX = other.cursorX;
		this.cursorY = other.cursorY;
		this.cursorDisplayX = other.cursorDisplayX;
		this.cursorDisplayY = other.cursorDisplayY;
		this.selectedIndex = other.selectedIndex;
		this.mode = other.mode;
		return this;
	}
	,__class__: game_boardstates_EditingBoardState
};
var game_boardstates_StandardBoardStateOptions = function(animations,randomizeGarbage,prefsSettings,rng,geometries,particleManager,geloGroup,queue,preview,allClearManager,scoreManager,actionBuffer,chainCounter,field,chainSim,garbageManager) {
	this.animations = animations;
	this.randomizeGarbage = randomizeGarbage;
	this.prefsSettings = prefsSettings;
	this.rng = rng;
	this.geometries = geometries;
	this.particleManager = particleManager;
	this.geloGroup = geloGroup;
	this.queue = queue;
	this.preview = preview;
	this.allClearManager = allClearManager;
	this.scoreManager = scoreManager;
	this.actionBuffer = actionBuffer;
	this.chainCounter = chainCounter;
	this.field = field;
	this.chainSim = chainSim;
	this.garbageManager = garbageManager;
};
$hxClasses["game.boardstates.StandardBoardStateOptions"] = game_boardstates_StandardBoardStateOptions;
game_boardstates_StandardBoardStateOptions.__name__ = "game.boardstates.StandardBoardStateOptions";
game_boardstates_StandardBoardStateOptions.prototype = {
	animations: null
	,randomizeGarbage: null
	,prefsSettings: null
	,rng: null
	,geometries: null
	,particleManager: null
	,geloGroup: null
	,queue: null
	,preview: null
	,allClearManager: null
	,scoreManager: null
	,actionBuffer: null
	,chainCounter: null
	,field: null
	,chainSim: null
	,garbageManager: null
	,__class__: game_boardstates_StandardBoardStateOptions
};
var game_boardstates_EndlessBoardStateOptions = function(clearOnXModeContainer,randomizer,marginManager,animations,randomizeGarbage,prefsSettings,rng,geometries,particleManager,geloGroup,queue,preview,allClearManager,scoreManager,actionBuffer,chainCounter,field,chainSim,garbageManager) {
	game_boardstates_StandardBoardStateOptions.call(this,animations,randomizeGarbage,prefsSettings,rng,geometries,particleManager,geloGroup,queue,preview,allClearManager,scoreManager,actionBuffer,chainCounter,field,chainSim,garbageManager);
	this.clearOnXModeContainer = clearOnXModeContainer;
	this.randomizer = randomizer;
	this.marginManager = marginManager;
};
$hxClasses["game.boardstates.EndlessBoardStateOptions"] = game_boardstates_EndlessBoardStateOptions;
game_boardstates_EndlessBoardStateOptions.__name__ = "game.boardstates.EndlessBoardStateOptions";
game_boardstates_EndlessBoardStateOptions.__super__ = game_boardstates_StandardBoardStateOptions;
game_boardstates_EndlessBoardStateOptions.prototype = $extend(game_boardstates_StandardBoardStateOptions.prototype,{
	clearOnXModeContainer: null
	,randomizer: null
	,marginManager: null
	,__class__: game_boardstates_EndlessBoardStateOptions
});
var game_boardstates_StandardBoardState = function(opts) {
	this.animations = opts.animations;
	this.randomizeGarbage = opts.randomizeGarbage;
	this.prefsSettings = opts.prefsSettings;
	this.rng = opts.rng;
	this.geometries = opts.geometries;
	this.particleManager = opts.particleManager;
	this.geloGroup = opts.geloGroup;
	this.queue = opts.queue;
	this.preview = opts.preview;
	this.allClearManager = opts.allClearManager;
	this.scoreManager = opts.scoreManager;
	this.actionBuffer = opts.actionBuffer;
	this.chainCounter = opts.chainCounter;
	this.field = opts.field;
	this.chainSim = opts.chainSim;
	this.garbageManager = opts.garbageManager;
	this.popPauseMaxT = 30;
	this.borderColor = -1;
	this.beginBorderColor = -1;
	this.targetBorderColor = -1;
	this.borderColorT = 15;
	this.canRotateLeft = true;
	this.canRotateRight = true;
	this.canDropGarbage = true;
	this.beginChainSimulation();
};
$hxClasses["game.boardstates.StandardBoardState"] = game_boardstates_StandardBoardState;
game_boardstates_StandardBoardState.__name__ = "game.boardstates.StandardBoardState";
game_boardstates_StandardBoardState.__interfaces__ = [game_boardstates_IBoardState];
game_boardstates_StandardBoardState.prototype = {
	animations: null
	,randomizeGarbage: null
	,prefsSettings: null
	,rng: null
	,geometries: null
	,particleManager: null
	,geloGroup: null
	,queue: null
	,preview: null
	,allClearManager: null
	,scoreManager: null
	,actionBuffer: null
	,chainCounter: null
	,field: null
	,chainSim: null
	,garbageManager: null
	,popPauseMaxT: null
	,currentActions: null
	,popPauseT: null
	,firstDropFrame: null
	,canRotateLeft: null
	,canRotateRight: null
	,borderColor: null
	,beginBorderColor: null
	,targetBorderColor: null
	,borderColorT: null
	,currentBeginStep: null
	,currentDropStep: null
	,currentPopStep: null
	,currentEndStep: null
	,canDropGarbage: null
	,state: null
	,copyFromSnapshot: function() {
		var _this = this.chainSim;
		this.field.copyFrom(_this.steps.data[_this.viewIndex].fieldSnapshot);
	}
	,nextStep: function() {
		this.chainSim.view(1);
		this.initSimStepState();
	}
	,beginChainSimulation: function() {
		var tmp = this.chainSim;
		var _this = this.queue;
		var _g = _this.get(_this.currentIndex);
		tmp.simulate(new game_simulation__$ChainSimulator_SimOptions(this.field.copy(),this.allClearManager.sendAllClearBonus,this.scoreManager.dropBonus,this.queue.currentIndex,_g));
		var _this = this.chainSim;
		this.field.copyFrom(_this.steps.data[_this.viewIndex].fieldSnapshot);
		this.initSimStepState();
	}
	,lockGroup: function() {
		this.canDropGarbage = true;
		this.actionBuffer.isActive = false;
		this.beginChainSimulation();
	}
	,afterDrop: function() {
	}
	,afterPop: function() {
	}
	,beforeEnd: function() {
	}
	,afterEnd: function() {
	}
	,controlGroup: function() {
		if(this.currentActions.rotateLeft) {
			if(this.canRotateLeft) {
				var _this = this.geloGroup;
				_this.rotate(-1);
				_this.rotationIncrement = -1;
				this.canRotateLeft = false;
			}
		} else {
			this.canRotateLeft = true;
		}
		if(this.currentActions.rotateRight) {
			if(this.canRotateRight) {
				var _this = this.geloGroup;
				_this.rotate(1);
				_this.rotationIncrement = 1;
				this.canRotateRight = false;
			}
		} else {
			this.canRotateRight = true;
		}
		if(this.currentActions.shiftLeft) {
			this.geloGroup.chargeDAS(-1);
			this.geloGroup.shift(-1);
		} else if(this.currentActions.shiftRight) {
			this.geloGroup.chargeDAS(1);
			this.geloGroup.shift(1);
		} else {
			this.geloGroup.stopDAS();
		}
	}
	,initSpawningState: function() {
		var screenCoords = this.field.cellToScreen(this.field.centerColumnIndex,this.field.outerRows - 1);
		var _this = this.queue;
		this.geloGroup.load(screenCoords.x,screenCoords.y + 32,_this.get(_this.currentIndex));
		this.queue.currentIndex++;
		this.preview.startAnimation(this.queue.currentIndex);
		this.actionBuffer.isActive = true;
		this.state = game_boardstates__$StandardBoardState_InnerState.SPAWNING;
	}
	,updateSpawningState: function() {
		this.controlGroup();
		if(this.preview.isAnimationFinished) {
			this.geloGroup.isVisible = true;
			this.initControllingState();
		}
	}
	,initControllingState: function() {
		this.state = game_boardstates__$StandardBoardState_InnerState.CONTROLLING;
	}
	,updateControllingState: function() {
		this.controlGroup();
		if(this.currentActions.hardDrop) {
			this.geloGroup.hardDrop();
			this.lockGroup();
			return;
		}
		if(this.geloGroup.drop(this.currentActions.softDrop)) {
			this.lockGroup();
		}
	}
	,initSimStepState: function() {
		var _this = this.chainSim;
		var step = _this.steps.data[_this.viewIndex];
		switch(step.type._hx_index) {
		case 0:
			this.currentBeginStep = js_Boot.__cast(step , game_simulation_BeginSimStep);
			this.initBeginStepHandling();
			break;
		case 1:
			this.currentDropStep = js_Boot.__cast(step , game_simulation_DropSimStep);
			this.initDropStepHandling();
			break;
		case 2:
			this.currentPopStep = js_Boot.__cast(step , game_simulation_PopSimStep);
			this.initPopStepHandling();
			break;
		case 3:
			this.currentEndStep = js_Boot.__cast(step , game_simulation_EndSimStep);
			this.initEndStepHandling();
			break;
		}
	}
	,initBeginStepHandling: function() {
		this.nextStep();
	}
	,handleBeginStep: function() {
	}
	,initDropStepHandling: function() {
		var _this = this.field;
		_this.customForEach(0,_this.totalRows,function(gelo,_,_1) {
			if(gelo.state == game_gelos_FieldGeloState.IDLE) {
				gelo.startDropping();
			}
		});
		this.firstDropFrame = true;
		this.state = game_boardstates__$StandardBoardState_InnerState.SIM_STEP(game_simulation_SimulationStepType.DROP);
	}
	,handleDropStep: function() {
		if(this.field.updateFall(this.field.totalRows - 1,0)) {
			if(utils_ValueBox.toValue(this.animations) == game_rules_AnimationsType.TSU) {
				this.field.setSpriteVariations();
			}
			this.nextStep();
			this.afterDrop();
		}
		if(this.firstDropFrame) {
			this.field.setSpriteVariations();
			this.firstDropFrame = false;
		}
	}
	,initPopStepHandling: function() {
		try {
			var _g = 0;
			var _g1 = this.currentPopStep.popInfo.clears.data;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.field.get(c.x,c.y).startPopping(game_gelos_GeloPopType.TSU);
			}
		} catch( _g ) {
			this.initPopPauseState();
			return;
		}
		this.state = game_boardstates__$StandardBoardState_InnerState.SIM_STEP(game_simulation_SimulationStepType.POP);
	}
	,handlePopStep: function() {
		var clears = this.currentPopStep.popInfo.clears;
		var _g = 0;
		var _g1 = clears.data;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this.field.get(c.x,c.y).state == game_gelos_FieldGeloState.POPPING) {
				return;
			}
		}
		var _g = 0;
		var _g1 = clears.data;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.field.clear(c.x,c.y);
		}
		this.initPopPauseState();
		this.afterPop();
	}
	,initPopPauseState: function() {
		this.popPauseT = 0;
		var absPos = this.geometries.absolutePosition;
		var popInfo = this.currentPopStep.popInfo;
		var beginnerScreenCoords = [];
		var _g = 0;
		var _g1 = popInfo.beginners.data;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var screenCoords = this.field.cellToScreen(b.x,b.y);
			beginnerScreenCoords.push(new game_gelos_ScreenGeloPoint(b.color,screenCoords.x,screenCoords.y));
		}
		var firstPop = beginnerScreenCoords[0];
		this.chainCounter.startAnimation(this.currentPopStep.chain,new utils_Point(firstPop.x,firstPop.y),this.currentPopStep.linkInfo.isPowerful);
		var _g = 0;
		var _g1 = popInfo.clears.data;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(game_gelos_GeloColor.isGarbage(c.color)) {
				continue;
			}
			var screenCoords = this.field.cellToScreen(c.x,c.y);
			var absCoords = absPos.add(screenCoords);
			var _g2 = 0;
			while(_g2 < 8) {
				var i = _g2++;
				var tmp = this.particleManager;
				var _g3 = absCoords.x + 32 * this.rng.data.GetFloatIn(-1,1);
				var _g4 = absCoords.y + 32 * this.rng.data.GetFloatIn(-1,1);
				var _g5 = (i % 2 == 0 ? -8 : 8) * this.rng.data.GetFloatIn(0.5,1.5);
				var _g6 = -10 * this.rng.data.GetFloatIn(0.5,1.5);
				var _g7 = 0.75 * this.rng.data.GetFloatIn(0.5,1.5);
				var _g8 = (30 + i * 6) * this.rng.data.GetFloatIn(0.5,1.5) | 0;
				tmp.add(game_particles_ParticleLayer.FRONT,game_particles_GeloPopParticle.create(new game_particles_GeloPopParticleOptions(_g5,_g7,this.prefsSettings.primaryColors.h[c.color],_g8,_g3,_g4,_g6)));
			}
		}
		this.allClearManager.stopAnimation();
		var linkInfo = this.currentPopStep.linkInfo;
		this.scoreManager.addScoreFromLink(linkInfo);
		this.garbageManager.sendGarbage(linkInfo.garbage,beginnerScreenCoords);
		this.scoreManager.resetDropBonus();
		this.state = game_boardstates__$StandardBoardState_InnerState.POP_PAUSE;
	}
	,updatePopPauseState: function() {
		if(this.popPauseT < this.popPauseMaxT) {
			this.popPauseT++;
			return;
		}
		this.nextStep();
	}
	,initEndStepHandling: function() {
		this.beforeEnd();
		this.garbageManager.confirmGarbage(this.currentEndStep.totalGarbage);
		if(this.currentEndStep.endsInAllClear) {
			this.allClearManager.startAnimation();
		}
		if(this.currentEndStep.isLastLinkPowerful) {
			var chain = this.currentEndStep.chain;
			if(chain == 1) {
				this.scoreManager.displayActionText("THORN",-65281);
			}
			if(chain == 2) {
				this.scoreManager.displayActionText("HELLFIRE",kha_Color._new(-59580));
			}
			if(chain == 3) {
				this.scoreManager.displayActionText("KILLER ICE",-16711681);
			}
		}
		var _this = this.chainSim;
		this.field.copyFrom(_this.steps.data[_this.viewIndex].fieldSnapshot);
		if(this.field.get(this.field.centerColumnIndex,this.field.outerRows) != null) {
			this.onLose();
		} else {
			this.state = game_boardstates__$StandardBoardState_InnerState.SIM_STEP(game_simulation_SimulationStepType.END);
		}
	}
	,handleEndStep: function() {
		var amount = this.garbageManager.get_droppableGarbage();
		if(amount == 0 || !this.canDropGarbage) {
			this.initSpawningState();
			this.afterEnd();
			return;
		}
		var columns = this.field.columns;
		var accels = this.field.garbageAccelerations;
		var accelCenterIndex = Math.min(accels.length - 1,Math.max(accels.length / 2,0)) | 0;
		var fallInBulk = amount >= columns;
		var columnPositions = [];
		var _g = 0;
		var _g1 = amount;
		while(_g < _g1) {
			var i = _g++;
			if(i % columns == 0) {
				columnPositions = this.field.garbageColumns.slice();
			}
			var columnIndex;
			if(utils_ValueBox.toValue(this.randomizeGarbage)) {
				columnIndex = this.rng.data.GetUpTo(columnPositions.length - 1);
			} else {
				columnIndex = 0;
			}
			var row = this.field.garbageRows - 1 - (i / columns | 0);
			var column = columnPositions[columnIndex];
			var accel = accels[fallInBulk ? column : accelCenterIndex];
			this.field.newGarbage(column,row,6).startGarbageFalling(accel);
			HxOverrides.remove(columnPositions,column);
		}
		this.garbageManager.dropGarbage(amount);
		this.canDropGarbage = false;
		this.beginChainSimulation();
		this.afterEnd();
	}
	,updateColorChange: function() {
		if(this.borderColorT == 15) {
			return;
		}
		this.borderColor = utils_Utils.rgbLerp(this.beginBorderColor,this.targetBorderColor,this.borderColorT / 15);
		this.borderColorT++;
	}
	,onLose: function() {
	}
	,changeBorderColor: function(target) {
		this.beginBorderColor = this.borderColor;
		this.targetBorderColor = target;
		this.borderColorT = 0;
	}
	,addDesyncInfo: function(ctx) {
		this.field.addDesyncInfo(ctx);
		this.garbageManager.addDesyncInfo(ctx);
	}
	,update: function() {
		this.currentActions = this.actionBuffer.update();
		this.geloGroup.update();
		this.field.update();
		this.preview.update();
		var _g = this.state;
		switch(_g._hx_index) {
		case 0:
			this.updateSpawningState();
			break;
		case 1:
			this.updateControllingState();
			break;
		case 2:
			var type = _g.type;
			switch(type._hx_index) {
			case 0:
				this.handleBeginStep();
				break;
			case 1:
				this.handleDropStep();
				break;
			case 2:
				this.handlePopStep();
				break;
			case 3:
				this.handleEndStep();
				break;
			}
			break;
		case 3:
			this.updatePopPauseState();
			break;
		}
		this.allClearManager.update();
		this.scoreManager.update();
		this.chainCounter.update();
		this.garbageManager.update();
		this.updateColorChange();
	}
	,renderScissored: function(g,g4,alpha) {
		g.set_color(this.prefsSettings.boardBackground);
		g.fillRect(0,0,game_geometries_BoardGeometries.WIDTH,game_geometries_BoardGeometries.HEIGHT);
		g.set_color(-1);
		this.allClearManager.renderBackground(g);
		this.field.render(g,g4,alpha);
		this.allClearManager.renderForeground(g);
		this.geloGroup.render(g,g4,alpha);
	}
	,renderFloating: function(g,g4,alpha) {
		g.set_color(this.borderColor);
		g.drawImage(kha_Assets.images.Border,-12,-12);
		g.set_color(-1);
		this.scoreManager.render(g,this.geometries.scoreDisplayY,alpha);
		this.chainCounter.render(g,alpha);
		var previewPos = this.geometries.preview;
		ScaleManager.transformedScissor(g,previewPos.x - 32,previewPos.y - 32,64,288.);
		this.preview.render(g,previewPos.x,previewPos.y);
		g.disableScissor();
		var garbageTrayPos = this.geometries.garbageTray;
		this.garbageManager.render(g,garbageTrayPos.x,garbageTrayPos.y,alpha);
	}
	,copyFrom: function(other) {
		this.popPauseMaxT = other.popPauseMaxT;
		this.currentActions = other.currentActions;
		this.popPauseT = other.popPauseT;
		this.firstDropFrame = other.firstDropFrame;
		this.canRotateLeft = other.canRotateLeft;
		this.canRotateRight = other.canRotateRight;
		this.borderColor = other.borderColor;
		this.beginBorderColor = other.beginBorderColor;
		this.targetBorderColor = other.targetBorderColor;
		this.borderColorT = other.borderColorT;
		this.currentBeginStep = other.currentBeginStep;
		this.currentDropStep = other.currentDropStep;
		this.currentPopStep = other.currentPopStep;
		this.currentEndStep = other.currentEndStep;
		this.canDropGarbage = other.canDropGarbage;
		this.state = other.state;
		return this;
	}
	,__class__: game_boardstates_StandardBoardState
};
var game_boardstates_EndlessBoardState = function(opts) {
	game_boardstates_StandardBoardState.call(this,opts);
	this.clearOnXModeContainer = opts.clearOnXModeContainer;
	this.randomizer = opts.randomizer;
	this.marginManager = opts.marginManager;
};
$hxClasses["game.boardstates.EndlessBoardState"] = game_boardstates_EndlessBoardState;
game_boardstates_EndlessBoardState.__name__ = "game.boardstates.EndlessBoardState";
game_boardstates_EndlessBoardState.__super__ = game_boardstates_StandardBoardState;
game_boardstates_EndlessBoardState.prototype = $extend(game_boardstates_StandardBoardState.prototype,{
	clearOnXModeContainer: null
	,randomizer: null
	,marginManager: null
	,onLose: function() {
		this.eraseField();
		this.garbageManager.clear();
		this.marginManager.reset();
		this.allClearManager.stopAnimation();
		switch(this.clearOnXModeContainer.clearOnXMode) {
		case "CLEAR":
			break;
		case "NEW":
			this.regenerateQueue();
			break;
		case "RESTART":
			this.queue.setIndex(0);
			break;
		}
		this.initSimStepState();
	}
	,eraseField: function() {
		var _gthis = this;
		var _this = this.field;
		_this.customForEach(0,_this.totalRows,function(_,x,y) {
			_gthis.field.clear(x,y);
		});
		this.chainSim.modify(this.field.copy());
		this.chainSim.viewLast();
	}
	,regenerateQueue: function() {
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
		var _this = this.queue;
		var groups = this.randomizer.createQueueData(game_Dropsets.CLASSICAL);
		var _g = 0;
		while(_g < groups.length) {
			var g = groups[_g];
			++_g;
			_this.groups.data.push(g);
		}
		_this.currentIndex = 0;
	}
	,copyFrom: function(other) {
		game_boardstates_StandardBoardState.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_boardstates_EndlessBoardState
});
var game_boardstates__$StandardBoardState_InnerState = $hxEnums["game.boardstates._StandardBoardState.InnerState"] = { __ename__:"game.boardstates._StandardBoardState.InnerState",__constructs__:null
	,SPAWNING: {_hx_name:"SPAWNING",_hx_index:0,__enum__:"game.boardstates._StandardBoardState.InnerState",toString:$estr}
	,CONTROLLING: {_hx_name:"CONTROLLING",_hx_index:1,__enum__:"game.boardstates._StandardBoardState.InnerState",toString:$estr}
	,SIM_STEP: ($_=function(type) { return {_hx_index:2,type:type,__enum__:"game.boardstates._StandardBoardState.InnerState",toString:$estr}; },$_._hx_name="SIM_STEP",$_.__params__ = ["type"],$_)
	,POP_PAUSE: {_hx_name:"POP_PAUSE",_hx_index:3,__enum__:"game.boardstates._StandardBoardState.InnerState",toString:$estr}
};
game_boardstates__$StandardBoardState_InnerState.__constructs__ = [game_boardstates__$StandardBoardState_InnerState.SPAWNING,game_boardstates__$StandardBoardState_InnerState.CONTROLLING,game_boardstates__$StandardBoardState_InnerState.SIM_STEP,game_boardstates__$StandardBoardState_InnerState.POP_PAUSE];
var game_boardstates_TrainingBoardStateOptions = function(trainingSettings,infoState,autoAttackManager,clearOnXModeContainer,randomizer,marginManager,animations,randomizeGarbage,prefsSettings,rng,geometries,particleManager,geloGroup,queue,preview,allClearManager,scoreManager,actionBuffer,chainCounter,field,chainSim,garbageManager) {
	game_boardstates_EndlessBoardStateOptions.call(this,clearOnXModeContainer,randomizer,marginManager,animations,randomizeGarbage,prefsSettings,rng,geometries,particleManager,geloGroup,queue,preview,allClearManager,scoreManager,actionBuffer,chainCounter,field,chainSim,garbageManager);
	this.trainingSettings = trainingSettings;
	this.infoState = infoState;
	this.autoAttackManager = autoAttackManager;
};
$hxClasses["game.boardstates.TrainingBoardStateOptions"] = game_boardstates_TrainingBoardStateOptions;
game_boardstates_TrainingBoardStateOptions.__name__ = "game.boardstates.TrainingBoardStateOptions";
game_boardstates_TrainingBoardStateOptions.__super__ = game_boardstates_EndlessBoardStateOptions;
game_boardstates_TrainingBoardStateOptions.prototype = $extend(game_boardstates_EndlessBoardStateOptions.prototype,{
	trainingSettings: null
	,infoState: null
	,autoAttackManager: null
	,__class__: game_boardstates_TrainingBoardStateOptions
});
var game_boardstates_TrainingBoardState = function(opts) {
	game_boardstates_EndlessBoardState.call(this,opts);
	this.trainingSettings = opts.trainingSettings;
	this.infoState = opts.infoState;
	this.autoAttackManager = opts.autoAttackManager;
};
$hxClasses["game.boardstates.TrainingBoardState"] = game_boardstates_TrainingBoardState;
game_boardstates_TrainingBoardState.__name__ = "game.boardstates.TrainingBoardState";
game_boardstates_TrainingBoardState.__super__ = game_boardstates_EndlessBoardState;
game_boardstates_TrainingBoardState.prototype = $extend(game_boardstates_EndlessBoardState.prototype,{
	trainingSettings: null
	,infoState: null
	,autoAttackManager: null
	,lockGroup: function() {
		game_boardstates_EndlessBoardState.prototype.lockGroup.call(this);
		this.infoState.loadChain();
		this.infoState.startSplitTimer();
		++this.infoState.groupCounter;
		this.infoState.shouldUpdatePPST = false;
	}
	,afterDrop: function() {
		this.infoState.stopSplitTimer();
	}
	,afterPop: function() {
		this.infoState.updateChain(this.currentPopStep);
	}
	,beforeEnd: function() {
		if(this.autoAttackManager.isPaused) {
			this.garbageManager.clear();
		}
	}
	,afterEnd: function() {
		this.infoState.saveSplitCategory();
		this.infoState.shouldUpdatePPST = true;
	}
	,onLose: function() {
		game_boardstates_EndlessBoardState.prototype.onLose.call(this);
		this.infoState.resetCurrentSplitStatistics();
		this.autoAttackManager.reset();
	}
	,regenerateQueue: function() {
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
		var data = this.randomizer.createQueueData(game_Dropsets.CLASSICAL);
		var _g = 0;
		var _g1 = this.trainingSettings.keepGroupCount;
		while(_g < _g1) {
			var i = _g++;
			data[i] = this.queue.get(i);
		}
		var _this = this.queue;
		var _g = 0;
		while(_g < data.length) {
			var g = data[_g];
			++_g;
			_this.groups.data.push(g);
		}
		_this.currentIndex = 0;
	}
	,getField: function() {
		return this.field;
	}
	,clearField: function() {
		this.eraseField();
		this.queue.currentIndex--;
		this.initSpawningState();
	}
	,resume: function() {
		var _this = this.chainSim;
		this.field.copyFrom(_this.steps.data[_this.viewIndex].fieldSnapshot);
		this.geloGroup.isVisible = false;
		this.geloGroup.isShadowVisible = false;
		this.queue.setIndex(this.chainSim.findBeginStep().groupIndex);
		this.initSimStepState();
	}
	,previousGroup: function() {
		if(this.chainSim.viewIndex < 3) {
			return;
		}
		this.chainSim.rewindToPreviousEndStep();
		this.resume();
	}
	,nextGroup: function() {
		this.chainSim.jumpToBeginStep();
		var _this = this.chainSim;
		this.field.copyFrom(_this.steps.data[_this.viewIndex].fieldSnapshot);
		this.geloGroup.isVisible = false;
		this.geloGroup.isShadowVisible = false;
		this.beginChainSimulation();
	}
	,copyFrom: function(other) {
		game_boardstates_EndlessBoardState.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_boardstates_TrainingBoardState
});
var game_boardstates_TrainingInfoBoardStateOptions = function(popCount,geometries,marginManager,linkBuilder,trainingSettings,chainAdvantageDisplay,afterCounterDisplay,garbageManager,prefsSettings,autoAttackManager,playerScoreManager,playerChainSim) {
	this.popCount = popCount;
	this.geometries = geometries;
	this.marginManager = marginManager;
	this.linkBuilder = linkBuilder;
	this.trainingSettings = trainingSettings;
	this.chainAdvantageDisplay = chainAdvantageDisplay;
	this.afterCounterDisplay = afterCounterDisplay;
	this.garbageManager = garbageManager;
	this.prefsSettings = prefsSettings;
	this.autoAttackManager = autoAttackManager;
	this.playerScoreManager = playerScoreManager;
	this.playerChainSim = playerChainSim;
};
$hxClasses["game.boardstates.TrainingInfoBoardStateOptions"] = game_boardstates_TrainingInfoBoardStateOptions;
game_boardstates_TrainingInfoBoardStateOptions.__name__ = "game.boardstates.TrainingInfoBoardStateOptions";
game_boardstates_TrainingInfoBoardStateOptions.prototype = {
	popCount: null
	,geometries: null
	,marginManager: null
	,linkBuilder: null
	,trainingSettings: null
	,chainAdvantageDisplay: null
	,afterCounterDisplay: null
	,garbageManager: null
	,prefsSettings: null
	,autoAttackManager: null
	,playerScoreManager: null
	,playerChainSim: null
	,__class__: game_boardstates_TrainingInfoBoardStateOptions
};
var game_boardstates_TrainingInfoBoardState = function(opts) {
	this.popCount = opts.popCount;
	this.geometries = opts.geometries;
	this.marginManager = opts.marginManager;
	this.linkBuilder = opts.linkBuilder;
	this.trainingSettings = opts.trainingSettings;
	this.chainAdvantageDisplay = opts.chainAdvantageDisplay;
	this.afterCounterDisplay = opts.afterCounterDisplay;
	this.garbageManager = opts.garbageManager;
	this.prefsSettings = opts.prefsSettings;
	this.autoAttackManager = opts.autoAttackManager;
	this.playerScoreManager = opts.playerScoreManager;
	this.playerChainSim = opts.playerChainSim;
	this.font = kha_Assets.fonts.Pixellari;
	this.titleFontHeight = this.font.height(40);
	this.cardFontHeight = this.font.height(32);
	this.splitPercentageWidth = this.font.width(40,"000% ");
	this.linkStandardDamages = new game_copying_ConstantCopyableArray([]);
	this.chain = 0;
	this.chainLength = 0;
	this.linkDamage = 0;
	this.linkRemainder = 0;
	this.chainDamage = 0;
	this.totalDamage = 0;
	this.chainAdvantage = 0;
	this.toCounterChain = 1;
	this.counterDifference = 0;
	this.groupCounter = 0;
	this.ppsT = 0;
	this.splitT = 0;
	this.resetCurrentSplitStatistics();
	this.overallGreatSplits = 0;
	this.overallOkaySplits = 0;
	this.overallSlowSplits = 0;
	this.overallSplitCounter = 0;
	this.updateSplitT = false;
	this.showSteps = false;
	this.viewMin = 0;
	this.shouldUpdatePPST = true;
};
$hxClasses["game.boardstates.TrainingInfoBoardState"] = game_boardstates_TrainingInfoBoardState;
game_boardstates_TrainingInfoBoardState.__name__ = "game.boardstates.TrainingInfoBoardState";
game_boardstates_TrainingInfoBoardState.__interfaces__ = [game_boardstates_IBoardState];
game_boardstates_TrainingInfoBoardState.prototype = {
	popCount: null
	,geometries: null
	,marginManager: null
	,linkBuilder: null
	,trainingSettings: null
	,chainAdvantageDisplay: null
	,afterCounterDisplay: null
	,garbageManager: null
	,prefsSettings: null
	,autoAttackManager: null
	,playerScoreManager: null
	,playerChainSim: null
	,font: null
	,titleFontHeight: null
	,cardFontHeight: null
	,splitPercentageWidth: null
	,linkStandardDamages: null
	,chain: null
	,chainLength: null
	,linkDamage: null
	,linkRemainder: null
	,chainDamage: null
	,totalDamage: null
	,chainAdvantage: null
	,toCounterChain: null
	,counterDifference: null
	,groupCounter: null
	,ppsT: null
	,splitT: null
	,currentGreatSplits: null
	,currentOkaySplits: null
	,currentSlowSplits: null
	,currentSplitCounter: null
	,overallGreatSplits: null
	,overallOkaySplits: null
	,overallSlowSplits: null
	,overallSplitCounter: null
	,updateSplitT: null
	,showSteps: null
	,viewMin: null
	,shouldUpdatePPST: null
	,gameRow: function(index) {
		return this.titleFontHeight * index;
	}
	,getSplitCategory: function() {
		if(this.splitT <= 14) {
			return game_boardstates_TrainingInfoSplitCategory.GREAT;
		}
		if(this.splitT <= 42) {
			return game_boardstates_TrainingInfoSplitCategory.OKAY;
		}
		return game_boardstates_TrainingInfoSplitCategory.SLOW;
	}
	,renderSplitPercentage: function(g,x,y,color,value) {
		utils_Utils.shadowDrawString(g,3,-16777216,color,StringTools.lpad("" + value + "% "," ",5),x,y);
	}
	,renderSplitStatistics: function(g,title,y,splitCounter,great,okay,slow) {
		var titleWidth = this.font.width(40,title);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,title,-64,y);
		if(splitCounter == 0) {
			this.renderSplitPercentage(g,-64 + titleWidth,y,-16711936,0);
			this.renderSplitPercentage(g,-64 + titleWidth + this.splitPercentageWidth,y,-256,0);
			this.renderSplitPercentage(g,-64 + titleWidth + this.splitPercentageWidth * 2,y,-65536,0);
			return;
		}
		this.renderSplitPercentage(g,-64 + titleWidth,y,-16711936,Math.round(great / splitCounter * 100));
		this.renderSplitPercentage(g,-64 + titleWidth + this.splitPercentageWidth,y,-256,Math.round(okay / splitCounter * 100));
		this.renderSplitPercentage(g,-64 + titleWidth + this.splitPercentageWidth * 2,y,-65536,Math.round(slow / splitCounter * 100));
		g.set_color(-1);
	}
	,renderGameInfo: function(g,alpha) {
		g.set_fontSize(40);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Chain: " + this.chain + " / " + this.chainLength,-64,this.gameRow(-3));
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Remainder: " + this.linkRemainder,-64,this.gameRow(0));
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Damage: " + this.chainDamage + " / " + this.totalDamage,-64,this.gameRow(1));
		var multiplier = Math.pow(10,2);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Speed (PPS): " + Math.round(this.groupCounter / (this.ppsT / 60) * multiplier) / multiplier,-64,this.gameRow(3));
		this.renderSplitStatistics(g,"Splits (ALL):  ",this.gameRow(4),this.overallSplitCounter,this.overallGreatSplits,this.overallOkaySplits,this.overallSlowSplits);
		this.renderSplitStatistics(g,"Splits (NOW): ",this.gameRow(5),this.currentSplitCounter,this.currentGreatSplits,this.currentOkaySplits,this.currentSlowSplits);
		var splitColor;
		switch(this.getSplitCategory()._hx_index) {
		case 0:
			splitColor = g.set_color(-16711936);
			break;
		case 1:
			splitColor = g.set_color(-256);
			break;
		case 2:
			splitColor = g.set_color(-65536);
			break;
		}
		utils_Utils.shadowDrawString(g,3,-16777216,splitColor,StringTools.lpad("" + this.splitT," ",3),-64,this.gameRow(6));
		g.fillRect(0,this.gameRow(6),this.splitT * 4,32);
		g.set_color(-1);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Chain Standard Advantage: " + this.chainAdvantage,-64,this.gameRow(9));
		this.chainAdvantageDisplay.render(g,-64,this.gameRow(10),alpha);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"To Counter: " + this.toCounterChain + " (" + this.counterDifference + " remains)",-64,this.gameRow(12));
		this.afterCounterDisplay.render(g,-64,this.gameRow(13),alpha);
		var targetPoints = this.marginManager.targetPoints;
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Target Pts (Margin T): " + targetPoints + " (" + (this.marginManager.marginTime / 60 | 0) + ")",-64,this.gameRow(15));
		var dropBonus = this.playerScoreManager.dropBonus | 0;
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"Drop bonus: " + dropBonus + " (" + (dropBonus / targetPoints | 0) + " garbo)",-64,this.gameRow(16));
		if(!this.autoAttackManager.isPaused) {
			var autoAttackString;
			switch(this.autoAttackManager.state) {
			case 0:
				autoAttackString = "Auto-Attack WAITING: " + (this.autoAttackManager.timer / 60 + 1 | 0);
				break;
			case 1:
				autoAttackString = "Auto-Attack SENDING: " + this.autoAttackManager.chain + "-CHAIN!";
				break;
			}
			utils_Utils.shadowDrawString(g,3,-16777216,-1,autoAttackString,-64,this.gameRow(18));
		} else {
			utils_Utils.shadowDrawString(g,3,-16777216,-1,"Auto-Attack DISABLED",-64,this.gameRow(18));
		}
		this.autoAttackManager.render(g,alpha);
	}
	,renderEditInfo: function(g,alpha) {
		var steps = this.playerChainSim.steps;
		var viewIndex = this.playerChainSim.viewIndex;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var stepIndex = this.viewMin + i;
			var localIndex = viewIndex - this.viewMin;
			var step = steps.data[stepIndex];
			if(step == null) {
				break;
			}
			var offset = i > localIndex ? 448 : 0;
			var y = 72 * i + offset;
			if(i == localIndex) {
				step.renderCard(g,y,alpha);
			} else {
				step.renderLabel(g,y,alpha);
			}
		}
		g.set_fontSize(32);
		utils_Utils.shadowDrawString(g,3,-16777216,-1,"" + (viewIndex + 1) + " / " + steps.data.length,0,game_geometries_BoardGeometries.HEIGHT);
	}
	,resetCurrentSplitStatistics: function() {
		this.currentGreatSplits = 0;
		this.currentOkaySplits = 0;
		this.currentSlowSplits = 0;
		this.currentSplitCounter = 0;
		this.stopSplitTimer();
	}
	,incrementGroupCounter: function() {
		++this.groupCounter;
	}
	,startSplitTimer: function() {
		this.splitT = 0;
		this.updateSplitT = true;
	}
	,stopSplitTimer: function() {
		this.updateSplitT = false;
	}
	,saveSplitCategory: function() {
		switch(this.getSplitCategory()._hx_index) {
		case 0:
			++this.currentGreatSplits;
			++this.overallGreatSplits;
			break;
		case 1:
			++this.currentOkaySplits;
			++this.overallOkaySplits;
			break;
		case 2:
			++this.currentSlowSplits;
			++this.overallSlowSplits;
			break;
		}
		++this.currentSplitCounter;
		++this.overallSplitCounter;
	}
	,loadChain: function() {
		var latestChain = this.playerChainSim.latestChainCounter;
		if(latestChain == 0) {
			return;
		}
		if(this.trainingSettings.autoClear) {
			this.garbageManager.clear();
		}
		this.chain = 0;
		this.chainLength = latestChain;
		this.linkDamage = 0;
		this.linkStandardDamages.data.length = 0;
		this.chainDamage = 0;
		this.totalDamage = this.playerChainSim.latestGarbageCounter;
		this.chainAdvantage = 0;
		this.toCounterChain = 0;
		var garbageCounter = 0;
		var remainder = 0.0;
		while(true) {
			var link = this.linkBuilder;
			var _g = ++this.toCounterChain;
			var _g1 = new haxe_ds_IntMap();
			var value = utils_ValueBox.toValue(this.popCount);
			_g1.h[0] = value;
			_g1.h[1] = 0;
			_g1.h[2] = 0;
			_g1.h[3] = 0;
			_g1.h[4] = 0;
			var link1 = link.build(new game_simulation_LinkInfoBuildParameters(_g1,_g,0,remainder,false,garbageCounter));
			garbageCounter = link1.accumulatedGarbage;
			remainder = link1.garbageRemainder;
			this.linkStandardDamages.data.push(link1.garbage);
			if(this.toCounterChain == this.chainLength) {
				this.chainAdvantage = this.totalDamage - garbageCounter;
			}
			if(!(garbageCounter < this.totalDamage)) {
				break;
			}
		}
		this.counterDifference = garbageCounter - this.totalDamage;
		this.chainAdvantageDisplay.startAnimation(this.chainAdvantage);
		this.afterCounterDisplay.startAnimation(this.counterDifference);
	}
	,updateChain: function(step) {
		this.chain = step.chain;
		var linkInfo = step.linkInfo;
		this.linkDamage = linkInfo.garbage;
		var multiplier = Math.pow(10,2);
		this.linkRemainder = Math.round(linkInfo.garbageRemainder * multiplier) / multiplier;
		this.chainDamage = linkInfo.accumulatedGarbage;
	}
	,showChainSteps: function() {
		this.viewMin = this.playerChainSim.viewIndex;
		this.showSteps = true;
	}
	,hideChainSteps: function() {
		this.loadChain();
		this.showSteps = false;
	}
	,onViewChainStep: function() {
		if(this.playerChainSim.viewIndex > this.viewMin + 3) {
			this.viewMin++;
		}
		if(this.playerChainSim.viewIndex < this.viewMin) {
			this.viewMin--;
		}
	}
	,addDesyncInfo: function(ctx) {
	}
	,update: function() {
		if(this.updateSplitT) {
			this.splitT++;
		}
		if(this.shouldUpdatePPST) {
			this.ppsT++;
		}
		this.autoAttackManager.update();
		this.garbageManager.update();
	}
	,renderScissored: function(g,g4,alpha) {
	}
	,renderFloating: function(g,g4,alpha) {
		g.set_font(this.font);
		if(this.showSteps) {
			this.renderEditInfo(g,alpha);
		} else {
			this.renderGameInfo(g,alpha);
		}
		var garbageTrayPos = this.geometries.garbageTray;
		this.garbageManager.render(g,garbageTrayPos.x,garbageTrayPos.y,alpha);
	}
	,copyFrom: function(other) {
		this.linkStandardDamages.copyFrom(other.linkStandardDamages);
		this.chain = other.chain;
		this.chainLength = other.chainLength;
		this.linkDamage = other.linkDamage;
		this.linkRemainder = other.linkRemainder;
		this.chainDamage = other.chainDamage;
		this.totalDamage = other.totalDamage;
		this.chainAdvantage = other.chainAdvantage;
		this.toCounterChain = other.toCounterChain;
		this.counterDifference = other.counterDifference;
		this.groupCounter = other.groupCounter;
		this.ppsT = other.ppsT;
		this.splitT = other.splitT;
		this.currentGreatSplits = other.currentGreatSplits;
		this.currentOkaySplits = other.currentOkaySplits;
		this.currentSlowSplits = other.currentSlowSplits;
		this.currentSplitCounter = other.currentSplitCounter;
		this.overallGreatSplits = other.overallGreatSplits;
		this.overallOkaySplits = other.overallOkaySplits;
		this.overallSlowSplits = other.overallSlowSplits;
		this.overallSplitCounter = other.overallSplitCounter;
		this.updateSplitT = other.updateSplitT;
		this.showSteps = other.showSteps;
		this.viewMin = other.viewMin;
		this.shouldUpdatePPST = other.shouldUpdatePPST;
		return this;
	}
	,__class__: game_boardstates_TrainingInfoBoardState
};
var game_boardstates_TrainingInfoSplitCategory = $hxEnums["game.boardstates.TrainingInfoSplitCategory"] = { __ename__:"game.boardstates.TrainingInfoSplitCategory",__constructs__:null
	,GREAT: {_hx_name:"GREAT",_hx_index:0,__enum__:"game.boardstates.TrainingInfoSplitCategory",toString:$estr}
	,OKAY: {_hx_name:"OKAY",_hx_index:1,__enum__:"game.boardstates.TrainingInfoSplitCategory",toString:$estr}
	,SLOW: {_hx_name:"SLOW",_hx_index:2,__enum__:"game.boardstates.TrainingInfoSplitCategory",toString:$estr}
};
game_boardstates_TrainingInfoSplitCategory.__constructs__ = [game_boardstates_TrainingInfoSplitCategory.GREAT,game_boardstates_TrainingInfoSplitCategory.OKAY,game_boardstates_TrainingInfoSplitCategory.SLOW];
var game_copying_ConstantCopyableArray = function(data) {
	this.data = data;
};
$hxClasses["game.copying.ConstantCopyableArray"] = game_copying_ConstantCopyableArray;
game_copying_ConstantCopyableArray.__name__ = "game.copying.ConstantCopyableArray";
game_copying_ConstantCopyableArray.__interfaces__ = [game_copying_ICopyFrom];
game_copying_ConstantCopyableArray.prototype = {
	data: null
	,copyFrom: function(other) {
		var o = other;
		this.data.length = 0;
		var _g = 0;
		var _g1 = o.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			this.data.push(d);
		}
		return this;
	}
	,copy: function() {
		return new game_copying_ConstantCopyableArray(this.data.slice());
	}
	,__class__: game_copying_ConstantCopyableArray
};
var game_copying_ConstantCopyableMap = function(data) {
	this.data = data;
};
$hxClasses["game.copying.ConstantCopyableMap"] = game_copying_ConstantCopyableMap;
game_copying_ConstantCopyableMap.__name__ = "game.copying.ConstantCopyableMap";
game_copying_ConstantCopyableMap.__interfaces__ = [game_copying_ICopyFrom];
game_copying_ConstantCopyableMap.prototype = {
	data: null
	,copyFrom: function(other) {
		var o = other;
		this.data.clear();
		var _g = o.data.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var k = _g1.key;
			var v = _g1.value;
			this.data.set(k,v);
		}
		return this;
	}
	,copy: function() {
		return new game_copying_ConstantCopyableMap(this.data.copy());
	}
	,__class__: game_copying_ConstantCopyableMap
};
var game_copying_CopyableArray = function(data) {
	this.data = data;
};
$hxClasses["game.copying.CopyableArray"] = game_copying_CopyableArray;
game_copying_CopyableArray.__name__ = "game.copying.CopyableArray";
game_copying_CopyableArray.__interfaces__ = [game_copying_ICopyFrom];
game_copying_CopyableArray.prototype = {
	data: null
	,copyFrom: function(other) {
		var o = other;
		this.data.length = 0;
		var _g = 0;
		var _g1 = o.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			this.data.push(d == null ? null : d.copy());
		}
		return this;
	}
	,__class__: game_copying_CopyableArray
};
var game_copying_CopyableMatrix = function(height) {
	var _g = [];
	var _g1 = 0;
	var _g2 = height;
	while(_g1 < _g2) {
		var _ = _g1++;
		_g.push([]);
	}
	this.data = _g;
};
$hxClasses["game.copying.CopyableMatrix"] = game_copying_CopyableMatrix;
game_copying_CopyableMatrix.__name__ = "game.copying.CopyableMatrix";
game_copying_CopyableMatrix.__interfaces__ = [game_copying_ICopyFrom];
game_copying_CopyableMatrix.prototype = {
	data: null
	,copyFrom: function(other) {
		var o = other;
		this.data.length = 0;
		var _g = 0;
		var _g1 = o.data.length;
		while(_g < _g1) {
			var y = _g++;
			this.data[y] = [];
			var _g2 = 0;
			var _g3 = o.data[y].length;
			while(_g2 < _g3) {
				var x = _g2++;
				var obj = o.data[y][x];
				if(obj == null) {
					this.data[y][x] = null;
				} else {
					this.data[y][x] = obj.copy();
				}
			}
		}
		return this;
	}
	,copy: function() {
		return new game_copying_CopyableMatrix(0).copyFrom(this);
	}
	,__class__: game_copying_CopyableMatrix
};
var game_copying_CopyableRNG = function(seed) {
	this.data = new kha_math_Random(seed);
};
$hxClasses["game.copying.CopyableRNG"] = game_copying_CopyableRNG;
game_copying_CopyableRNG.__name__ = "game.copying.CopyableRNG";
game_copying_CopyableRNG.__interfaces__ = [game_copying_ICopyFrom];
game_copying_CopyableRNG.prototype = {
	data: null
	,copyFrom: function(other) {
		var odata = other.data;
		this.data.a = odata.a;
		this.data.b = odata.b;
		this.data.c = odata.c;
		this.data.d = odata.d;
	}
	,__class__: game_copying_CopyableRNG
};
var game_copying_ICopy = function() { };
$hxClasses["game.copying.ICopy"] = game_copying_ICopy;
game_copying_ICopy.__name__ = "game.copying.ICopy";
game_copying_ICopy.__isInterface__ = true;
game_copying_ICopy.__interfaces__ = [game_copying_ICopyFrom];
game_copying_ICopy.prototype = {
	copy: null
	,copyFrom: null
	,__class__: game_copying_ICopy
};
var game_fields_AllClearFieldMarker = function() { };
$hxClasses["game.fields.AllClearFieldMarker"] = game_fields_AllClearFieldMarker;
game_fields_AllClearFieldMarker.__name__ = "game.fields.AllClearFieldMarker";
game_fields_AllClearFieldMarker.create = function(prefsSettings,defaultColor) {
	return new game_fields_MultiColorFieldMarker(new game_fields_MultiColorFieldMarkerOptions(prefsSettings,new utils_Point(834,455),defaultColor,2));
};
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = "hxbit.Serializable";
hxbit_Serializable.__isInterface__ = true;
hxbit_Serializable.prototype = {
	__uid: null
	,getCLID: null
	,serialize: null
	,unserializeInit: null
	,unserialize: null
	,getSerializeSchema: null
	,__class__: hxbit_Serializable
};
var game_fields_IFieldMarker = function() { };
$hxClasses["game.fields.IFieldMarker"] = game_fields_IFieldMarker;
game_fields_IFieldMarker.__name__ = "game.fields.IFieldMarker";
game_fields_IFieldMarker.__isInterface__ = true;
game_fields_IFieldMarker.__interfaces__ = [hxbit_Serializable,game_copying_ICopy];
game_fields_IFieldMarker.prototype = {
	type: null
	,onSet: null
	,render: null
	,copyFrom: null
	,__class__: game_fields_IFieldMarker
};
var hxbit_Serializer = function() {
	this.enumConvert = new haxe_ds_StringMap();
	this.usedEnums = new haxe_ds_StringMap();
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = "hxbit.Serializer";
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw haxe_Exception.thrown("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g = 0;
	var _g1 = name.length;
	while(_g < _g1) {
		var i = _g++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g = 0;
	var _g1 = cl.length;
	while(_g < _g1) {
		var i = _g++;
		var c = cl[i];
		while(true) {
			c = c.__super__;
			if(c == null) {
				break;
			}
			var idx = cl.indexOf(c);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = hxbit_Serializer.CLASSES.length;
	while(_g1 < _g2) {
		var i = _g1++;
		if(subClasses[i].length == 0 && !isSub[i]) {
			_g.push(0);
		} else {
			var name = cl[i].__name__;
			var v = 1;
			var _g3 = 0;
			var _g4 = name.length;
			while(_g3 < _g4) {
				var i1 = _g3++;
				v = v * 223 + name.charCodeAt(i1) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			_g.push(v);
		}
	}
	hxbit_Serializer.CLIDS = _g;
	hxbit_Serializer.CL_BYID = [];
	var _g = 0;
	var _g1 = hxbit_Serializer.CLIDS.length;
	while(_g < _g1) {
		var i = _g++;
		var cid = hxbit_Serializer.CLIDS[i];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			var c = hxbit_Serializer.CL_BYID[cid];
			throw haxe_Exception.thrown("Conflicting CLID between " + c.__name__ + " and " + cl[i].__name__);
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i];
	}
};
hxbit_Serializer.getSignature = function() {
	if(hxbit_Serializer.__SIGN != null) {
		return hxbit_Serializer.__SIGN;
	}
	var s = new hxbit_Serializer();
	s.begin();
	s.addInt(hxbit_Serializer.CLASSES.length);
	var _g = 0;
	var _g1 = hxbit_Serializer.CLASSES.length;
	while(_g < _g1) {
		var i = _g++;
		s.addInt(hxbit_Serializer.CLIDS[i]);
		s.addInt32(Object.create(hxbit_Serializer.CLASSES[i].prototype).getSerializeSchema().get_checkSum());
	}
	return hxbit_Serializer.__SIGN = haxe_crypto_Md5.make(s.end());
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.getEnumClass = function(name) {
	var cl = hxbit_Serializer.ENUM_CLASSES.h[name];
	if(cl != null) {
		return cl;
	}
	var path = name.split(".").join("_");
	path = path.charAt(0).toUpperCase() + HxOverrides.substr(path,1,null);
	cl = $hxClasses["hxbit.enumSer." + path];
	if(cl != null) {
		hxbit_Serializer.ENUM_CLASSES.h[name] = cl;
	}
	return cl;
};
hxbit_Serializer.save = function(value) {
	var s = new hxbit_Serializer();
	s.beginSave();
	s.addKnownRef(value);
	return s.endSave();
};
hxbit_Serializer.sortByUID = function(o1,o2) {
	return o1.__uid - o2.__uid;
};
hxbit_Serializer.sortByUIDDesc = function(o1,o2) {
	return o2.__uid - o1.__uid;
};
hxbit_Serializer.load = function(bytes,cl,iterObjects,remapIds) {
	var s = new hxbit_Serializer();
	s.set_remapIds(remapIds);
	s.beginLoad(bytes);
	var value = s.getRef(cl,cl.__clid);
	s.endLoad();
	if(iterObjects != null) {
		var _g = [];
		var o = s.refs.iterator();
		while(o.hasNext()) {
			var o1 = o.next();
			_g.push(o1);
		}
		var objects = _g;
		objects.sort(hxbit_Serializer.sortByUID);
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			iterObjects(o);
		}
	}
	return value;
};
hxbit_Serializer.prototype = {
	refs: null
	,remapObjs: null
	,newObjects: null
	,out: null
	,input: null
	,inPos: null
	,usedClasses: null
	,usedEnums: null
	,convert: null
	,enumConvert: null
	,mapIndexes: null
	,knownStructs: null
	,set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		this.knownStructs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.addByte(v);
	}
	,addUID: function(v) {
		this.addInt(v);
	}
	,getUID: function() {
		return this.getInt();
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addFloat(v);
	}
	,addDouble: function(v) {
		this.out.addDouble(v);
	}
	,addBool: function(v) {
		this.out.addByte(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		this.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		this.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,getArray: function(f) {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var this1 = new Array(len);
		var a = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		this.addInt(keys.length + 1);
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			fk(k);
			ft(a.get(k));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			this.addInt(b.length + 1);
			this.out.add(b);
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			this.addInt(b.length + 1);
			this.out.add(b);
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			this.addInt(len + 1);
			this.out.addBytes(b,pos,len);
		}
	}
	,getString: function() {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			return this.getInt();
		case 4:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 5:
			var o = { };
			var _g1 = 0;
			var _g2 = this.getInt();
			while(_g1 < _g2) {
				var i = _g1++;
				o[this.getString()] = this.getDynamic();
			}
			return o;
		case 6:
			return this.getString();
		case 7:
			var _g1 = [];
			var _g2 = 0;
			var _g3 = this.getInt();
			while(_g2 < _g3) {
				var i = _g2++;
				_g1.push(this.getDynamic());
			}
			return _g1;
		case 8:
			return this.getBytes();
		case 9:
			return this.getAnyRef();
		default:
			var x = _g;
			throw haxe_Exception.thrown("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.addByte(0);
			return;
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 1:
			this.addByte(3);
			this.addInt(v);
			break;
		case 2:
			this.addByte(4);
			this.addFloat(v);
			break;
		case 3:
			this.addByte(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.addByte(5);
			this.addInt(fields.length);
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				this.addString(f);
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g.c;
			switch(c) {
			case Array:
				this.addByte(7);
				var a = v;
				this.addInt(a.length);
				var _g1 = 0;
				while(_g1 < a.length) {
					var v1 = a[_g1];
					++_g1;
					this.addDynamic(v1);
				}
				break;
			case String:
				this.addByte(6);
				this.addString(v);
				break;
			case haxe_io_Bytes:
				this.addByte(8);
				this.addBytes(v);
				break;
			default:
				if(js_Boot.__implements(v,hxbit_Serializable)) {
					this.addByte(9);
					this.addAnyRef(v);
				} else {
					throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(c));
				}
			}
			break;
		default:
			var t = _g;
			throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.addByte(clid >> 8);
		this.out.addByte(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addStruct: function(s) {
		if(s == null) {
			this.addByte(0);
			return;
		}
		var c = js_Boot.__implements(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.addByte(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.addByte(2);
			this.addInt(index);
			return;
		}
		this.knownStructs.push(s);
		this.addByte(3);
		var c = js_Boot.getClass(s);
		if(c == null) {
			throw haxe_Exception.thrown(Std.string(s) + " does not have a class ?");
		}
		this.addString(c.__name__);
		s.customSerialize(this);
		this.addByte(255);
	}
	,getStruct: function() {
		switch(this.input.b[this.inPos++]) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			return this.knownStructs[this.getInt()];
		case 3:
			var cname = this.getString();
			var cl = $hxClasses[cname];
			if(cl == null) {
				throw haxe_Exception.thrown("Missing struct class " + cname);
			}
			var s = Object.create(cl.prototype);
			this.knownStructs.push(s);
			s.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw haxe_Exception.thrown("Invalid customUnserialize for " + Std.string(s));
			}
			return s;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,addObjRef: function(s) {
		this.addInt(s.__uid);
	}
	,getObjRef: function() {
		return this.getInt();
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.addInt(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		var r = this.refs.h[s.__uid];
		if(r != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.addCLID(index);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.addInt(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		var r = this.refs.h[s.__uid];
		if(r != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.addCLID(clid);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid && this.remapObjs == null) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.getCLID();
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.remapObjs != null) {
			this.remap(i);
		}
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid && this.remapObjs == null) {
			hxbit_Serializer.UID = rid;
		}
		if(this.convert != null && this.convert[clidx] != null) {
			var conv = this.convert[clidx];
			if(conv.hadCID) {
				var realIdx = this.getCLID();
				if(conv.hasCID) {
					c = hxbit_Serializer.CL_BYID[realIdx];
					clidx = c.__clid;
				}
			}
		} else if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx = this.getCLID();
			c = hxbit_Serializer.CL_BYID[realIdx];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Object.create(c.prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.remapObjs != null) {
			this.remap(i);
		}
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
		this.usedEnums = new haxe_ds_StringMap();
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var enums = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g = 0;
		var _g1 = this.usedClasses.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Object.create(c.prototype).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var h = this.usedEnums.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			if(name == "hxbit.PropTypeDesc") {
				continue;
			}
			var schema = hxbit_Serializer.getEnumClass(name).getSchema();
			schemas.push(schema);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
			enums.push(name);
		}
		var schemaData = this.end();
		this.begin();
		this.out.addBytes(content,0,savePosition);
		this.addString("HXS");
		this.addByte(1);
		var _g = 0;
		var _g1 = classes.length;
		while(_g < _g1) {
			var i = _g++;
			var index = classes[i];
			var c = hxbit_Serializer.CLASSES[index];
			this.addString(c.__name__);
			this.addCLID(index);
			this.addInt32(schemas[i].get_checkSum());
		}
		var _g = 0;
		var _g1 = enums.length;
		while(_g < _g1) {
			var i = _g++;
			this.addString(enums[i]);
			this.addCLID(0);
			this.addInt32(schemas[i + classes.length].get_checkSum());
		}
		this.addString(null);
		this.addInt(schemaData.length);
		this.out.add(schemaData);
		this.out.addBytes(content,savePosition,content.length - savePosition);
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName_h = Object.create(null);
		var schemas = [];
		var enumSchemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g = 0;
		var _g1 = hxbit_Serializer.CLASSES.length;
		while(_g < _g1) {
			var i = _g++;
			var c = hxbit_Serializer.CLASSES[i];
			classByName_h[c.__name__] = i;
			mapIndexes[i] = i;
		}
		if(this.getString() != "HXS") {
			throw haxe_Exception.thrown("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw haxe_Exception.thrown("Unsupported HXS version " + version);
		}
		while(true) {
			var clname = this.getString();
			if(clname == null) {
				break;
			}
			var index = this.getCLID();
			var v = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v;
			var ourClassIndex = classByName_h[clname];
			if(ourClassIndex == null) {
				if(index == 0) {
					var enumCl = hxbit_Serializer.getEnumClass(clname);
					if(enumCl != null) {
						var ourSchema = enumCl.getSchema();
						if(ourSchema.get_checkSum() != crc) {
							needConvert = true;
						} else {
							ourSchema = null;
						}
						enumSchemas.push({ name : clname, ourSchema : ourSchema});
						continue;
					}
				}
				throw haxe_Exception.thrown("Missing class " + clname + " found in HXS data");
			}
			var ourSchema1 = Object.create(hxbit_Serializer.CLASSES[ourClassIndex].prototype).getSerializeSchema();
			if(ourSchema1.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema1;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var schemaDataSize = this.getInt();
		if(needConvert) {
			this.set_remapIds(false);
			this.convert = [];
			var _g = 0;
			while(_g < indexes.length) {
				var index = indexes[_g];
				++_g;
				var ourSchema = schemas[index];
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema != null) {
					var c1 = hxbit_Serializer.CLASSES[mapIndexes[index]];
					this.convert[mapIndexes[index]] = new hxbit_Convert(c1.__name__,ourSchema,schema);
				}
			}
			var _g = 0;
			while(_g < enumSchemas.length) {
				var e = enumSchemas[_g];
				++_g;
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(e.ourSchema != null) {
					var this1 = this.enumConvert;
					var k = e.name;
					var v = new hxbit_EnumConvert(e.name,e.ourSchema,schema);
					this1.h[k] = v;
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertEnum: function(econv) {
		this.inPos--;
		var cid = this.input.b[this.inPos++] - 1;
		var c = econv.constructs[cid];
		var this1 = new Array(c.read.length);
		var values = this1;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var newCid = econv.reindex[cid];
		if(newCid < 0) {
			return null;
		}
		var bytes = this.writeConvValues(c,values,newCid + 1);
		var oldIn = this.input;
		var oldPos = this.inPos;
		var oldConv = this.enumConvert;
		this.enumConvert = hxbit_Serializer.EMPTY_MAP;
		this.setInput(bytes,0);
		var v = hxbit_Serializer.getEnumClass(econv.enumClass).doUnserialize(this);
		this.setInput(oldIn,oldPos);
		this.enumConvert = oldConv;
		return v;
	}
	,convertRef: function(i,c) {
		var this1 = new Array(c.read.length);
		var values = this1;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var bytes = this.writeConvValues(c,values);
		var oldIn = this.input;
		var oldPos = this.inPos;
		var oldConv = this.enumConvert;
		this.enumConvert = hxbit_Serializer.EMPTY_MAP;
		this.setInput(bytes,0);
		var obj = Reflect.field(i,"oldHxBitFields");
		if(obj != null) {
			var _g = 0;
			var _g1 = c.read;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				if(!r.written) {
					obj[r.path.split(".").pop()] = values[r.index];
				}
			}
		}
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
		this.enumConvert = oldConv;
	}
	,writeConvValues: function(c,values,extraByte) {
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		if(extraByte != null) {
			this.out.addByte(extraByte);
		}
		var _g = 0;
		var _g1 = c.write;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else if(w.conv != null) {
						v = w.conv(v);
					} else {
						v = this.convertValue(w.path,v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		return bytes;
	}
	,isNullable: function(t) {
		switch(t._hx_index) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(path,v,from,to) {
		if(v == null) {
			return hxbit_Convert.getDefault(to);
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		var conv = hxbit_Convert.convFuns.h[path];
		if(conv != null) {
			return conv(v);
		}
		switch(from._hx_index) {
		case 0:
			switch(to._hx_index) {
			case 1:
				return v * 1.0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 1:
			switch(to._hx_index) {
			case 0:
				return v | 0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 2:
			switch(to._hx_index) {
			case 0:
				if(v) {
					return 1;
				} else {
					return 0;
				}
				break;
			case 1:
				if(v) {
					return 1.;
				} else {
					return 0.;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 5:
			var _g = from.name;
			switch(to._hx_index) {
			case 5:
				var to1 = to.name;
				var cl = $hxClasses[to1];
				if(cl == null) {
					throw haxe_Exception.thrown("Missing target class " + to1);
				}
				var value = v;
				var v2 = js_Boot.__downcastCheck(value,cl) ? value : null;
				if(v2 != null) {
					return v2;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 7:
			var _g = from.k;
			var _g1 = from.v;
			switch(to._hx_index) {
			case 7:
				var tt = to.k;
				var tv = to.v;
				var fv = _g1;
				var ft = _g;
				if(hxbit_Convert.sameType(ft,tt)) {
					var path1 = path + "[]";
					switch(ft._hx_index) {
					case 0:
						var v1 = v;
						var v2 = new haxe_ds_IntMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							var value = this.convertValue(path1,v1.h[k1],fv,tv);
							v2.h[k1] = value;
						}
						return v2;
					case 3:
						var v1 = v;
						var v2 = new haxe_ds_StringMap();
						var h = v1.h;
						var k_h = h;
						var k_keys = Object.keys(h);
						var k_length = k_keys.length;
						var k_current = 0;
						while(k_current < k_length) {
							var k = k_keys[k_current++];
							var value = this.convertValue(path1,v1.h[k],fv,tv);
							v2.h[k] = value;
						}
						return v2;
					case 5:
						var _g = ft.name;
						var v1 = v;
						var v2 = new haxe_ds_ObjectMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.h[k1.__id__],fv,tv));
						}
						return v2;
					case 6:
						var _g = ft.name;
						var v1 = v;
						var v2 = new haxe_ds_EnumValueMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.get(k1),fv,tv));
						}
						return v2;
					case 9:
						var _g = ft.fields;
						var v1 = v;
						var v2 = new haxe_ds_ObjectMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.h[k1.__id__],fv,tv));
						}
						return v2;
					default:
					}
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 8:
			var _g = from.k;
			switch(to._hx_index) {
			case 8:
				var to1 = to.k;
				var from1 = _g;
				var arr = v;
				var path1 = path + "[]";
				var _g = [];
				var _g1 = 0;
				while(_g1 < arr.length) {
					var v1 = arr[_g1];
					++_g1;
					_g.push(this.convertValue(path1,v1,from1,to1));
				}
				return _g;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 9:
			var _g = from.fields;
			switch(to._hx_index) {
			case 9:
				var obj2 = to.fields;
				var obj1 = _g;
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(path + "." + f2.name,Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 10:
			var _g = from.k;
			switch(to._hx_index) {
			case 10:
				var _g1 = to.k;
				var from1 = _g;
				return this.convertValue(path,v,from1,to);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
				var from1 = _g;
				return this.convertValue(path,v,from1,to);
			}
			break;
		case 12:
			var from1 = from.t;
			return this.convertValue(path,v,from1,to);
		default:
			switch(to._hx_index) {
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			default:
			}
		}
		throw haxe_Exception.thrown("Cannot convert " + path + "(" + Std.string(v) + ") from " + Std.string(from) + " to " + Std.string(to));
	}
	,readValue: function(t) {
		var v = this.readValueImpl(t);
		return v;
	}
	,readValueImpl: function(t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			return this.getInt();
		case 1:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			return this.getString();
		case 4:
			return this.getBytes();
		case 5:
			var name = t.name;
			var cl = $hxClasses[name];
			if(cl == null) {
				return this.getRef(null,0);
			} else {
				return this.getRef(cl,cl.__clid);
			}
			break;
		case 6:
			var name = t.name;
			var ser = hxbit_Serializer.getEnumClass(name);
			if(ser == null) {
				var e = $hxEnums[name];
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this = this.input;
					var pos = this.inPos++;
					return null;
				}
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			return ser.doUnserialize(this);
		case 7:
			var k = t.k;
			var v = t.v;
			switch(k._hx_index) {
			case 0:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 3:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_StringMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 6:
				var _g = k.name;
				var len = this.getInt();
				if(len == 0) {
					return null;
				}
				var m = new haxe_ds_EnumValueMap();
				while(--len > 0) {
					var k1 = this.readValue(k);
					var v1 = this.readValue(v);
					m.set(k1,v1);
				}
				return m;
			default:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_ObjectMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.set(k1,v1);
					}
					tmp = m;
				}
				return tmp;
			}
			break;
		case 8:
			var t1 = t.k;
			var len = this.getInt();
			if(len == 0) {
				return null;
			} else {
				--len;
				var a = [];
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t.fields;
			var bits = this.getInt();
			if(bits == 0) {
				return null;
			}
			var o = { };
			--bits;
			var _g = [];
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(this.isNullable(f.type)) {
					_g.push(f);
				}
			}
			var nullables = _g;
			var _g = 0;
			while(_g < fields.length) {
				var f = fields[_g];
				++_g;
				var nidx = nullables.indexOf(f);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o[f.name] = this.readValue(f.type);
			}
			return o;
		case 10:
			var t1 = t.k;
			return this.readValue(t1);
		case 11:
			var t1 = t.k;
			var len = this.getInt();
			if(len == 0) {
				return null;
			} else {
				--len;
				var this1 = new Array(len);
				var a = this1;
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 12:
			var t1 = t.t;
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			return this.getDynamic();
		case 15:
			var v = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v;
		case 16:
			var _g = t.t;
			return this.getInt();
		case 17:
			return this.getStruct();
		case 18:
			var _g = t.name;
			return this.getAnyRef();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			this.addInt(v);
			break;
		case 1:
			this.addFloat(v);
			break;
		case 2:
			this.addBool(v);
			break;
		case 3:
			this.addString(v);
			break;
		case 4:
			this.addBytes(v);
			break;
		case 5:
			var _g = t.name;
			this.addKnownRef(v);
			break;
		case 6:
			var name = t.name;
			var ser = hxbit_Serializer.getEnumClass(name);
			if(ser == null) {
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			ser.doSerialize(this,v);
			break;
		case 7:
			var k = t.k;
			var t1 = t.v;
			switch(k._hx_index) {
			case 0:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 3:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var h = v1.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k1 = k_keys[k_current++];
						_g.push(k1);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 6:
				var _g = k.name;
				if(((v) instanceof haxe_ds_EnumValueMap)) {
					var v1 = v;
					if(v1 == null) {
						this.addByte(0);
						return;
					}
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var vk = keys[_g];
						++_g;
						this.writeValue(vk,k);
						this.writeValue(v1.get(vk),t1);
					}
				} else {
					var v1 = v;
					if(v1 == null) {
						this.addByte(0);
					} else {
						var _g = [];
						var k1 = v1.keys();
						while(k1.hasNext()) {
							var k2 = k1.next();
							_g.push(k2);
						}
						var keys = _g;
						this.addInt(keys.length + 1);
						var _g = 0;
						while(_g < keys.length) {
							var k1 = keys[_g];
							++_g;
							_gthis.writeValue(k1,k);
							_gthis.writeValue(v1.h[k1.__id__],t1);
						}
					}
				}
				break;
			default:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1.__id__],t1);
					}
				}
			}
			break;
		case 8:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.addByte(0);
			} else {
				this.addInt(a.length + 1);
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 9:
			var fields = t.fields;
			if(v == null) {
				this.addByte(0);
			} else {
				var fbits = 0;
				var _g = [];
				var _g1 = 0;
				while(_g1 < fields.length) {
					var f = fields[_g1];
					++_g1;
					if(this.isNullable(f.type)) {
						_g.push(f);
					}
				}
				var nullables = _g;
				var _g = 0;
				var _g1 = nullables.length;
				while(_g < _g1) {
					var i = _g++;
					if(Reflect.field(v,nullables[i].name) != null) {
						fbits |= 1 << i;
					}
				}
				this.addInt(fbits + 1);
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					var nidx = nullables.indexOf(f);
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f.name),f.type);
				}
			}
			break;
		case 10:
			var t1 = t.k;
			this.writeValue(v,t1);
			break;
		case 11:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.addByte(0);
			} else {
				this.addInt(a.length + 1);
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 12:
			var t1 = t.t;
			if(v == null) {
				this.addByte(0);
			} else {
				this.addByte(1);
				this.writeValue(v,t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.addInt64(v);
			break;
		case 16:
			var _g = t.t;
			this.addInt(v);
			break;
		case 17:
			this.addStruct(v);
			break;
		case 18:
			var _g = t.name;
			this.addAnyRef(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
	,__properties__: {set_remapIds:"set_remapIds",get_remapIds:"get_remapIds"}
};
var game_fields_ChainFieldMarker = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.font = kha_Assets.fonts.ka1;
	this.fontHeight = this.font.height(30);
	this.type = 1;
};
$hxClasses["game.fields.ChainFieldMarker"] = game_fields_ChainFieldMarker;
game_fields_ChainFieldMarker.__name__ = "game.fields.ChainFieldMarker";
game_fields_ChainFieldMarker.__interfaces__ = [game_fields_IFieldMarker];
game_fields_ChainFieldMarker.create = function() {
	var m = new game_fields_ChainFieldMarker();
	m.modifyChain(1);
	return m;
};
game_fields_ChainFieldMarker.doSerialize = function(__ctx,__this) {
};
game_fields_ChainFieldMarker.doUnserialize = function(__ctx,__this) {
};
game_fields_ChainFieldMarker.prototype = {
	font: null
	,fontHeight: null
	,chain: null
	,chainString: null
	,fontWidth: null
	,type: null
	,copy: function() {
		return new game_fields_ChainFieldMarker().copyFrom(this);
	}
	,modifyChain: function(value) {
		this.chain = value;
		this.chainString = "" + this.chain;
		this.fontWidth = this.font.width(30,this.chainString);
	}
	,onSet: function(value) {
		if(value.type == 1) {
			this.modifyChain((this.chain + 1) % 100);
			return this;
		}
		return value;
	}
	,render: function(g,x,y) {
		g.drawSubImage(kha_Assets.images.pixel,x,y,770,455,64,64);
		g.set_font(this.font);
		g.set_fontSize(30);
		g.drawString(this.chainString,x + 32 - this.fontWidth / 2,y + 32 - this.fontHeight / 2);
	}
	,copyFrom: function(other) {
		this.chain = other.chain;
		this.chainString = other.chainString;
		this.fontWidth = other.fontWidth;
		return this;
	}
	,__uid: null
	,getCLID: function() {
		return game_fields_ChainFieldMarker.__clid;
	}
	,serialize: function(__ctx) {
		game_fields_ChainFieldMarker.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.isFinal = hxbit_Serializer.isClassFinal(game_fields_ChainFieldMarker.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_fields_ChainFieldMarker.doUnserialize(__ctx,this);
	}
	,__class__: game_fields_ChainFieldMarker
};
var game_fields_ColorConflictFieldMarker = function() { };
$hxClasses["game.fields.ColorConflictFieldMarker"] = game_fields_ColorConflictFieldMarker;
game_fields_ColorConflictFieldMarker.__name__ = "game.fields.ColorConflictFieldMarker";
game_fields_ColorConflictFieldMarker.create = function(prefsSettings,defaultColor) {
	return new game_fields_MultiColorFieldMarker(new game_fields_MultiColorFieldMarkerOptions(prefsSettings,new utils_Point(770,519),defaultColor,4));
};
var game_fields_DependencyFieldMarker = function() { };
$hxClasses["game.fields.DependencyFieldMarker"] = game_fields_DependencyFieldMarker;
game_fields_DependencyFieldMarker.__name__ = "game.fields.DependencyFieldMarker";
game_fields_DependencyFieldMarker.create = function(prefsSettings,defaultColor) {
	return new game_fields_MultiColorFieldMarker(new game_fields_MultiColorFieldMarkerOptions(prefsSettings,new utils_Point(898,455),defaultColor,3));
};
var game_fields_FieldOptions = function(prefsSettings,columns,playAreaRows,garbageRows,hiddenRows) {
	this.prefsSettings = prefsSettings;
	this.columns = columns;
	this.playAreaRows = playAreaRows;
	this.garbageRows = garbageRows;
	this.hiddenRows = hiddenRows;
};
$hxClasses["game.fields.FieldOptions"] = game_fields_FieldOptions;
game_fields_FieldOptions.__name__ = "game.fields.FieldOptions";
game_fields_FieldOptions.prototype = {
	prefsSettings: null
	,columns: null
	,playAreaRows: null
	,garbageRows: null
	,hiddenRows: null
	,__class__: game_fields_FieldOptions
};
var game_fields_Field = function(opts) {
	this.prefsSettings = opts.prefsSettings;
	this.columns = opts.columns;
	this.playAreaRows = opts.playAreaRows;
	this.garbageRows = opts.garbageRows;
	this.hiddenRows = opts.hiddenRows;
	this.gelos = new game_copying_CopyableMatrix(this.totalRows);
	this.markers = new game_copying_CopyableMatrix(this.totalRows);
	this.createData();
};
$hxClasses["game.fields.Field"] = game_fields_Field;
game_fields_Field.__name__ = "game.fields.Field";
game_fields_Field.__interfaces__ = [game_copying_ICopyFrom];
game_fields_Field.prototype = {
	prefsSettings: null
	,markers: null
	,gelos: null
	,columns: null
	,playAreaRows: null
	,garbageRows: null
	,hiddenRows: null
	,outerRows: null
	,totalRows: null
	,centerColumnIndex: null
	,garbageAccelerations: null
	,garbageColumns: null
	,copy: function() {
		return new game_fields_Field(new game_fields_FieldOptions(this.prefsSettings,this.columns,this.playAreaRows,this.garbageRows,this.hiddenRows)).copyFrom(this);
	}
	,rawSet: function(x,y,gelo) {
		this.gelos.data[y][x] = gelo;
	}
	,rawSetMarker: function(x,y,marker) {
		this.markers.data[y][x] = marker;
	}
	,createData: function() {
		this.outerRows = this.hiddenRows + this.garbageRows;
		this.totalRows = this.playAreaRows + this.outerRows;
		this.centerColumnIndex = (this.columns / 2 | 0) - 1;
		this.gelos.data.length = 0;
		this.markers.data.length = 0;
		var _g = 0;
		var _g1 = this.totalRows;
		while(_g < _g1) {
			var y = _g++;
			this.gelos.data[y] = [];
			this.markers.data[y] = [];
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3) {
				var x = _g2++;
				var marker = game_fields_NullFieldMarker.get_instance();
				this.markers.data[y][x] = marker;
			}
		}
		var garbageVels = [];
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1) {
			var x = _g++;
			garbageVels.push(game_fields_Field.ORIGINAL_GARBAGE_ACCELERATIONS[x % 6]);
		}
		this.garbageAccelerations = garbageVels;
		if(this.columns == 6) {
			this.garbageColumns = game_fields_Field.ORIGINAL_GARBAGE_COLUMNS.slice();
		} else {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.columns;
			while(_g1 < _g2) {
				var x = _g1++;
				_g.push(x);
			}
			var pool = _g;
			var garbageCols = [];
			var rng = new game_copying_CopyableRNG(this.columns);
			while(pool.length > 0) {
				var item = pool[rng.data.GetUpTo(pool.length - 1)];
				garbageCols.push(item);
				HxOverrides.remove(pool,item);
			}
			this.garbageColumns = garbageCols;
		}
	}
	,get: function(x,y) {
		return this.gelos.data[y][x];
	}
	,getMarker: function(x,y) {
		return this.markers.data[y][x];
	}
	,getAtPoint: function(p) {
		return this.get(p.x,p.y);
	}
	,set: function(x,y,gelo) {
		var screenCoords = this.cellToScreen(x,y);
		gelo.x = screenCoords.x;
		gelo.y = screenCoords.y;
		this.gelos.data[y][x] = gelo;
	}
	,setMarker: function(x,y,marker) {
		var marker1 = this.getMarker(x,y).onSet(marker.copy());
		this.markers.data[y][x] = marker1;
	}
	,newGelo: function(x,y,color,lockInGarbage) {
		var screenCoords = this.cellToScreen(x,y);
		var gelo = game_gelos_FieldGelo.create(new game_gelos_FieldGeloOptions(screenCoords.x,screenCoords.y,this.prefsSettings,color));
		if(!lockInGarbage && y < this.garbageRows) {
			return gelo;
		}
		this.gelos.data[y][x] = gelo;
		return gelo;
	}
	,newGarbage: function(x,y,color) {
		var screenCoords = this.cellToScreen(x,y);
		var garbo = game_gelos_GarbageGelo.create(new game_gelos_FieldGeloOptions(screenCoords.x,screenCoords.y,this.prefsSettings,color));
		if(y >= this.garbageRows) {
			return garbo;
		}
		this.gelos.data[y][x] = garbo;
		return garbo;
	}
	,clear: function(x,y) {
		this.gelos.data[y][x] = null;
	}
	,clearMarker: function(x,y) {
		var marker = game_fields_NullFieldMarker.get_instance();
		this.markers.data[y][x] = marker;
	}
	,clearAll: function() {
		var _gthis = this;
		this.customForEach(0,this.totalRows,function(_,x,y) {
			_gthis.clear(x,y);
		});
	}
	,isEmpty: function(x,y) {
		return this.get(x,y) == null;
	}
	,isMarkerEmpty: function(x,y) {
		return this.getMarker(x,y) == game_fields_NullFieldMarker.get_instance();
	}
	,isEmptyAtPoint: function(p) {
		return this.get(p.x,p.y) == null;
	}
	,cannotPlace: function(x,y) {
		if(!(0 > x || x > this.columns - 1 || 0 > y || y > this.totalRows - 1)) {
			return this.get(x,y) != null;
		} else {
			return true;
		}
	}
	,cannotShift: function(x,y) {
		if(!(0 > x || x > this.columns - 1)) {
			return this.get(x,y) != null;
		} else {
			return true;
		}
	}
	,customForEach: function(startY,endY,callback) {
		var diff = endY - startY;
		var increment = diff / Math.abs(diff) | 0;
		var y = startY;
		while(true) {
			var _g = 0;
			var _g1 = this.columns;
			while(_g < _g1) {
				var x = _g++;
				var gelo = this.get(x,y);
				if(gelo == null) {
					continue;
				}
				callback(gelo,x,y);
			}
			y += increment;
			if(!(y != endY)) {
				break;
			}
		}
	}
	,forEach: function(callback) {
		this.customForEach(0,this.totalRows,callback);
	}
	,checkAround: function(x,y,callback) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var p = utils_Utils.AROUND[i];
			var cellX = x + p.x;
			var cellY = y + p.y;
			if(cellX < 0) {
				continue;
			}
			if(cellX > this.columns - 1) {
				continue;
			}
			if(cellY < this.outerRows) {
				continue;
			}
			if(cellY > this.totalRows - 1) {
				continue;
			}
			if(this.get(cellX,cellY) == null) {
				continue;
			}
			callback(this.get(cellX,cellY),cellX,cellY,i);
		}
	}
	,checkConnections: function(onConnected,onCheck,onCurrent) {
		var _gthis = this;
		if(onConnected == null) {
			onConnected = function(_) {
			};
		}
		if(onCheck == null) {
			onCheck = function(_,_1) {
			};
		}
		if(onCurrent == null) {
			onCurrent = function(_) {
			};
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.totalRows;
		while(_g1 < _g2) {
			var _ = _g1++;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = this.columns;
			while(_g4 < _g5) {
				var _1 = _g4++;
				_g3.push(false);
			}
			_g.push(_g3);
		}
		var checkedCells = _g;
		this.customForEach(this.outerRows,this.totalRows,function(gelo,x,y) {
			if(gelo == null) {
				return;
			}
			var color = gelo.color;
			if(game_gelos_GeloColor.isGarbage(color)) {
				return;
			}
			var connected = [new game_gelos_FieldGeloPoint(color,x,y)];
			var checkedCount = 1;
			checkedCells[y][x] = true;
			while(checkedCount <= connected.length) {
				var current = connected[checkedCount - 1];
				_gthis.checkAround(current.x,current.y,function(checkedGelo,checkedX,checkedY,i) {
					if(color == checkedGelo.color) {
						onCheck(checkedGelo,i);
						if(!checkedCells[checkedY][checkedX]) {
							connected.push(new game_gelos_FieldGeloPoint(color,checkedX,checkedY));
							checkedCells[checkedY][checkedX] = true;
						}
					}
				});
				onCurrent(_gthis.get(current.x,current.y));
				++checkedCount;
			}
			onConnected(connected);
		});
	}
	,setSpriteVariations: function() {
		var bitField = 0;
		var onCheck = function(checkedGelo,i) {
			if(checkedGelo.state != game_gelos_FieldGeloState.IDLE) {
				return;
			}
			bitField += 1 << i;
		};
		var afterCheck = function(gelo) {
			if(gelo.state == game_gelos_FieldGeloState.IDLE) {
				gelo.changeSpriteVariation(bitField);
			}
			bitField = 0;
		};
		this.checkConnections(null,onCheck,afterCheck);
	}
	,drop: function() {
		var _gthis = this;
		var allLocked;
		while(true) {
			allLocked = true;
			this.customForEach(this.totalRows - 1,0,function(gelo,x,y) {
				var nextY = y + 1;
				if(nextY < _gthis.totalRows && _gthis.get(x,nextY) == null) {
					allLocked = false;
					_gthis.clear(x,y);
					_gthis.set(x,nextY,gelo);
				} else {
					gelo.stopFalling();
				}
			});
			if(allLocked) {
				break;
			}
		}
	}
	,updateFall: function(startY,endY) {
		var _gthis = this;
		var allDown = true;
		this.customForEach(startY,endY,function(gelo,origX,origY) {
			if(gelo.state == game_gelos_FieldGeloState.IDLE) {
				return;
			}
			if(gelo.state == game_gelos_FieldGeloState.FALLING) {
				var x = gelo.x;
				var y = gelo.y;
				var nextY = y + gelo.velocity;
				var cellCoords = _gthis.screenToCell(x,nextY + 32);
				if(cellCoords.y < _gthis.totalRows && (_gthis.get(cellCoords.x,cellCoords.y) == null || _gthis.get(cellCoords.x,cellCoords.y).state == game_gelos_FieldGeloState.FALLING)) {
					gelo.distanceCounter += gelo.velocity;
					gelo.y = nextY;
					gelo.changeSpriteVariation(0);
				} else {
					var r = gelo.x % 64;
					gelo.x = Math.min(gelo.x - ((r < 0 ? r + 64 : r) - 32),_gthis.columns * 64);
					var r = gelo.y % 64;
					gelo.y = Math.min(gelo.y - ((r < 0 ? r + 64 : r) - 32),_gthis.totalRows * 64);
					var distance = gelo.distanceCounter;
					if(distance < 1) {
						gelo.stopBouncing();
					} else if(distance < 32) {
						gelo.startBouncing(game_gelos_GeloBounceType.TSU_SHORT);
					} else {
						gelo.startBouncing(game_gelos_GeloBounceType.TSU_LONG);
					}
					_gthis.clear(origX,origY);
					var newCells = _gthis.screenToCell(gelo.x,gelo.y);
					_gthis.set(newCells.x,newCells.y,gelo);
				}
				gelo.velocity = Math.min(gelo.velocity + gelo.accel,gelo.velocityLimit);
			}
			allDown = false;
		});
		return allDown;
	}
	,cellToScreen: function(cellX,cellY) {
		var screenX = (cellX + 1) * 64 - 32;
		var screenY = (cellY + 1) * 64 - this.outerRows * 64 - 32;
		return new utils_Point(screenX,screenY);
	}
	,screenToCell: function(screenX,screenY) {
		var fieldX = Math.round((screenX + 32) / 64) - 1;
		var fieldY = Math.round((screenY + this.outerRows * 64 + 32) / 64) - 1;
		return new utils_IntPoint(fieldX,fieldY);
	}
	,addDesyncInfo: function(ctx) {
		var _g = 0;
		var _g1 = this.totalRows;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3) {
				var x = _g2++;
				if(this.get(x,y) == null) {
					ctx.addByte(0);
					continue;
				}
				var gelo = this.get(x,y);
				if(gelo.state != game_gelos_FieldGeloState.IDLE) {
					ctx.addByte(0);
					continue;
				}
				ctx.addInt(gelo.color);
			}
		}
	}
	,update: function() {
		this.customForEach(0,this.totalRows,function(gelo,_,_1) {
			gelo.update();
		});
	}
	,render: function(g,g4,alpha) {
		var _g = 0;
		var _g1 = this.totalRows;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3) {
				var x = _g2++;
				if(this.getMarker(x,y) == game_fields_NullFieldMarker.get_instance()) {
					continue;
				}
				var screenCoords = this.cellToScreen(x,y);
				var screenX = screenCoords.x - 32;
				var screenY = screenCoords.y - 32;
				this.getMarker(x,y).render(g,screenX,screenY);
			}
		}
		this.customForEach(0,this.totalRows,function(gelo,x,y) {
			gelo.render(g,g4,gelo.x,gelo.y,alpha);
		});
	}
	,copyFrom: function(other) {
		this.markers.copyFrom(other.markers);
		this.gelos.copyFrom(other.gelos);
		this.outerRows = other.outerRows;
		this.totalRows = other.totalRows;
		this.centerColumnIndex = other.centerColumnIndex;
		this.garbageAccelerations = other.garbageAccelerations;
		this.garbageColumns = other.garbageColumns;
		return this;
	}
	,__class__: game_fields_Field
};
var game_fields_FieldPopInfo = function() {
	this.beginners = new game_copying_ConstantCopyableArray([]);
	this.clears = new game_copying_ConstantCopyableArray([]);
	var _g = new haxe_ds_IntMap();
	_g.h[0] = 0;
	_g.h[1] = 0;
	_g.h[2] = 0;
	_g.h[3] = 0;
	_g.h[4] = 0;
	this.clearsByColor = new game_copying_ConstantCopyableMap(_g);
};
$hxClasses["game.fields.FieldPopInfo"] = game_fields_FieldPopInfo;
game_fields_FieldPopInfo.__name__ = "game.fields.FieldPopInfo";
game_fields_FieldPopInfo.__interfaces__ = [game_copying_ICopy];
game_fields_FieldPopInfo.prototype = {
	beginners: null
	,clears: null
	,clearsByColor: null
	,hasPops: null
	,copy: function() {
		return new game_fields_FieldPopInfo().copyFrom(this);
	}
	,addClear: function(color,x,y) {
		this.clears.data.push(new game_gelos_FieldGeloPoint(color,x,y));
		if(game_gelos_GeloColor.isColored(color)) {
			var tmp = color;
			var v = this.clearsByColor.data.h[tmp] + 1;
			this.clearsByColor.data.h[tmp] = v;
		}
	}
	,copyFrom: function(other) {
		this.beginners.copyFrom(other.beginners);
		this.clears.copyFrom(other.clears);
		this.clearsByColor.copyFrom(other.clearsByColor);
		this.hasPops = other.hasPops;
		return this;
	}
	,__class__: game_fields_FieldPopInfo
};
var game_fields_MultiColorFieldMarkerOptions = function(prefsSettings,spriteCoordinates,defaultColor,type) {
	this.prefsSettings = prefsSettings;
	this.spriteCoordinates = spriteCoordinates;
	this.defaultColor = defaultColor;
	this.type = type;
};
$hxClasses["game.fields.MultiColorFieldMarkerOptions"] = game_fields_MultiColorFieldMarkerOptions;
game_fields_MultiColorFieldMarkerOptions.__name__ = "game.fields.MultiColorFieldMarkerOptions";
game_fields_MultiColorFieldMarkerOptions.prototype = {
	prefsSettings: null
	,spriteCoordinates: null
	,defaultColor: null
	,type: null
	,__class__: game_fields_MultiColorFieldMarkerOptions
};
var game_fields_MultiColorFieldMarker = function(opts) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.prefsSettings = opts.prefsSettings;
	this.spriteCoordinates = opts.spriteCoordinates;
	this.defaultColor = opts.defaultColor;
	this.type = opts.type;
	this.colors = new game_copying_ConstantCopyableArray([this.defaultColor]);
};
$hxClasses["game.fields.MultiColorFieldMarker"] = game_fields_MultiColorFieldMarker;
game_fields_MultiColorFieldMarker.__name__ = "game.fields.MultiColorFieldMarker";
game_fields_MultiColorFieldMarker.__interfaces__ = [game_fields_IFieldMarker];
game_fields_MultiColorFieldMarker.doSerialize = function(__ctx,__this) {
};
game_fields_MultiColorFieldMarker.doUnserialize = function(__ctx,__this) {
};
game_fields_MultiColorFieldMarker.prototype = {
	prefsSettings: null
	,spriteCoordinates: null
	,defaultColor: null
	,colors: null
	,type: null
	,copy: function() {
		return new game_fields_MultiColorFieldMarker(new game_fields_MultiColorFieldMarkerOptions(this.prefsSettings,this.spriteCoordinates,this.defaultColor,this.type)).copyFrom(this);
	}
	,onSet: function(value) {
		var colorData = this.colors.data;
		if(value.type == this.type) {
			var marker = js_Boot.__cast(value , game_fields_MultiColorFieldMarker);
			var _g = 0;
			var _g1 = marker.colors.data;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(colorData.indexOf(c) != -1) {
					HxOverrides.remove(colorData,c);
				} else {
					colorData.push(c);
				}
			}
			return this;
		}
		return value;
	}
	,render: function(g,x,y) {
		var colorCount = this.colors.data.length;
		var width = 64 / colorCount;
		var _g = 0;
		var _g1 = colorCount;
		while(_g < _g1) {
			var i = _g++;
			g.set_color(this.prefsSettings.primaryColors.h[this.colors.data[i]]);
			g.drawSubImage(kha_Assets.images.pixel,x + i * width,y,this.spriteCoordinates.x + i * width,this.spriteCoordinates.y,width,64);
		}
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.colors.copyFrom(other.colors);
		return this;
	}
	,__uid: null
	,getCLID: function() {
		return game_fields_MultiColorFieldMarker.__clid;
	}
	,serialize: function(__ctx) {
		game_fields_MultiColorFieldMarker.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.isFinal = hxbit_Serializer.isClassFinal(game_fields_MultiColorFieldMarker.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_fields_MultiColorFieldMarker.doUnserialize(__ctx,this);
	}
	,__class__: game_fields_MultiColorFieldMarker
};
var game_fields_NullFieldMarker = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.type = 0;
};
$hxClasses["game.fields.NullFieldMarker"] = game_fields_NullFieldMarker;
game_fields_NullFieldMarker.__name__ = "game.fields.NullFieldMarker";
game_fields_NullFieldMarker.__interfaces__ = [game_fields_IFieldMarker];
game_fields_NullFieldMarker.__properties__ = {get_instance:"get_instance"};
game_fields_NullFieldMarker.get_instance = function() {
	if(game_fields_NullFieldMarker.instance == null) {
		game_fields_NullFieldMarker.instance = new game_fields_NullFieldMarker();
	}
	return game_fields_NullFieldMarker.instance;
};
game_fields_NullFieldMarker.doSerialize = function(__ctx,__this) {
};
game_fields_NullFieldMarker.doUnserialize = function(__ctx,__this) {
};
game_fields_NullFieldMarker.prototype = {
	type: null
	,copy: function() {
		return game_fields_NullFieldMarker.get_instance();
	}
	,onSet: function(value) {
		return value;
	}
	,render: function(g,x,y) {
	}
	,copyFrom: function(other) {
		return this;
	}
	,__uid: null
	,getCLID: function() {
		return game_fields_NullFieldMarker.__clid;
	}
	,serialize: function(__ctx) {
		game_fields_NullFieldMarker.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.isFinal = hxbit_Serializer.isClassFinal(game_fields_NullFieldMarker.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_fields_NullFieldMarker.doUnserialize(__ctx,this);
	}
	,__class__: game_fields_NullFieldMarker
};
var game_gamestatebuilders_EndlessGameStateBuilderOptions = function(rule,inputDevice,replayData) {
	this.rule = rule;
	this.inputDevice = inputDevice;
	this.replayData = replayData;
};
$hxClasses["game.gamestatebuilders.EndlessGameStateBuilderOptions"] = game_gamestatebuilders_EndlessGameStateBuilderOptions;
game_gamestatebuilders_EndlessGameStateBuilderOptions.__name__ = "game.gamestatebuilders.EndlessGameStateBuilderOptions";
game_gamestatebuilders_EndlessGameStateBuilderOptions.prototype = {
	rule: null
	,inputDevice: null
	,replayData: null
	,__class__: game_gamestatebuilders_EndlessGameStateBuilderOptions
};
var game_gamestatebuilders_IGameStateBuilder = function() { };
$hxClasses["game.gamestatebuilders.IGameStateBuilder"] = game_gamestatebuilders_IGameStateBuilder;
game_gamestatebuilders_IGameStateBuilder.__name__ = "game.gamestatebuilders.IGameStateBuilder";
game_gamestatebuilders_IGameStateBuilder.__isInterface__ = true;
game_gamestatebuilders_IGameStateBuilder.prototype = {
	pauseMediator: null
	,controlHintContainer: null
	,gameState: null
	,pauseMenu: null
	,build: null
	,__class__: game_gamestatebuilders_IGameStateBuilder
};
var game_gamestatebuilders_EndlessGameStateBuilder = function(opts) {
	this.rule = opts.rule;
	this.inputDevice = opts.inputDevice;
	this.replayData = opts.replayData;
};
$hxClasses["game.gamestatebuilders.EndlessGameStateBuilder"] = game_gamestatebuilders_EndlessGameStateBuilder;
game_gamestatebuilders_EndlessGameStateBuilder.__name__ = "game.gamestatebuilders.EndlessGameStateBuilder";
game_gamestatebuilders_EndlessGameStateBuilder.__interfaces__ = [game_gamestatebuilders_IGameStateBuilder];
game_gamestatebuilders_EndlessGameStateBuilder.prototype = {
	rule: null
	,inputDevice: null
	,replayData: null
	,softDropBonus: null
	,popCount: null
	,vanishHiddenRows: null
	,groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,physics: null
	,animations: null
	,dropSpeed: null
	,randomizeGarbage: null
	,rng: null
	,randomizer: null
	,particleManager: null
	,marginManager: null
	,frameCounter: null
	,borderColorMediator: null
	,scoreManager: null
	,chainSim: null
	,chainCounter: null
	,field: null
	,queue: null
	,actionBuffer: null
	,geloGroup: null
	,allClearManager: null
	,boardState: null
	,board: null
	,pauseMediator: null
	,controlHintContainer: null
	,saveGameStateMediator: null
	,gameState: null
	,pauseMenu: null
	,initValueBoxes: function() {
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
	}
	,buildRNG: function() {
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
	}
	,buildRandomizer: function() {
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
	}
	,buildParticleManager: function() {
		this.particleManager = new game_particles_ParticleManager();
	}
	,buildMarginManager: function() {
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
	}
	,buildFrameCounter: function() {
		this.frameCounter = new game_mediators_FrameCounter();
	}
	,initControlHintContainer: function() {
		this.controlHintContainer.isVisible = save_$data_Profile.primary.endlessSettings.showControlHints;
		this.controlHintContainer.value.data.push(new ui_ControlHint(["QUICK_RESTART"],"Quick Restart"));
	}
	,buildBorderColorMediator: function() {
		this.borderColorMediator = new game_mediators_BorderColorMediator();
	}
	,buildScoreManager: function() {
		this.scoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
	}
	,buildChainSim: function() {
		this.chainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs),game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs)));
	}
	,buildChainCounter: function() {
		this.chainCounter = new game_ChainCounter();
	}
	,buildField: function() {
		this.field = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
	}
	,buildQueue: function() {
		this.queue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
	}
	,buildActionBuffer: function() {
		if(this.replayData == null) {
			this.actionBuffer = new game_actionbuffers_LocalActionBuffer(new game_actionbuffers_LocalActionBufferOptions(this.frameCounter,this.inputDevice,save_$data_Profile.primary.input.localDelay));
			return;
		}
		this.actionBuffer = new game_actionbuffers_ReplayActionBuffer(new game_actionbuffers_ReplayActionBufferOptions(this.replayData,this.frameCounter,this.inputDevice,0));
	}
	,buildGeloGroup: function() {
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.geloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.scoreManager,this.field,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_GarbageTray.create(prefsSettings),game_garbage_trays_GarbageTray.create(prefsSettings)))));
	}
	,buildAllClearManager: function() {
		this.allClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.CENTERED,this.particleManager,this.borderColorMediator));
	}
	,buildBoardState: function() {
		var _g = this.animations;
		var _g1 = this.randomizeGarbage;
		var _g2 = save_$data_Profile.primary.prefs;
		var _g3 = this.rng;
		var _g4 = this.particleManager;
		var _g5 = this.geloGroup;
		var _g6 = this.field;
		var _g7 = game_garbage_NullGarbageManager.get_instance();
		this.boardState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,_g,_g1,_g2,_g3,game_geometries_BoardGeometries.CENTERED,_g4,_g5,this.queue,new game_previews_VerticalPreview(this.queue),this.allClearManager,this.scoreManager,this.actionBuffer,this.chainCounter,_g6,this.chainSim,_g7));
	}
	,buildBoard: function() {
		this.board = new game_boards_EndlessBoard(new game_boards_EndlessBoardOptions(this.boardState,this.pauseMediator,this.inputDevice,this.boardState));
	}
	,buildPauseMenu: function() {
		if(this.replayData == null) {
			this.pauseMenu = new game_ui_EndlessPauseMenu(new game_ui_EndlessPauseMenuOptions(save_$data_Profile.primary.endlessSettings,this.controlHintContainer,this.actionBuffer,save_$data_Profile.primary.prefs,this.pauseMediator));
			return;
		}
		this.pauseMenu = new game_ui_ReplayPauseMenu(new game_ui_ReplayPauseMenuOptions(js_Boot.__cast(this.actionBuffer , game_actionbuffers_ReplayActionBuffer),save_$data_Profile.primary.prefs,this.pauseMediator));
	}
	,buildGameState: function() {
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.CENTERED,this.board)),_g));
	}
	,wireMediators: function() {
		this.borderColorMediator.changeColor = ($_=this.boardState,$bind($_,$_.changeBorderColor));
	}
	,build: function() {
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
		this.particleManager = new game_particles_ParticleManager();
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
		this.frameCounter = new game_mediators_FrameCounter();
		this.controlHintContainer.isVisible = save_$data_Profile.primary.endlessSettings.showControlHints;
		this.controlHintContainer.value.data.push(new ui_ControlHint(["QUICK_RESTART"],"Quick Restart"));
		this.borderColorMediator = new game_mediators_BorderColorMediator();
		this.scoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
		this.chainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs),game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs)));
		this.chainCounter = new game_ChainCounter();
		this.field = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
		this.queue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
		this.actionBuffer = this.replayData == null ? new game_actionbuffers_LocalActionBuffer(new game_actionbuffers_LocalActionBufferOptions(this.frameCounter,this.inputDevice,save_$data_Profile.primary.input.localDelay)) : new game_actionbuffers_ReplayActionBuffer(new game_actionbuffers_ReplayActionBufferOptions(this.replayData,this.frameCounter,this.inputDevice,0));
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.geloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.scoreManager,this.field,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_GarbageTray.create(prefsSettings),game_garbage_trays_GarbageTray.create(prefsSettings)))));
		this.allClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.CENTERED,this.particleManager,this.borderColorMediator));
		var _g = this.animations;
		var _g1 = this.randomizeGarbage;
		var _g2 = save_$data_Profile.primary.prefs;
		var _g3 = this.rng;
		var _g4 = this.particleManager;
		var _g5 = this.geloGroup;
		var _g6 = this.field;
		var _g7 = game_garbage_NullGarbageManager.get_instance();
		this.boardState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,_g,_g1,_g2,_g3,game_geometries_BoardGeometries.CENTERED,_g4,_g5,this.queue,new game_previews_VerticalPreview(this.queue),this.allClearManager,this.scoreManager,this.actionBuffer,this.chainCounter,_g6,this.chainSim,_g7));
		this.board = new game_boards_EndlessBoard(new game_boards_EndlessBoardOptions(this.boardState,this.pauseMediator,this.inputDevice,this.boardState));
		this.pauseMenu = this.replayData == null ? new game_ui_EndlessPauseMenu(new game_ui_EndlessPauseMenuOptions(save_$data_Profile.primary.endlessSettings,this.controlHintContainer,this.actionBuffer,save_$data_Profile.primary.prefs,this.pauseMediator)) : new game_ui_ReplayPauseMenu(new game_ui_ReplayPauseMenuOptions(js_Boot.__cast(this.actionBuffer , game_actionbuffers_ReplayActionBuffer),save_$data_Profile.primary.prefs,this.pauseMediator));
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.CENTERED,this.board)),_g));
		this.borderColorMediator.changeColor = ($_=this.boardState,$bind($_,$_.changeBorderColor));
	}
	,__class__: game_gamestatebuilders_EndlessGameStateBuilder
};
var game_gamestatebuilders_IBackupGameStateBuilder = function() { };
$hxClasses["game.gamestatebuilders.IBackupGameStateBuilder"] = game_gamestatebuilders_IBackupGameStateBuilder;
game_gamestatebuilders_IBackupGameStateBuilder.__name__ = "game.gamestatebuilders.IBackupGameStateBuilder";
game_gamestatebuilders_IBackupGameStateBuilder.__isInterface__ = true;
game_gamestatebuilders_IBackupGameStateBuilder.__interfaces__ = [game_copying_ICopyFrom,game_gamestatebuilders_IGameStateBuilder];
game_gamestatebuilders_IBackupGameStateBuilder.prototype = {
	saveGameStateMediator: null
	,createBackupBuilder: null
	,copyFrom: null
	,__class__: game_gamestatebuilders_IBackupGameStateBuilder
};
var game_gamestatebuilders_INetplayGameStateBuilder = function() { };
$hxClasses["game.gamestatebuilders.INetplayGameStateBuilder"] = game_gamestatebuilders_INetplayGameStateBuilder;
game_gamestatebuilders_INetplayGameStateBuilder.__name__ = "game.gamestatebuilders.INetplayGameStateBuilder";
game_gamestatebuilders_INetplayGameStateBuilder.__isInterface__ = true;
game_gamestatebuilders_INetplayGameStateBuilder.__interfaces__ = [game_copying_ICopyFrom,game_gamestatebuilders_IGameStateBuilder];
game_gamestatebuilders_INetplayGameStateBuilder.prototype = {
	rollbackMediator: null
	,createBackupBuilder: null
	,copyFrom: null
	,__class__: game_gamestatebuilders_INetplayGameStateBuilder
};
var game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions = function(rule,isLocalOnLeft,session,frameCounter) {
	this.rule = rule;
	this.isLocalOnLeft = isLocalOnLeft;
	this.session = session;
	this.frameCounter = frameCounter;
};
$hxClasses["game.gamestatebuilders.NetplayEndlessGameStateBuilderOptions"] = game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions;
game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions.__name__ = "game.gamestatebuilders.NetplayEndlessGameStateBuilderOptions";
game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions.prototype = {
	rule: null
	,isLocalOnLeft: null
	,session: null
	,frameCounter: null
	,__class__: game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions
};
var game_gamestatebuilders_NetplayEndlessGameStateBuilder = function(opts) {
	this.rule = opts.rule;
	this.isLocalOnLeft = opts.isLocalOnLeft;
	this.session = opts.session;
	this.frameCounter = opts.frameCounter;
};
$hxClasses["game.gamestatebuilders.NetplayEndlessGameStateBuilder"] = game_gamestatebuilders_NetplayEndlessGameStateBuilder;
game_gamestatebuilders_NetplayEndlessGameStateBuilder.__name__ = "game.gamestatebuilders.NetplayEndlessGameStateBuilder";
game_gamestatebuilders_NetplayEndlessGameStateBuilder.__interfaces__ = [game_gamestatebuilders_INetplayGameStateBuilder];
game_gamestatebuilders_NetplayEndlessGameStateBuilder.prototype = {
	rule: null
	,isLocalOnLeft: null
	,session: null
	,frameCounter: null
	,garbageDropLimit: null
	,garbageConfirmGracePeriod: null
	,softDropBonus: null
	,popCount: null
	,vanishHiddenRows: null
	,groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,physics: null
	,animations: null
	,dropSpeed: null
	,randomizeGarbage: null
	,rng: null
	,randomizer: null
	,particleManager: null
	,marginManager: null
	,leftBorderColorMediator: null
	,leftTargetMediator: null
	,rightBorderColorMediator: null
	,rightTargetMediator: null
	,leftGarbageTray: null
	,leftGarbageManager: null
	,leftScoreManager: null
	,leftChainSimDisplay: null
	,leftChainSimAccumDisplay: null
	,leftChainSim: null
	,leftChainCounter: null
	,leftField: null
	,leftQueue: null
	,leftInputDevice: null
	,leftActionBuffer: null
	,leftGeloGroup: null
	,leftAllClearManager: null
	,leftPreview: null
	,rightGarbageTray: null
	,rightGarbageManager: null
	,rightScoreManager: null
	,rightChainSimDisplay: null
	,rightChainSimAccumDisplay: null
	,rightChainSim: null
	,rightChainCounter: null
	,rightField: null
	,rightQueue: null
	,rightInputDevice: null
	,rightActionBuffer: null
	,rightGeloGroup: null
	,rightAllClearManager: null
	,rightPreview: null
	,leftState: null
	,rightState: null
	,leftBoard: null
	,rightBoard: null
	,pauseMediator: null
	,controlHintContainer: null
	,rollbackMediator: null
	,gameState: null
	,pauseMenu: null
	,createBackupBuilder: function() {
		return new game_gamestatebuilders_NetplayEndlessGameStateBuilder(new game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions(this.rule,this.isLocalOnLeft,null,new game_mediators_FrameCounter()));
	}
	,initValueBoxes: function() {
		this.garbageDropLimit = utils_ValueBox.fromValue(this.rule.garbageDropLimit);
		this.garbageConfirmGracePeriod = utils_ValueBox.fromValue(this.rule.garbageConfirmGracePeriod);
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
	}
	,initPauseMediator: function() {
		if(this.pauseMediator == null) {
			this.pauseMediator = new game_mediators_PauseMediator(function(_) {
			},function() {
			});
		}
	}
	,initControlHintContainer: function() {
		if(this.controlHintContainer == null) {
			this.controlHintContainer = new game_mediators_ControlHintContainer();
		}
		this.controlHintContainer.isVisible = save_$data_Profile.primary.trainingSettings.showControlHints;
	}
	,initRollbackMediator: function() {
		if(this.rollbackMediator == null) {
			this.rollbackMediator = new game_mediators_RollbackMediator(function() {
			},function(_) {
			});
		}
	}
	,buildRNG: function() {
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
	}
	,buildRandomizer: function() {
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
	}
	,buildParticleManager: function() {
		this.particleManager = new game_particles_ParticleManager();
	}
	,buildMarginManager: function() {
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
	}
	,buildLeftBorderColorMediator: function() {
		this.leftBorderColorMediator = new game_mediators_BorderColorMediator();
	}
	,buildLeftTargetMediator: function() {
		this.leftTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.RIGHT);
	}
	,buildRightBorderColorMediator: function() {
		this.rightBorderColorMediator = new game_mediators_BorderColorMediator();
	}
	,buildRightTargetMediator: function() {
		this.rightTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.LEFT);
	}
	,buildLeftGarbageTray: function() {
		this.leftGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildLeftGarbageManager: function() {
		this.leftGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.LEFT,this.leftGarbageTray,this.leftTargetMediator));
	}
	,buildLeftScoreManager: function() {
		this.leftScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
	}
	,buildLeftChainSimDisplay: function() {
		this.leftChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildLeftChainSimAccumDisplay: function() {
		this.leftChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildLeftChainSim: function() {
		this.leftChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.leftChainSimDisplay,this.leftChainSimAccumDisplay));
	}
	,buildLeftChainCounter: function() {
		this.leftChainCounter = new game_ChainCounter();
	}
	,buildLeftField: function() {
		this.leftField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
	}
	,buildLeftQueue: function() {
		this.leftQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
	}
	,buildLeftInputHandling: function() {
		if(this.session == null) {
			this.leftInputDevice = input_NullInputDevice.instance;
			this.leftActionBuffer = game_actionbuffers_NullActionBuffer.get_instance();
			return;
		}
		if(this.isLocalOnLeft) {
			this.leftInputDevice = input_AnyInputDevice.instance;
			this.leftActionBuffer = new game_actionbuffers_SenderActionBuffer(new game_actionbuffers_SenderActionBufferOptions(this.session,this.frameCounter,this.leftInputDevice,save_$data_Profile.primary.input.netplayDelay));
			return;
		}
		this.leftInputDevice = input_NullInputDevice.instance;
		var recvAB = new game_actionbuffers_ReceiveActionBuffer(new game_actionbuffers_ReceiveActionBufferOptions(this.frameCounter,this.rollbackMediator));
		this.leftActionBuffer = recvAB;
		this.session.onInput = $bind(recvAB,recvAB.onInput);
	}
	,buildLeftGeloGroup: function() {
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.leftGeloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.leftScoreManager,this.leftField,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance))));
	}
	,buildLeftAllClearManager: function() {
		this.leftAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.leftBorderColorMediator));
	}
	,buildLeftPreview: function() {
		this.leftPreview = new game_previews_VerticalPreview(this.leftQueue);
	}
	,buildRightGarbageTray: function() {
		this.rightGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildRightGarbageManager: function() {
		this.rightGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.RIGHT,this.rightGarbageTray,this.rightTargetMediator));
	}
	,buildRightScoreManager: function() {
		this.rightScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
	}
	,buildRightChainSimDisplay: function() {
		this.rightChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildRightChainSimAccumDisplay: function() {
		this.rightChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildRightChainSim: function() {
		this.rightChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.rightChainSimDisplay,this.rightChainSimAccumDisplay));
	}
	,buildRightChainCounter: function() {
		this.rightChainCounter = new game_ChainCounter();
	}
	,buildRightField: function() {
		this.rightField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
	}
	,buildRightQueue: function() {
		this.rightQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
	}
	,buildRightInputDevice: function() {
		this.rightInputDevice = input_NullInputDevice.instance;
	}
	,buildRightInputHandling: function() {
		if(this.session == null) {
			this.rightInputDevice = input_NullInputDevice.instance;
			this.rightActionBuffer = game_actionbuffers_NullActionBuffer.get_instance();
			return;
		}
		if(this.isLocalOnLeft) {
			this.rightInputDevice = input_NullInputDevice.instance;
			var recvAB = new game_actionbuffers_ReceiveActionBuffer(new game_actionbuffers_ReceiveActionBufferOptions(this.frameCounter,this.rollbackMediator));
			this.rightActionBuffer = recvAB;
			this.session.onInput = $bind(recvAB,recvAB.onInput);
			return;
		}
		this.rightInputDevice = input_AnyInputDevice.instance;
		this.rightActionBuffer = new game_actionbuffers_SenderActionBuffer(new game_actionbuffers_SenderActionBufferOptions(this.session,this.frameCounter,this.rightInputDevice,save_$data_Profile.primary.input.netplayDelay));
	}
	,buildRightGeloGroup: function() {
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.rightGeloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.rightScoreManager,this.rightField,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance))));
	}
	,buildRightAllClearManager: function() {
		this.rightAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.RIGHT,this.particleManager,this.rightBorderColorMediator));
	}
	,buildRightPreview: function() {
		this.rightPreview = new game_previews_VerticalPreview(this.rightQueue);
	}
	,buildLeftBoardState: function() {
		this.leftState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.leftGeloGroup,this.leftQueue,this.leftPreview,this.leftAllClearManager,this.leftScoreManager,this.leftActionBuffer,this.leftChainCounter,this.leftField,this.leftChainSim,this.leftGarbageManager));
	}
	,buildRightBoardState: function() {
		this.rightState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.RIGHT,this.particleManager,this.rightGeloGroup,this.rightQueue,this.rightPreview,this.rightAllClearManager,this.rightScoreManager,this.rightActionBuffer,this.rightChainCounter,this.rightField,this.rightChainSim,this.rightGarbageManager));
	}
	,buildLeftBoard: function() {
		this.leftBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.leftInputDevice,this.leftState));
	}
	,buildRightBoard: function() {
		this.rightBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.rightInputDevice,this.rightState));
	}
	,buildPauseMenu: function() {
		this.pauseMenu = new game_ui_PauseMenu(new game_ui_PauseMenuOptions(save_$data_Profile.primary.prefs,this.pauseMediator));
	}
	,buildGameState: function() {
		var priority = this.session != null ? this.session.localID < this.session.remoteID : true;
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_DualBoardManager(new game_boardmanagers_DualBoardManagerOptions(priority,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.LEFT,this.leftBoard)),new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.RIGHT,this.rightBoard)))),_g));
	}
	,wireMediators: function() {
		this.leftBorderColorMediator.changeColor = ($_=this.leftState,$bind($_,$_.changeBorderColor));
		this.leftTargetMediator.garbageManager = this.rightGarbageManager;
		this.rightBorderColorMediator.changeColor = ($_=this.rightState,$bind($_,$_.changeBorderColor));
		this.rightTargetMediator.garbageManager = this.leftGarbageManager;
	}
	,copyFrom: function(other) {
		this.frameCounter.copyFrom(other.frameCounter);
		this.rng.copyFrom(other.rng);
		this.randomizer.copyFrom(other.randomizer);
		this.particleManager.copyFrom(other.particleManager);
		this.marginManager.copyFrom(other.marginManager);
		this.leftBorderColorMediator = other.leftBorderColorMediator;
		this.leftTargetMediator = other.leftTargetMediator;
		this.rightBorderColorMediator = other.rightBorderColorMediator;
		this.rightTargetMediator = other.rightTargetMediator;
		this.leftGarbageTray = other.leftGarbageTray.copy();
		this.leftGarbageManager.copyFrom(other.leftGarbageManager);
		this.leftScoreManager.copyFrom(other.leftScoreManager);
		this.leftChainSimDisplay = other.leftChainSimDisplay.copy();
		this.leftChainSimAccumDisplay = other.leftChainSimAccumDisplay.copy();
		this.leftChainSim.copyFrom(other.leftChainSim);
		this.leftChainCounter.copyFrom(other.leftChainCounter);
		this.leftField.copyFrom(other.leftField);
		this.leftQueue.copyFrom(other.leftQueue);
		this.leftGeloGroup.copyFrom(other.leftGeloGroup);
		this.leftAllClearManager.copyFrom(other.leftAllClearManager);
		this.leftPreview.copyFrom(other.leftPreview);
		this.rightGarbageTray = other.rightGarbageTray.copy();
		this.rightGarbageManager.copyFrom(other.rightGarbageManager);
		this.rightScoreManager.copyFrom(other.rightScoreManager);
		this.rightChainSimDisplay = other.rightChainSimDisplay.copy();
		this.rightChainSimAccumDisplay = other.rightChainSimAccumDisplay.copy();
		this.rightChainSim.copyFrom(other.rightChainSim);
		this.rightChainCounter.copyFrom(other.rightChainCounter);
		this.rightField.copyFrom(other.rightField);
		this.rightQueue.copyFrom(other.rightQueue);
		this.rightGeloGroup.copyFrom(other.rightGeloGroup);
		this.rightAllClearManager.copyFrom(other.rightAllClearManager);
		this.rightPreview.copyFrom(other.rightPreview);
		this.leftState.copyFrom(other.leftState);
		this.rightState.copyFrom(other.rightState);
		this.controlHintContainer = other.controlHintContainer;
		return this;
	}
	,build: function() {
		this.garbageDropLimit = utils_ValueBox.fromValue(this.rule.garbageDropLimit);
		this.garbageConfirmGracePeriod = utils_ValueBox.fromValue(this.rule.garbageConfirmGracePeriod);
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
		if(this.pauseMediator == null) {
			this.pauseMediator = new game_mediators_PauseMediator(function(_) {
			},function() {
			});
		}
		if(this.controlHintContainer == null) {
			this.controlHintContainer = new game_mediators_ControlHintContainer();
		}
		this.controlHintContainer.isVisible = save_$data_Profile.primary.trainingSettings.showControlHints;
		if(this.rollbackMediator == null) {
			this.rollbackMediator = new game_mediators_RollbackMediator(function() {
			},function(_) {
			});
		}
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
		this.particleManager = new game_particles_ParticleManager();
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
		this.leftBorderColorMediator = new game_mediators_BorderColorMediator();
		this.leftTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.RIGHT);
		this.rightBorderColorMediator = new game_mediators_BorderColorMediator();
		this.rightTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.LEFT);
		this.leftGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
		this.leftGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.LEFT,this.leftGarbageTray,this.leftTargetMediator));
		this.leftScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
		this.leftChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.leftChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.leftChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.leftChainSimDisplay,this.leftChainSimAccumDisplay));
		this.leftChainCounter = new game_ChainCounter();
		this.leftField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
		this.leftQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
		if(this.session == null) {
			this.leftInputDevice = input_NullInputDevice.instance;
			this.leftActionBuffer = game_actionbuffers_NullActionBuffer.get_instance();
		} else if(this.isLocalOnLeft) {
			this.leftInputDevice = input_AnyInputDevice.instance;
			this.leftActionBuffer = new game_actionbuffers_SenderActionBuffer(new game_actionbuffers_SenderActionBufferOptions(this.session,this.frameCounter,this.leftInputDevice,save_$data_Profile.primary.input.netplayDelay));
		} else {
			this.leftInputDevice = input_NullInputDevice.instance;
			var recvAB = new game_actionbuffers_ReceiveActionBuffer(new game_actionbuffers_ReceiveActionBufferOptions(this.frameCounter,this.rollbackMediator));
			this.leftActionBuffer = recvAB;
			this.session.onInput = $bind(recvAB,recvAB.onInput);
		}
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.leftGeloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.leftScoreManager,this.leftField,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance))));
		this.leftAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.leftBorderColorMediator));
		this.leftPreview = new game_previews_VerticalPreview(this.leftQueue);
		this.rightGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
		this.rightGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.RIGHT,this.rightGarbageTray,this.rightTargetMediator));
		this.rightScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
		this.rightChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.rightChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.rightChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.rightChainSimDisplay,this.rightChainSimAccumDisplay));
		this.rightChainCounter = new game_ChainCounter();
		this.rightField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
		this.rightQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
		this.rightInputDevice = input_NullInputDevice.instance;
		if(this.session == null) {
			this.rightInputDevice = input_NullInputDevice.instance;
			this.rightActionBuffer = game_actionbuffers_NullActionBuffer.get_instance();
		} else if(this.isLocalOnLeft) {
			this.rightInputDevice = input_NullInputDevice.instance;
			var recvAB = new game_actionbuffers_ReceiveActionBuffer(new game_actionbuffers_ReceiveActionBufferOptions(this.frameCounter,this.rollbackMediator));
			this.rightActionBuffer = recvAB;
			this.session.onInput = $bind(recvAB,recvAB.onInput);
		} else {
			this.rightInputDevice = input_AnyInputDevice.instance;
			this.rightActionBuffer = new game_actionbuffers_SenderActionBuffer(new game_actionbuffers_SenderActionBufferOptions(this.session,this.frameCounter,this.rightInputDevice,save_$data_Profile.primary.input.netplayDelay));
		}
		var prefsSettings = save_$data_Profile.primary.prefs;
		this.rightGeloGroup = new game_gelogroups_GeloGroup(new game_gelogroups_GeloGroupOptions(this.physics,this.animations,this.dropSpeed,prefsSettings,this.rightScoreManager,this.rightField,new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance))));
		this.rightAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.RIGHT,this.particleManager,this.rightBorderColorMediator));
		this.rightPreview = new game_previews_VerticalPreview(this.rightQueue);
		this.leftState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.leftGeloGroup,this.leftQueue,this.leftPreview,this.leftAllClearManager,this.leftScoreManager,this.leftActionBuffer,this.leftChainCounter,this.leftField,this.leftChainSim,this.leftGarbageManager));
		this.rightState = new game_boardstates_EndlessBoardState(new game_boardstates_EndlessBoardStateOptions(save_$data_Profile.primary.endlessSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.RIGHT,this.particleManager,this.rightGeloGroup,this.rightQueue,this.rightPreview,this.rightAllClearManager,this.rightScoreManager,this.rightActionBuffer,this.rightChainCounter,this.rightField,this.rightChainSim,this.rightGarbageManager));
		this.leftBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.leftInputDevice,this.leftState));
		this.rightBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.rightInputDevice,this.rightState));
		this.pauseMenu = new game_ui_PauseMenu(new game_ui_PauseMenuOptions(save_$data_Profile.primary.prefs,this.pauseMediator));
		var priority = this.session != null ? this.session.localID < this.session.remoteID : true;
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_DualBoardManager(new game_boardmanagers_DualBoardManagerOptions(priority,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.LEFT,this.leftBoard)),new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.RIGHT,this.rightBoard)))),_g));
		this.leftBorderColorMediator.changeColor = ($_=this.leftState,$bind($_,$_.changeBorderColor));
		this.leftTargetMediator.garbageManager = this.rightGarbageManager;
		this.rightBorderColorMediator.changeColor = ($_=this.rightState,$bind($_,$_.changeBorderColor));
		this.rightTargetMediator.garbageManager = this.leftGarbageManager;
	}
	,__class__: game_gamestatebuilders_NetplayEndlessGameStateBuilder
};
var game_gamestatebuilders_TrainingGameStateBuilder = function(rule) {
	this.rule = rule;
};
$hxClasses["game.gamestatebuilders.TrainingGameStateBuilder"] = game_gamestatebuilders_TrainingGameStateBuilder;
game_gamestatebuilders_TrainingGameStateBuilder.__name__ = "game.gamestatebuilders.TrainingGameStateBuilder";
game_gamestatebuilders_TrainingGameStateBuilder.__interfaces__ = [game_gamestatebuilders_IBackupGameStateBuilder];
game_gamestatebuilders_TrainingGameStateBuilder.prototype = {
	rule: null
	,garbageDropLimit: null
	,garbageConfirmGracePeriod: null
	,softDropBonus: null
	,popCount: null
	,vanishHiddenRows: null
	,groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,physics: null
	,animations: null
	,dropSpeed: null
	,randomizeGarbage: null
	,rng: null
	,randomizer: null
	,particleManager: null
	,marginManager: null
	,frameCounter: null
	,playerBorderColorMediator: null
	,playerTargetMediator: null
	,infoTargetMediator: null
	,playerGarbageTray: null
	,playerGarbageManager: null
	,playerScoreManager: null
	,playerChainSimDisplay: null
	,playerChainSimAccumDisplay: null
	,playerChainSim: null
	,playerChainCounter: null
	,playerField: null
	,playerQueue: null
	,playerPreview: null
	,playerInputDevice: null
	,playerActionBuffer: null
	,playerGeloGroupChainSim: null
	,playerGeloGroup: null
	,playerAllClearManager: null
	,infoGarbageTray: null
	,infoGarbageManager: null
	,autoAttackChainCounter: null
	,autoAttackManager: null
	,infoChainAdvantageDisplay: null
	,infoAfterCounterDisplay: null
	,editField: null
	,infoState: null
	,playState: null
	,editState: null
	,playerBoard: null
	,infoBoard: null
	,pauseMediator: null
	,controlHintContainer: null
	,saveGameStateMediator: null
	,gameState: null
	,pauseMenu: null
	,createBackupBuilder: function() {
		return new game_gamestatebuilders_TrainingGameStateBuilder(this.rule);
	}
	,initValueBoxes: function() {
		this.garbageDropLimit = utils_ValueBox.fromValue(this.rule.garbageDropLimit);
		this.garbageConfirmGracePeriod = utils_ValueBox.fromValue(this.rule.garbageConfirmGracePeriod);
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
	}
	,initPauseMediator: function() {
		if(this.pauseMediator == null) {
			this.pauseMediator = new game_mediators_PauseMediator(function(_) {
			},function() {
			});
		}
	}
	,initControlHintContainer: function() {
		if(this.controlHintContainer == null) {
			this.controlHintContainer = new game_mediators_ControlHintContainer();
		}
		this.controlHintContainer.isVisible = save_$data_Profile.primary.trainingSettings.showControlHints;
	}
	,initSaveGameStateMediator: function() {
		if(this.saveGameStateMediator == null) {
			this.saveGameStateMediator = new game_mediators_SaveGameStateMediator(function() {
			},function() {
			});
		}
	}
	,buildRNG: function() {
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
	}
	,buildRandomizer: function() {
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
	}
	,buildParticleManager: function() {
		this.particleManager = new game_particles_ParticleManager();
	}
	,buildMarginManager: function() {
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
	}
	,buildFrameCounter: function() {
		this.frameCounter = new game_mediators_FrameCounter();
	}
	,buildPlayerBorderColorMediator: function() {
		this.playerBorderColorMediator = new game_mediators_BorderColorMediator();
	}
	,buildPlayerTargetMediator: function() {
		this.playerTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.INFO);
	}
	,buildInfoTargetMediator: function() {
		this.infoTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.LEFT);
	}
	,buildPlayerGarbageTray: function() {
		this.playerGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildPlayerGarbageManager: function() {
		this.playerGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.LEFT,this.playerGarbageTray,this.playerTargetMediator));
	}
	,buildPlayerScoreManager: function() {
		this.playerScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
	}
	,buildPlayerChainSimDisplay: function() {
		this.playerChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildPlayerChainSimAccumDisplay: function() {
		this.playerChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildPlayerChainSim: function() {
		this.playerChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.playerChainSimDisplay,this.playerChainSimAccumDisplay));
	}
	,buildPlayerChainCounter: function() {
		this.playerChainCounter = new game_ChainCounter();
	}
	,buildPlayerField: function() {
		this.playerField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
	}
	,buildPlayerQueue: function() {
		this.playerQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
	}
	,buildPlayerPreview: function() {
		this.playerPreview = new game_previews_VerticalPreview(this.playerQueue);
	}
	,buildPlayerInputDevice: function() {
		this.playerInputDevice = input_AnyInputDevice.instance;
	}
	,buildPlayerActionBuffer: function() {
		this.playerActionBuffer = new game_actionbuffers_LocalActionBuffer(new game_actionbuffers_LocalActionBufferOptions(this.frameCounter,this.playerInputDevice,save_$data_Profile.primary.input.localDelay));
	}
	,buildPlayerGeloGroupChainSim: function() {
		this.playerGeloGroupChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance));
	}
	,buildPlayerGeloGroup: function() {
		this.playerGeloGroup = new game_gelogroups_TrainingGeloGroup(new game_gelogroups_TrainingGeloGroupOptions(save_$data_Profile.primary.trainingSettings,this.physics,this.animations,this.dropSpeed,save_$data_Profile.primary.prefs,this.playerScoreManager,this.playerField,this.playerGeloGroupChainSim));
	}
	,buildPlayerAllClearManager: function() {
		this.playerAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.playerBorderColorMediator));
	}
	,buildInfoGarbageTray: function() {
		this.infoGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildInfoGarbageManager: function() {
		this.infoGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.INFO,this.infoGarbageTray,this.infoTargetMediator));
	}
	,buildAutoAttackChainCounter: function() {
		this.autoAttackChainCounter = new game_ChainCounter();
	}
	,buildAutoAttackManager: function() {
		this.autoAttackManager = new game_auto_$attack_AutoAttackManager(new game_auto_$attack_AutoAttackManagerOptions(this.popCount,this.rng,game_geometries_BoardGeometries.INFO,save_$data_Profile.primary.trainingSettings,save_$data_Profile.primary.prefs,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.infoGarbageManager,this.autoAttackChainCounter,this.particleManager));
	}
	,buildInfoChainAdvantageDisplay: function() {
		this.infoChainAdvantageDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildInfoAfterCounterDisplay: function() {
		this.infoAfterCounterDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
	}
	,buildInfoState: function() {
		this.infoState = new game_boardstates_TrainingInfoBoardState(new game_boardstates_TrainingInfoBoardStateOptions(this.popCount,game_geometries_BoardGeometries.INFO,this.marginManager,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),save_$data_Profile.primary.trainingSettings,this.infoChainAdvantageDisplay,this.infoAfterCounterDisplay,this.infoGarbageManager,save_$data_Profile.primary.prefs,this.autoAttackManager,this.playerScoreManager,this.playerChainSim));
	}
	,buildPlayState: function() {
		this.playState = new game_boardstates_TrainingBoardState(new game_boardstates_TrainingBoardStateOptions(save_$data_Profile.primary.trainingSettings,this.infoState,this.autoAttackManager,save_$data_Profile.primary.trainingSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.playerGeloGroup,this.playerQueue,this.playerPreview,this.playerAllClearManager,this.playerScoreManager,this.playerActionBuffer,this.playerChainCounter,this.playerField,this.playerChainSim,this.playerGarbageManager));
	}
	,buildEditField: function() {
		this.editField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
	}
	,buildEditState: function() {
		this.editState = new game_boardstates_EditingBoardState(new game_boardstates_EditingBoardStateOptions(game_geometries_BoardGeometries.LEFT,this.playerInputDevice,this.playerChainSim,this.playerChainCounter,save_$data_Profile.primary.prefs,this.editField));
	}
	,buildPlayerBoard: function() {
		this.playerBoard = new game_boards_TrainingBoard(new game_boards_TrainingBoardOptions(this.pauseMediator,this.playerInputDevice,this.infoState,this.controlHintContainer,this.saveGameStateMediator,this.playState,this.editState));
	}
	,buildInfoBoard: function() {
		this.infoBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.playerInputDevice,this.infoState));
	}
	,buildPauseMenu: function() {
		this.pauseMenu = new game_ui_TrainingPauseMenu(new game_ui_TrainingPauseMenuOptions(this.popCount,this.vanishHiddenRows,this.dropSpeed,this.physics,this.powerTableType,this.colorBonusTableType,this.groupBonusTableType,this.dropBonusGarbage,this.allClearReward,this.randomizer,this.playerQueue,this.playState,this.playerBoard,this.playerAllClearManager,this.playerChainSim,this.marginManager,save_$data_Profile.primary.trainingSettings,this.playerGarbageManager,this.infoGarbageManager,this.controlHintContainer,this.autoAttackManager,save_$data_Profile.primary.prefs,this.pauseMediator));
	}
	,buildGameState: function() {
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_DualBoardManager(new game_boardmanagers_DualBoardManagerOptions(true,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.LEFT,this.playerBoard)),new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.INFO,this.infoBoard)))),_g));
	}
	,wireMediators: function() {
		this.playerBorderColorMediator.changeColor = ($_=this.playState,$bind($_,$_.changeBorderColor));
		this.playerTargetMediator.garbageManager = this.infoGarbageManager;
		this.infoTargetMediator.garbageManager = this.playerGarbageManager;
	}
	,copyFrom: function(other) {
		this.rng.copyFrom(other.rng);
		this.randomizer.copyFrom(other.randomizer);
		this.particleManager.copyFrom(other.particleManager);
		this.marginManager.copyFrom(other.marginManager);
		this.frameCounter.copyFrom(other.frameCounter);
		this.playerGarbageTray = other.playerGarbageTray.copy();
		this.playerGarbageManager.copyFrom(other.playerGarbageManager);
		this.playerScoreManager.copyFrom(other.playerScoreManager);
		this.playerChainSimDisplay = other.playerChainSimDisplay.copy();
		this.playerChainSimAccumDisplay = other.playerChainSimAccumDisplay.copy();
		this.playerChainSim.copyFrom(other.playerChainSim);
		this.playerChainCounter.copyFrom(other.playerChainCounter);
		this.playerField.copyFrom(other.playerField);
		this.playerQueue.copyFrom(other.playerQueue);
		this.playerPreview.copyFrom(other.playerPreview);
		this.playerInputDevice = other.playerInputDevice;
		this.playerGeloGroupChainSim.copyFrom(other.playerGeloGroupChainSim);
		this.playerGeloGroup.copyFrom(other.playerGeloGroup);
		this.playerAllClearManager.copyFrom(other.playerAllClearManager);
		this.infoGarbageTray = other.infoGarbageTray.copy();
		this.infoGarbageManager.copyFrom(other.infoGarbageManager);
		this.autoAttackChainCounter.copyFrom(other.autoAttackChainCounter);
		this.autoAttackManager.copyFrom(other.autoAttackManager);
		this.infoChainAdvantageDisplay = other.infoChainAdvantageDisplay.copy();
		this.infoAfterCounterDisplay = other.infoAfterCounterDisplay.copy();
		this.editField.copyFrom(other.editField);
		this.infoState.copyFrom(other.infoState);
		this.playState.copyFrom(other.playState);
		this.editState.copyFrom(other.editState);
		this.playerBoard.copyFrom(other.playerBoard);
		this.infoBoard.copyFrom(other.infoBoard);
		this.controlHintContainer = other.controlHintContainer;
		return this;
	}
	,build: function() {
		this.garbageDropLimit = utils_ValueBox.fromValue(this.rule.garbageDropLimit);
		this.garbageConfirmGracePeriod = utils_ValueBox.fromValue(this.rule.garbageConfirmGracePeriod);
		this.softDropBonus = utils_ValueBox.fromValue(this.rule.softDropBonus);
		this.popCount = utils_ValueBox.fromValue(this.rule.popCount);
		this.vanishHiddenRows = utils_ValueBox.fromValue(this.rule.vanishHiddenRows);
		this.groupBonusTableType = utils_ValueBox.fromValue(this.rule.groupBonusTableType);
		this.colorBonusTableType = utils_ValueBox.fromValue(this.rule.colorBonusTableType);
		this.powerTableType = utils_ValueBox.fromValue(this.rule.powerTableType);
		this.dropBonusGarbage = utils_ValueBox.fromValue(this.rule.dropBonusGarbage);
		this.allClearReward = utils_ValueBox.fromValue(this.rule.allClearReward);
		this.physics = utils_ValueBox.fromValue(this.rule.physics);
		this.animations = utils_ValueBox.fromValue(this.rule.animations);
		this.dropSpeed = utils_ValueBox.fromValue(this.rule.dropSpeed);
		this.randomizeGarbage = utils_ValueBox.fromValue(this.rule.randomizeGarbage);
		if(this.pauseMediator == null) {
			this.pauseMediator = new game_mediators_PauseMediator(function(_) {
			},function() {
			});
		}
		if(this.controlHintContainer == null) {
			this.controlHintContainer = new game_mediators_ControlHintContainer();
		}
		this.controlHintContainer.isVisible = save_$data_Profile.primary.trainingSettings.showControlHints;
		if(this.saveGameStateMediator == null) {
			this.saveGameStateMediator = new game_mediators_SaveGameStateMediator(function() {
			},function() {
			});
		}
		this.rng = new game_copying_CopyableRNG(this.rule.rngSeed);
		this.randomizer = new game_randomizers_Randomizer(new game_randomizers_RandomizerOptions(this.rng,save_$data_Profile.primary.prefs));
		this.randomizer.currentPool = 4;
		this.randomizer.generatePools(game_randomizers_RandomizerType.TSU);
		this.particleManager = new game_particles_ParticleManager();
		this.marginManager = new game_rules_MarginTimeManager(this.rule.marginTime,this.rule.targetPoints);
		this.frameCounter = new game_mediators_FrameCounter();
		this.playerBorderColorMediator = new game_mediators_BorderColorMediator();
		this.playerTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.INFO);
		this.infoTargetMediator = new game_mediators_GarbageTargetMediator(game_geometries_BoardGeometries.LEFT);
		this.playerGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
		this.playerGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.LEFT,this.playerGarbageTray,this.playerTargetMediator));
		this.playerScoreManager = new game_ScoreManager(new game_ScoreManagerOptions(this.softDropBonus,game_geometries_BoardOrientation.LEFT));
		this.playerChainSimDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.playerChainSimAccumDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.playerChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.playerChainSimDisplay,this.playerChainSimAccumDisplay));
		this.playerChainCounter = new game_ChainCounter();
		this.playerField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
		this.playerQueue = new game_Queue(this.randomizer.createQueueData(game_Dropsets.CLASSICAL));
		this.playerPreview = new game_previews_VerticalPreview(this.playerQueue);
		this.playerInputDevice = input_AnyInputDevice.instance;
		this.playerActionBuffer = new game_actionbuffers_LocalActionBuffer(new game_actionbuffers_LocalActionBufferOptions(this.frameCounter,this.playerInputDevice,save_$data_Profile.primary.input.localDelay));
		this.playerGeloGroupChainSim = new game_simulation_ChainSimulator(new game_simulation_ChainSimulatorOptions(this.popCount,this.vanishHiddenRows,game_simulation_NullLinkInfoBuilder.get_instance(),game_garbage_trays_NullGarbageTray.instance,game_garbage_trays_NullGarbageTray.instance));
		this.playerGeloGroup = new game_gelogroups_TrainingGeloGroup(new game_gelogroups_TrainingGeloGroupOptions(save_$data_Profile.primary.trainingSettings,this.physics,this.animations,this.dropSpeed,save_$data_Profile.primary.prefs,this.playerScoreManager,this.playerField,this.playerGeloGroupChainSim));
		this.playerAllClearManager = new game_AllClearManager(new game_AllClearManagerOptions(this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.playerBorderColorMediator));
		this.infoGarbageTray = game_garbage_trays_CenterGarbageTray.create(save_$data_Profile.primary.prefs);
		this.infoGarbageManager = new game_garbage_GarbageManager(new game_garbage_GarbageManagerOptions(this.garbageDropLimit,this.garbageConfirmGracePeriod,this.rng,save_$data_Profile.primary.prefs,this.particleManager,game_geometries_BoardGeometries.INFO,this.infoGarbageTray,this.infoTargetMediator));
		this.autoAttackChainCounter = new game_ChainCounter();
		this.autoAttackManager = new game_auto_$attack_AutoAttackManager(new game_auto_$attack_AutoAttackManagerOptions(this.popCount,this.rng,game_geometries_BoardGeometries.INFO,save_$data_Profile.primary.trainingSettings,save_$data_Profile.primary.prefs,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),this.infoGarbageManager,this.autoAttackChainCounter,this.particleManager));
		this.infoChainAdvantageDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.infoAfterCounterDisplay = game_garbage_trays_GarbageTray.create(save_$data_Profile.primary.prefs);
		this.infoState = new game_boardstates_TrainingInfoBoardState(new game_boardstates_TrainingInfoBoardStateOptions(this.popCount,game_geometries_BoardGeometries.INFO,this.marginManager,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(this.groupBonusTableType,this.colorBonusTableType,this.powerTableType,this.dropBonusGarbage,this.allClearReward,this.marginManager)),save_$data_Profile.primary.trainingSettings,this.infoChainAdvantageDisplay,this.infoAfterCounterDisplay,this.infoGarbageManager,save_$data_Profile.primary.prefs,this.autoAttackManager,this.playerScoreManager,this.playerChainSim));
		this.playState = new game_boardstates_TrainingBoardState(new game_boardstates_TrainingBoardStateOptions(save_$data_Profile.primary.trainingSettings,this.infoState,this.autoAttackManager,save_$data_Profile.primary.trainingSettings,this.randomizer,this.marginManager,this.animations,this.randomizeGarbage,save_$data_Profile.primary.prefs,this.rng,game_geometries_BoardGeometries.LEFT,this.particleManager,this.playerGeloGroup,this.playerQueue,this.playerPreview,this.playerAllClearManager,this.playerScoreManager,this.playerActionBuffer,this.playerChainCounter,this.playerField,this.playerChainSim,this.playerGarbageManager));
		this.editField = new game_fields_Field(new game_fields_FieldOptions(save_$data_Profile.primary.prefs,6,12,5,1));
		this.editState = new game_boardstates_EditingBoardState(new game_boardstates_EditingBoardStateOptions(game_geometries_BoardGeometries.LEFT,this.playerInputDevice,this.playerChainSim,this.playerChainCounter,save_$data_Profile.primary.prefs,this.editField));
		this.playerBoard = new game_boards_TrainingBoard(new game_boards_TrainingBoardOptions(this.pauseMediator,this.playerInputDevice,this.infoState,this.controlHintContainer,this.saveGameStateMediator,this.playState,this.editState));
		this.infoBoard = new game_boards_SingleStateBoard(new game_boards_SingleStateBoardOptions(this.pauseMediator,this.playerInputDevice,this.infoState));
		this.pauseMenu = new game_ui_TrainingPauseMenu(new game_ui_TrainingPauseMenuOptions(this.popCount,this.vanishHiddenRows,this.dropSpeed,this.physics,this.powerTableType,this.colorBonusTableType,this.groupBonusTableType,this.dropBonusGarbage,this.allClearReward,this.randomizer,this.playerQueue,this.playState,this.playerBoard,this.playerAllClearManager,this.playerChainSim,this.marginManager,save_$data_Profile.primary.trainingSettings,this.playerGarbageManager,this.infoGarbageManager,this.controlHintContainer,this.autoAttackManager,save_$data_Profile.primary.prefs,this.pauseMediator));
		var _g = this.marginManager;
		this.gameState = new game_states_GameState(new game_states_GameStateOptions(this.particleManager,this.frameCounter,new game_boardmanagers_DualBoardManager(new game_boardmanagers_DualBoardManagerOptions(true,new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.LEFT,this.playerBoard)),new game_boardmanagers_SingleBoardManager(new game_boardmanagers_SingleBoardManagerOptions(game_geometries_BoardGeometries.INFO,this.infoBoard)))),_g));
		this.playerBorderColorMediator.changeColor = ($_=this.playState,$bind($_,$_.changeBorderColor));
		this.playerTargetMediator.garbageManager = this.infoGarbageManager;
		this.infoTargetMediator.garbageManager = this.playerGarbageManager;
	}
	,__class__: game_gamestatebuilders_TrainingGameStateBuilder
};
var game_garbage_GarbageIcon = $hxEnums["game.garbage.GarbageIcon"] = { __ename__:"game.garbage.GarbageIcon",__constructs__:null
	,SMALL: {_hx_name:"SMALL",_hx_index:0,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,LARGE: {_hx_name:"LARGE",_hx_index:1,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,ROCK: {_hx_name:"ROCK",_hx_index:2,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,STAR: {_hx_name:"STAR",_hx_index:3,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,MOON: {_hx_name:"MOON",_hx_index:4,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,CROWN: {_hx_name:"CROWN",_hx_index:5,__enum__:"game.garbage.GarbageIcon",toString:$estr}
	,COMET: {_hx_name:"COMET",_hx_index:6,__enum__:"game.garbage.GarbageIcon",toString:$estr}
};
game_garbage_GarbageIcon.__constructs__ = [game_garbage_GarbageIcon.SMALL,game_garbage_GarbageIcon.LARGE,game_garbage_GarbageIcon.ROCK,game_garbage_GarbageIcon.STAR,game_garbage_GarbageIcon.MOON,game_garbage_GarbageIcon.CROWN,game_garbage_GarbageIcon.COMET];
var utils_Point = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["utils.Point"] = utils_Point;
utils_Point.__name__ = "utils.Point";
utils_Point.prototype = {
	x: null
	,y: null
	,add: function(rhs) {
		return new utils_Point(this.x + rhs.x,this.y + rhs.y);
	}
	,__class__: utils_Point
};
var utils_Geometry = function(width,height,x,y) {
	utils_Point.call(this,x,y);
	this.width = width;
	this.height = height;
};
$hxClasses["utils.Geometry"] = utils_Geometry;
utils_Geometry.__name__ = "utils.Geometry";
utils_Geometry.__super__ = utils_Point;
utils_Geometry.prototype = $extend(utils_Point.prototype,{
	width: null
	,height: null
	,__class__: utils_Geometry
});
var game_garbage_GarbageManagerOptions = function(garbageDropLimit,confirmGracePeriod,rng,prefsSettings,particleManager,geometries,tray,target) {
	this.garbageDropLimit = garbageDropLimit;
	this.confirmGracePeriod = confirmGracePeriod;
	this.rng = rng;
	this.prefsSettings = prefsSettings;
	this.particleManager = particleManager;
	this.geometries = geometries;
	this.tray = tray;
	this.target = target;
};
$hxClasses["game.garbage.GarbageManagerOptions"] = game_garbage_GarbageManagerOptions;
game_garbage_GarbageManagerOptions.__name__ = "game.garbage.GarbageManagerOptions";
game_garbage_GarbageManagerOptions.prototype = {
	garbageDropLimit: null
	,confirmGracePeriod: null
	,rng: null
	,prefsSettings: null
	,particleManager: null
	,geometries: null
	,tray: null
	,target: null
	,__class__: game_garbage_GarbageManagerOptions
};
var game_garbage_IGarbageManager = function() { };
$hxClasses["game.garbage.IGarbageManager"] = game_garbage_IGarbageManager;
game_garbage_IGarbageManager.__name__ = "game.garbage.IGarbageManager";
game_garbage_IGarbageManager.__isInterface__ = true;
game_garbage_IGarbageManager.__interfaces__ = [hxbit_Serializable,game_copying_ICopyFrom];
game_garbage_IGarbageManager.prototype = {
	get_droppableGarbage: null
	,canReceiveGarbage: null
	,sendGarbage: null
	,dropGarbage: null
	,confirmGarbage: null
	,clear: null
	,addDesyncInfo: null
	,update: null
	,render: null
	,copyFrom: null
	,__class__: game_garbage_IGarbageManager
	,__properties__: {get_droppableGarbage:"get_droppableGarbage"}
};
var game_garbage_GarbageManager = function(opts) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.garbageDropLimit = opts.garbageDropLimit;
	this.confirmGracePeriod = opts.confirmGracePeriod;
	this.rng = opts.rng;
	this.prefsSettings = opts.prefsSettings;
	this.particleManager = opts.particleManager;
	this.geometries = opts.geometries;
	this.tray = opts.tray;
	this.target = opts.target;
	this.currentGarbage = 0;
	this.confirmedGarbage = 0;
	this.graceT = 0;
	this.canReceiveGarbage = true;
	this.startAnimation();
};
$hxClasses["game.garbage.GarbageManager"] = game_garbage_GarbageManager;
game_garbage_GarbageManager.__name__ = "game.garbage.GarbageManager";
game_garbage_GarbageManager.__interfaces__ = [game_garbage_IGarbageManager];
game_garbage_GarbageManager.doSerialize = function(__ctx,__this) {
	__ctx.addInt(__this.currentGarbage);
};
game_garbage_GarbageManager.doUnserialize = function(__ctx,__this) {
	__this.currentGarbage = __ctx.getInt();
};
game_garbage_GarbageManager.prototype = {
	garbageDropLimit: null
	,confirmGracePeriod: null
	,rng: null
	,prefsSettings: null
	,particleManager: null
	,geometries: null
	,tray: null
	,target: null
	,currentGarbage: null
	,confirmedGarbage: null
	,graceT: null
	,canReceiveGarbage: null
	,get_droppableGarbage: function() {
		if(this.graceT > 0) {
			return 0;
		}
		return Math.min(this.confirmedGarbage,utils_ValueBox.toValue(this.garbageDropLimit)) | 0;
	}
	,reduceGarbage: function(amount) {
		this.currentGarbage = Math.max(0,this.currentGarbage - amount) | 0;
		this.confirmedGarbage = Math.min(this.currentGarbage,Math.max(this.confirmedGarbage,0)) | 0;
	}
	,addCollisionParticle: function(absTrayCenter,color) {
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			var tmp = this.particleManager;
			var _g1 = absTrayCenter.x;
			var _g2 = absTrayCenter.y;
			var _g3 = this.rng.data.GetIn(20,30);
			tmp.add(game_particles_ParticleLayer.FRONT,game_particles_PixelFloatParticle.create(new game_particles_PixelFloatParticleOptions(Math.cos(i / 4) * this.rng.data.GetIn(8,12),Math.sin(i / 4) * this.rng.data.GetIn(8,12),_g3,color,32 * this.rng.data.GetFloatIn(0.25,1.75),_g1,_g2)));
		}
	}
	,sendAttackBullet: function(beginners) {
		var _gthis = this;
		var absPos = this.geometries.absolutePosition;
		var control;
		switch(this.geometries.orientation._hx_index) {
		case 0:
			control = new utils_Point(0,0);
			break;
		case 1:
			control = new utils_Point(game_geometries_BoardGeometries.WIDTH,0);
			break;
		}
		var _g = 0;
		while(_g < beginners.length) {
			var b = beginners[_g];
			++_g;
			var targetGeometries = this.target.geometries;
			var trayCenter = targetGeometries.garbageTray.add(new utils_Point(game_geometries_BoardGeometries.CENTER.x,32));
			var absTrayCenter = [targetGeometries.absolutePosition.add(trayCenter)];
			var primaryColor = [this.prefsSettings.primaryColors.h[b.color]];
			this.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_GarbageBulletParticle.create(new game_particles_GarbageBulletParticleOptions(absPos.add(new utils_Point(b.x,b.y)),absPos.add(control),absTrayCenter[0],1,1,30,primaryColor[0],(function(primaryColor,absTrayCenter) {
				return function() {
					_gthis.target.startAnimation();
					_gthis.addCollisionParticle(absTrayCenter[0],primaryColor[0]);
				};
			})(primaryColor,absTrayCenter))));
		}
	}
	,sendOffsetBullet: function(beginners) {
		var _gthis = this;
		var absPos = this.geometries.absolutePosition;
		var scale = this.geometries.scale;
		var absCenter = absPos.add(game_geometries_BoardGeometries.CENTER);
		var trayCenter = this.geometries.garbageTray.add(new utils_Point(game_geometries_BoardGeometries.CENTER.x,32));
		var absTrayCenter = absPos.add(trayCenter);
		var _g = 0;
		while(_g < beginners.length) {
			var b = beginners[_g];
			++_g;
			var absBegin = absPos.add(new utils_Point(b.x,b.y));
			var primaryColor = [this.prefsSettings.primaryColors.h[b.color]];
			this.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_GarbageBulletParticle.create(new game_particles_GarbageBulletParticleOptions(absBegin,absCenter,absTrayCenter,scale,scale,30,primaryColor[0],(function(primaryColor) {
				return function() {
					_gthis.startAnimation();
					_gthis.addCollisionParticle(absTrayCenter,primaryColor[0]);
				};
			})(primaryColor))));
		}
	}
	,sendCounterBullet: function(beginners) {
		var _gthis = this;
		var absPos = this.geometries.absolutePosition;
		var scale = this.geometries.scale;
		var absCenter = absPos.add(game_geometries_BoardGeometries.CENTER);
		var trayCenter = this.geometries.garbageTray.add(new utils_Point(game_geometries_BoardGeometries.CENTER.x,32));
		var absTrayCenter = absPos.add(trayCenter);
		var attackControl = new utils_Point(720.,0);
		var targetGeometries = this.target.geometries;
		var targetTrayCenter = targetGeometries.garbageTray.add(new utils_Point(game_geometries_BoardGeometries.CENTER.x,0));
		var absTargetTrayCenter = targetGeometries.absolutePosition.add(targetTrayCenter);
		var _g = 0;
		while(_g < beginners.length) {
			var b = beginners[_g];
			++_g;
			var primaryColor = [this.prefsSettings.primaryColors.h[b.color]];
			var absBegin = absPos.add(new utils_Point(b.x,b.y));
			this.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_GarbageBulletParticle.create(new game_particles_GarbageBulletParticleOptions(absBegin,absCenter,absTrayCenter,scale,scale,30,primaryColor[0],(function(primaryColor) {
				return function() {
					_gthis.startAnimation();
					_gthis.addCollisionParticle(absTrayCenter,primaryColor[0]);
					_gthis.particleManager.add(game_particles_ParticleLayer.FRONT,game_particles_GarbageBulletParticle.create(new game_particles_GarbageBulletParticleOptions(absTrayCenter,attackControl,absTargetTrayCenter,scale,targetGeometries.scale,20,primaryColor[0],(function(primaryColor) {
						return function() {
							_gthis.target.startAnimation();
							_gthis.addCollisionParticle(absTargetTrayCenter,primaryColor[0]);
						};
					})(primaryColor))));
				};
			})(primaryColor))));
		}
	}
	,receiveGarbage: function(amount) {
		this.currentGarbage += amount;
	}
	,setConfirmedGarbage: function(amount) {
		if(amount == 0) {
			return;
		}
		this.confirmedGarbage += Math.min(amount,this.currentGarbage) | 0;
		this.graceT = utils_ValueBox.toValue(this.confirmGracePeriod);
	}
	,startAnimation: function() {
		this.tray.startAnimation(this.currentGarbage);
	}
	,sendGarbage: function(amount,beginners) {
		if(amount == 0) {
			return;
		}
		var diff = amount - this.currentGarbage;
		if(this.currentGarbage == 0) {
			this.target.receiveGarbage(amount);
			this.sendAttackBullet(beginners);
		} else if(diff >= 0) {
			this.reduceGarbage(this.currentGarbage);
			if(diff > 0) {
				this.target.receiveGarbage(diff);
				this.sendCounterBullet(beginners);
			}
		} else if(diff < 0) {
			this.reduceGarbage(amount);
			this.sendOffsetBullet(beginners);
		}
	}
	,dropGarbage: function(amount) {
		this.reduceGarbage(amount);
		this.startAnimation();
	}
	,confirmGarbage: function(amount) {
		this.target.setConfirmedGarbage(amount);
	}
	,clear: function() {
		this.reduceGarbage(this.currentGarbage);
		this.startAnimation();
	}
	,addDesyncInfo: function(ctx) {
		ctx.addInt(this.currentGarbage);
	}
	,update: function() {
		this.tray.update();
		if(this.graceT > 0) {
			this.graceT--;
		}
	}
	,render: function(g,x,y,alpha) {
		this.tray.render(g,x,y,alpha);
	}
	,copyFrom: function(other) {
		this.currentGarbage = other.currentGarbage;
		this.confirmedGarbage = other.confirmedGarbage;
		this.graceT = other.graceT;
		this.canReceiveGarbage = other.canReceiveGarbage;
		return this;
	}
	,__uid: null
	,getCLID: function() {
		return game_garbage_GarbageManager.__clid;
	}
	,serialize: function(__ctx) {
		game_garbage_GarbageManager.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("currentGarbage");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(game_garbage_GarbageManager.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_garbage_GarbageManager.doUnserialize(__ctx,this);
	}
	,__class__: game_garbage_GarbageManager
	,__properties__: {get_droppableGarbage:"get_droppableGarbage"}
};
var game_garbage_NullGarbageManager = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.canReceiveGarbage = false;
};
$hxClasses["game.garbage.NullGarbageManager"] = game_garbage_NullGarbageManager;
game_garbage_NullGarbageManager.__name__ = "game.garbage.NullGarbageManager";
game_garbage_NullGarbageManager.__interfaces__ = [game_garbage_IGarbageManager];
game_garbage_NullGarbageManager.__properties__ = {get_instance:"get_instance"};
game_garbage_NullGarbageManager.get_instance = function() {
	if(game_garbage_NullGarbageManager.instance == null) {
		game_garbage_NullGarbageManager.instance = new game_garbage_NullGarbageManager();
	}
	return game_garbage_NullGarbageManager.instance;
};
game_garbage_NullGarbageManager.doSerialize = function(__ctx,__this) {
};
game_garbage_NullGarbageManager.doUnserialize = function(__ctx,__this) {
};
game_garbage_NullGarbageManager.prototype = {
	canReceiveGarbage: null
	,get_droppableGarbage: function() {
		return 0;
	}
	,init: function() {
	}
	,sendGarbage: function(amount,beginners) {
	}
	,dropGarbage: function(amount) {
	}
	,confirmGarbage: function(amount) {
	}
	,clear: function() {
	}
	,addDesyncInfo: function(ctx) {
	}
	,update: function() {
	}
	,render: function(g,x,y,alpha) {
	}
	,copyFrom: function(other) {
		return this;
	}
	,__uid: null
	,getCLID: function() {
		return game_garbage_NullGarbageManager.__clid;
	}
	,serialize: function(__ctx) {
		game_garbage_NullGarbageManager.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.isFinal = hxbit_Serializer.isClassFinal(game_garbage_NullGarbageManager.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.canReceiveGarbage = false;
	}
	,unserialize: function(__ctx) {
		game_garbage_NullGarbageManager.doUnserialize(__ctx,this);
	}
	,__class__: game_garbage_NullGarbageManager
	,__properties__: {get_droppableGarbage:"get_droppableGarbage"}
};
var game_garbage_trays_IGarbageTray = function() { };
$hxClasses["game.garbage.trays.IGarbageTray"] = game_garbage_trays_IGarbageTray;
game_garbage_trays_IGarbageTray.__name__ = "game.garbage.trays.IGarbageTray";
game_garbage_trays_IGarbageTray.__isInterface__ = true;
game_garbage_trays_IGarbageTray.__interfaces__ = [game_copying_ICopy];
game_garbage_trays_IGarbageTray.prototype = {
	startAnimation: null
	,update: null
	,render: null
	,copyFrom: null
	,__class__: game_garbage_trays_IGarbageTray
};
var game_garbage_trays_GarbageTray = function(prefsSettings) {
	this.prefsSettings = prefsSettings;
	this.display = new game_copying_ConstantCopyableArray([]);
};
$hxClasses["game.garbage.trays.GarbageTray"] = game_garbage_trays_GarbageTray;
game_garbage_trays_GarbageTray.__name__ = "game.garbage.trays.GarbageTray";
game_garbage_trays_GarbageTray.__interfaces__ = [game_garbage_trays_IGarbageTray];
game_garbage_trays_GarbageTray.create = function(prefsSettings) {
	var a = new game_garbage_trays_GarbageTray(prefsSettings);
	game_garbage_trays_GarbageTray.init(a);
	return a;
};
game_garbage_trays_GarbageTray.init = function(a) {
	a.state = 0;
};
game_garbage_trays_GarbageTray.prototype = {
	prefsSettings: null
	,display: null
	,state: null
	,copy: function() {
		return new game_garbage_trays_GarbageTray(this.prefsSettings).copyFrom(this);
	}
	,pushIcon: function(garbage,divisor,icon) {
		var _g = 0;
		var _g1 = garbage / divisor | 0;
		while(_g < _g1) {
			var _ = _g++;
			this.display.data.push(icon);
		}
		return garbage % divisor | 0;
	}
	,updateDisplay: function(garbage) {
		var d = this.display.data;
		d.length = 0;
		var current = garbage;
		if(!this.prefsSettings.capAtCrowns) {
			current = this.pushIcon(current,1440,game_garbage_GarbageIcon.COMET);
		}
		current = this.pushIcon(current,720,game_garbage_GarbageIcon.CROWN);
		current = this.pushIcon(current,360,game_garbage_GarbageIcon.MOON);
		current = this.pushIcon(current,180,game_garbage_GarbageIcon.STAR);
		current = this.pushIcon(current,30,game_garbage_GarbageIcon.ROCK);
		current = this.pushIcon(current,6,game_garbage_GarbageIcon.LARGE);
		current = this.pushIcon(current,1,game_garbage_GarbageIcon.SMALL);
		if(d.length > 6) {
			d.length = 6;
		}
	}
	,updateClosingState: function() {
	}
	,updateOpeningState: function() {
	}
	,startAnimation: function(garbage) {
		this.updateDisplay(garbage);
	}
	,update: function() {
		switch(this.state) {
		case 0:
			break;
		case 1:
			this.updateClosingState();
			break;
		case 2:
			this.updateOpeningState();
			break;
		}
	}
	,render: function(g,x,y,alpha) {
		var _g = 0;
		var _g1 = this.display.data.length;
		while(_g < _g1) {
			var i = _g++;
			var icon = game_garbage_GarbageIcon_GARBAGE_ICON_GEOMETRIES.get(this.display.data[i]);
			g.drawSubImage(kha_Assets.images.pixel,x + i * 64,y,icon.x,icon.y,icon.width,icon.height);
		}
	}
	,copyFrom: function(other) {
		this.display.copyFrom(other.display);
		this.state = other.state;
		return this;
	}
	,__class__: game_garbage_trays_GarbageTray
};
var game_garbage_trays_CenterGarbageTray = function(prefsSettings) {
	game_garbage_trays_GarbageTray.call(this,prefsSettings);
};
$hxClasses["game.garbage.trays.CenterGarbageTray"] = game_garbage_trays_CenterGarbageTray;
game_garbage_trays_CenterGarbageTray.__name__ = "game.garbage.trays.CenterGarbageTray";
game_garbage_trays_CenterGarbageTray.create = function(prefsSettings) {
	var a = new game_garbage_trays_CenterGarbageTray(prefsSettings);
	game_garbage_trays_CenterGarbageTray.init(a);
	return a;
};
game_garbage_trays_CenterGarbageTray.init = function(a) {
	game_garbage_trays_GarbageTray.init(a);
	a.lastScaleX = 0;
	a.scaleX = 0;
	a.garbage = 0;
	a.state = 2;
};
game_garbage_trays_CenterGarbageTray.__super__ = game_garbage_trays_GarbageTray;
game_garbage_trays_CenterGarbageTray.prototype = $extend(game_garbage_trays_GarbageTray.prototype,{
	lastScaleX: null
	,scaleX: null
	,garbage: null
	,copy: function() {
		return new game_garbage_trays_CenterGarbageTray(this.prefsSettings).copyFrom(this);
	}
	,updateClosingState: function() {
		if(this.scaleX > 0) {
			this.scaleX = Math.max(this.scaleX - 0.125,0);
		} else {
			this.updateDisplay(this.garbage);
			this.state = 2;
		}
	}
	,updateOpeningState: function() {
		if(this.scaleX < 1) {
			this.scaleX = Math.min(this.scaleX + 0.125,1);
		} else {
			this.state = 0;
		}
	}
	,startAnimation: function(garbage) {
		this.garbage = garbage;
		this.state = 1;
	}
	,update: function() {
		this.lastScaleX = this.scaleX;
		game_garbage_trays_GarbageTray.prototype.update.call(this);
	}
	,render: function(g,x,y,alpha) {
		var min = this.lastScaleX;
		var lerpScaleX = min + (this.scaleX - min) * alpha;
		var _g = 0;
		var _g1 = this.display.data.length;
		while(_g < _g1) {
			var i = _g++;
			var icon = game_garbage_GarbageIcon_GARBAGE_ICON_GEOMETRIES.get(this.display.data[i]);
			var iconX = game_geometries_BoardGeometries.CENTER.x + (i - 3) * 64 * lerpScaleX;
			g.drawSubImage(kha_Assets.images.pixel,x + iconX,y,icon.x,icon.y,icon.width,icon.height);
		}
	}
	,copyFrom: function(other) {
		game_garbage_trays_GarbageTray.prototype.copyFrom.call(this,other);
		this.lastScaleX = other.lastScaleX;
		this.scaleX = other.scaleX;
		this.garbage = other.garbage;
		return this;
	}
	,__class__: game_garbage_trays_CenterGarbageTray
});
var game_garbage_trays_NullGarbageTray = function() {
};
$hxClasses["game.garbage.trays.NullGarbageTray"] = game_garbage_trays_NullGarbageTray;
game_garbage_trays_NullGarbageTray.__name__ = "game.garbage.trays.NullGarbageTray";
game_garbage_trays_NullGarbageTray.__interfaces__ = [game_garbage_trays_IGarbageTray];
game_garbage_trays_NullGarbageTray.prototype = {
	copy: function() {
		return game_garbage_trays_NullGarbageTray.instance;
	}
	,startAnimation: function(garbage) {
	}
	,update: function() {
	}
	,render: function(g,x,y,alpha) {
	}
	,copyFrom: function(other) {
		return this;
	}
	,__class__: game_garbage_trays_NullGarbageTray
};
var game_gelogroups_GeloGroupState = $hxEnums["game.gelogroups.GeloGroupState"] = { __ename__:"game.gelogroups.GeloGroupState",__constructs__:null
	,CONTROLLING: {_hx_name:"CONTROLLING",_hx_index:0,__enum__:"game.gelogroups.GeloGroupState",toString:$estr}
	,SPLITTING: {_hx_name:"SPLITTING",_hx_index:1,__enum__:"game.gelogroups.GeloGroupState",toString:$estr}
};
game_gelogroups_GeloGroupState.__constructs__ = [game_gelogroups_GeloGroupState.CONTROLLING,game_gelogroups_GeloGroupState.SPLITTING];
var game_gelogroups_GeloGroupOptions = function(physics,animations,dropSpeed,prefsSettings,scoreManager,field,chainSim) {
	this.physics = physics;
	this.animations = animations;
	this.dropSpeed = dropSpeed;
	this.prefsSettings = prefsSettings;
	this.scoreManager = scoreManager;
	this.field = field;
	this.chainSim = chainSim;
};
$hxClasses["game.gelogroups.GeloGroupOptions"] = game_gelogroups_GeloGroupOptions;
game_gelogroups_GeloGroupOptions.__name__ = "game.gelogroups.GeloGroupOptions";
game_gelogroups_GeloGroupOptions.prototype = {
	physics: null
	,animations: null
	,dropSpeed: null
	,prefsSettings: null
	,scoreManager: null
	,field: null
	,chainSim: null
	,__class__: game_gelogroups_GeloGroupOptions
};
var game_gelogroups_GeloGroup = function(opts) {
	this.physics = opts.physics;
	this.animations = opts.animations;
	this.dropSpeed = opts.dropSpeed;
	this.prefsSettings = opts.prefsSettings;
	this.scoreManager = opts.scoreManager;
	this.field = opts.field;
	this.chainSim = opts.chainSim;
	this.others = new game_copying_CopyableArray([]);
	this.otherShadows = new game_copying_ConstantCopyableArray([]);
	this.isVisible = false;
	this.isShadowVisible = false;
	this.load(0,0,new game_gelogroups_GeloGroupData(6,[]));
};
$hxClasses["game.gelogroups.GeloGroup"] = game_gelogroups_GeloGroup;
game_gelogroups_GeloGroup.__name__ = "game.gelogroups.GeloGroup";
game_gelogroups_GeloGroup.__interfaces__ = [game_copying_ICopyFrom];
game_gelogroups_GeloGroup.prototype = {
	physics: null
	,animations: null
	,dropSpeed: null
	,prefsSettings: null
	,scoreManager: null
	,field: null
	,chainSim: null
	,others: null
	,otherShadows: null
	,main: null
	,x: null
	,y: null
	,prevDisplayX: null
	,prevDisplayY: null
	,displayX: null
	,displayY: null
	,prevRotationAngle: null
	,rotationID: null
	,rotationAngle: null
	,targetRotationAngle: null
	,rotationIncrement: null
	,stuckRotationCount: null
	,lockResetCount: null
	,graceT: null
	,das: null
	,dasDirection: null
	,arr: null
	,mainShadow: null
	,willTriggerChain: null
	,shouldLock: null
	,willTriggerChainT: null
	,isVisible: null
	,isShadowVisible: null
	,shift: function(dir) {
		if(this.lockResetCount > 7) {
			return;
		}
		if(1 < this.das && this.das < 10) {
			return;
		}
		if(this.arr % 2 == 0) {
			return;
		}
		var mainX = this.x;
		var mainY = this.y + 32;
		var nextMainX = mainX + dir * 64;
		var cellCoords = this.field.screenToCell(nextMainX,mainY);
		var cellX = cellCoords.x;
		var cellY = cellCoords.y;
		if(this.checkPlacement(cellX,cellY,this.rotationID)) {
			this.x = nextMainX;
			this.updateShadow(cellX,cellY);
			this.resetLock();
			return;
		}
		var raisedCellCoords = this.field.screenToCell(nextMainX,this.y);
		var raisedCellX = raisedCellCoords.x;
		var raisedCellY = raisedCellCoords.y;
		if(this.checkPlacement(raisedCellX,raisedCellY,this.rotationID)) {
			var screenCoords = this.field.cellToScreen(raisedCellX,raisedCellY);
			this.x = nextMainX;
			this.y = screenCoords.y;
			this.updateShadow(cellX,raisedCellY);
			this.resetLock();
		}
	}
	,chargeDAS: function(dir) {
		if(this.dasDirection != dir) {
			this.dasDirection = dir;
			this.das = 0;
			this.arr = 0;
		}
		this.das++;
		this.arr++;
	}
	,checkPlacement: function(mainCellX,mainCellY,rotationID) {
		var _this = this.field;
		if(0 > mainCellX || mainCellX > _this.columns - 1 || 0 > mainCellY || mainCellY > _this.totalRows - 1 || _this.get(mainCellX,mainCellY) != null) {
			return false;
		}
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var rot = o.getRotation(rotationID);
			var _this = this.field;
			var x = mainCellX + rot.x;
			var y = mainCellY + rot.y;
			if(0 > x || x > _this.columns - 1 || 0 > y || y > _this.totalRows - 1 || _this.get(x,y) != null) {
				return false;
			}
		}
		return true;
	}
	,rotationIDToAngle: function() {
		var r = (24 - this.rotationID * 24) % 32;
		return (r < 0 ? r + 32 : r) | 0;
	}
	,checkRotationAndConfirm: function(mainCellX,mainCellY,rotationID) {
		if(!this.checkPlacement(mainCellX,mainCellY,rotationID)) {
			return false;
		}
		var r = (24 - this.rotationID * 24) % 32;
		this.rotationAngle = (r < 0 ? r + 32 : r) | 0;
		this.rotationID = rotationID;
		var r = (24 - this.rotationID * 24) % 32;
		this.targetRotationAngle = (r < 0 ? r + 32 : r) | 0;
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.changeRotation(rotationID);
		}
		this.updateShadow(mainCellX,mainCellY);
		this.resetLock();
		return true;
	}
	,updateShadow: function(cellX,cellY) {
		var workField = this.field.copy();
		var mainGelo = workField.newGelo(cellX,cellY,this.main.color,true);
		var otherGelos = [];
		var otherShadowsData = this.otherShadows.data;
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			otherGelos.push(workField.newGelo(cellX + o.relX,cellY + o.relY,o.color,true));
		}
		workField.drop();
		this.mainShadow = new game_gelos_ScreenGeloPoint(mainGelo.color,mainGelo.x,mainGelo.y);
		otherShadowsData.length = 0;
		var _g = 0;
		while(_g < otherGelos.length) {
			var o = otherGelos[_g];
			++_g;
			otherShadowsData.push(new game_gelos_ScreenGeloPoint(o.color,o.x,o.y));
		}
		this.chainSim.clear();
		this.chainSim.simulate(new game_simulation__$ChainSimulator_SimOptions(workField,false,0,null,null));
		var _this = this.field;
		_this.customForEach(0,_this.totalRows,function(gelo,_,_1) {
			gelo.willTriggerChain = false;
		});
		this.willTriggerChain = false;
		if(this.chainSim.steps.data.length == 3) {
			return;
		}
		this.chainSim.view(1);
		this.chainSim.view(1);
		var _this = this.chainSim;
		var popStep = js_Boot.__cast(_this.steps.data[_this.viewIndex] , game_simulation_PopSimStep);
		var _g = 0;
		var _g1 = popStep.popInfo.clears.data;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this.field.get(c.x,c.y) == null) {
				continue;
			}
			this.field.get(c.x,c.y).willTriggerChain = true;
		}
		this.willTriggerChain = true;
	}
	,resetLock: function() {
		if(this.graceT == 0) {
			return;
		}
		this.graceT = 0;
		this.lockResetCount++;
	}
	,rotate: function(dir) {
		if(this.lockResetCount > 7) {
			return;
		}
		var nextRotationID = this.rotationID + dir & 3;
		if(this.stuckRotationCount % 2 == 1) {
			nextRotationID = nextRotationID + dir & 3;
			this.stuckRotationCount = 0;
		}
		var cellCoords = this.field.screenToCell(this.x,this.y + 32 - 2);
		var cellX = cellCoords.x;
		var cellY = cellCoords.y;
		if(this.checkRotationAndConfirm(cellX,cellY,nextRotationID)) {
			return;
		}
		var raisedCellY = cellY - 1;
		if(utils_ValueBox.toValue(this.physics) != game_rules_PhysicsType.TSU && this.checkRotationAndConfirm(cellX,raisedCellY,nextRotationID)) {
			var screenCoords = this.field.cellToScreen(cellX,raisedCellY);
			this.x = screenCoords.x;
			this.y = screenCoords.y;
			return;
		}
		var oppositeRotationID = nextRotationID ^ 2;
		if(this.checkPlacement(cellX,cellY,oppositeRotationID)) {
			var _g = 0;
			var _g1 = this.others.data;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				var dir = o.getRotation(oppositeRotationID);
				if(this.checkRotationAndConfirm(cellX + dir.x,cellY + dir.y,nextRotationID)) {
					this.x += dir.x * 64;
					this.y += dir.y * 64;
					return;
				}
			}
		}
		this.stuckRotationCount++;
	}
	,updateRotation: function() {
		if(this.rotationAngle == this.targetRotationAngle) {
			return;
		}
		var r = (this.rotationAngle + this.rotationIncrement) % 32;
		this.rotationAngle = (r < 0 ? r + 32 : r) | 0;
	}
	,updateSmoothing: function() {
		var distanceX = this.x - this.displayX;
		var distanceY = this.y - this.displayY;
		if(distanceX != 0) {
			this.displayX += Math.min(distanceX / Math.abs(distanceX) * 32,distanceX);
		}
		if(distanceY != 0) {
			this.displayY += Math.min(distanceY / Math.abs(distanceY) * 32,distanceY);
		}
	}
	,load: function(x,y,opts) {
		this.main = game_gelos_Gelo.create(new game_gelos_GeloOptions(this.prefsSettings,opts.mainColor));
		this.others.data.length = 0;
		var _g = 0;
		var _g1 = opts.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.color == 5) {
				continue;
			}
			this.others.data.push(game_gelos_OtherGelo.create(o));
		}
		this.x = x;
		this.y = y;
		this.prevDisplayX = x;
		this.prevDisplayY = y;
		this.displayX = x;
		this.displayY = y;
		this.prevRotationAngle = 24;
		this.rotationID = 0;
		this.rotationAngle = 24;
		this.targetRotationAngle = 24;
		this.rotationIncrement = 0;
		this.stuckRotationCount = 0;
		this.lockResetCount = 0;
		this.graceT = 0;
		this.willTriggerChain = false;
		this.willTriggerChainT = 0;
		this.isShadowVisible = true;
		var cellCoords = this.field.screenToCell(x,y);
		this.updateShadow(cellCoords.x,cellCoords.y);
	}
	,chargeDASLeft: function() {
		this.chargeDAS(-1);
	}
	,chargeDASRight: function() {
		this.chargeDAS(1);
	}
	,stopDAS: function() {
		this.dasDirection = 0;
		this.das = 0;
		this.arr = 0;
	}
	,shiftLeft: function() {
		this.shift(-1);
	}
	,shiftRight: function() {
		this.shift(1);
	}
	,rotateLeft: function() {
		this.rotate(-1);
		this.rotationIncrement = -1;
	}
	,rotateRight: function() {
		this.rotate(1);
		this.rotationIncrement = 1;
	}
	,drop: function(softDrop) {
		var currentDropSpeed = softDrop ? 32 : utils_ValueBox.toValue(this.dropSpeed);
		var nextY = this.y + currentDropSpeed;
		var collisionOccured = false;
		while(this.y < nextY) {
			var cellCoords = this.field.screenToCell(this.x,this.y + 32 - 1);
			if(!this.checkPlacement(cellCoords.x,cellCoords.y,this.rotationID)) {
				collisionOccured = true;
				break;
			}
			this.y++;
		}
		if(collisionOccured && this.prevDisplayY == this.displayY) {
			if(this.rotationAngle == this.targetRotationAngle && (softDrop || this.lockResetCount > 7 || this.graceT > 48)) {
				var cellCoords = this.field.screenToCell(this.x,this.y);
				var cellX = cellCoords.x;
				var cellY = cellCoords.y;
				this.field.newGelo(cellX,cellY,this.main.color,false).startSplitting();
				var _g = 0;
				var _g1 = this.others.data;
				while(_g < _g1.length) {
					var o = _g1[_g];
					++_g;
					this.field.newGelo(cellX + o.relX,cellY + o.relY,o.color,false).startSplitting();
				}
				this.isShadowVisible = false;
				this.isVisible = false;
				return true;
			}
			this.graceT++;
		} else if(softDrop) {
			this.scoreManager.addDropBonus();
		}
		return false;
	}
	,hardDrop: function() {
		var mainCell = this.field.screenToCell(this.mainShadow.x,this.mainShadow.y);
		this.field.newGelo(mainCell.x,mainCell.y,this.mainShadow.color,false).startSplitting();
		var _g = 0;
		var _g1 = this.otherShadows.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var otherCell = this.field.screenToCell(o.x,o.y);
			this.field.newGelo(otherCell.x,otherCell.y,o.color,false).startSplitting();
		}
		this.isShadowVisible = false;
		this.isVisible = false;
	}
	,getPrimaryColor: function(geloColor) {
		return this.prefsSettings.primaryColors.h[geloColor];
	}
	,renderShadow: function(g,g4,alpha) {
		if(!this.prefsSettings.showGroupShadow || !this.isShadowVisible) {
			return;
		}
		var shadowOpacity = this.prefsSettings.shadowOpacity;
		var quarterSize = 16.;
		var radius = this.prefsSettings.shadowWillTriggerChain && this.willTriggerChain ? quarterSize + Math.cos(this.willTriggerChainT / 4) * quarterSize / 2 : quarterSize;
		g.pushOpacity(shadowOpacity);
		var _g = 0;
		var _g1 = this.otherShadows.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			g.set_color(this.getPrimaryColor(o.color));
			kha_graphics2_GraphicsExtension.fillCircle(g,o.x,o.y,radius,16);
		}
		g.popOpacity();
		if(this.prefsSettings.shadowHighlightOthers) {
			var background = this.prefsSettings.boardBackground;
			var _g = 0;
			var _g1 = this.otherShadows.data;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				g.set_color(background);
				kha_graphics2_GraphicsExtension.fillCircle(g,o.x,o.y,radius - 8,16);
			}
		}
		g.pushOpacity(shadowOpacity);
		g.set_color(this.getPrimaryColor(this.mainShadow.color));
		kha_graphics2_GraphicsExtension.fillCircle(g,this.mainShadow.x,this.mainShadow.y,radius,16);
		g.popOpacity();
		g.set_color(-1);
	}
	,renderGelo: function(g,g4,x,y,alpha,gelo) {
		gelo.render(g,g4,x,y,alpha);
	}
	,update: function() {
		if(this.main == null) {
			return;
		}
		this.prevRotationAngle = this.rotationAngle;
		this.updateRotation();
		this.main.update();
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.update();
		}
		this.prevDisplayX = this.displayX;
		this.prevDisplayY = this.displayY;
		this.updateSmoothing();
		this.willTriggerChainT++;
	}
	,render: function(g,g4,alpha) {
		this.renderShadow(g,g4,alpha);
		if(!this.isVisible) {
			return;
		}
		var fallChoppyness = utils_ValueBox.toValue(this.animations) == game_rules_AnimationsType.TSU ? 32 : 1;
		var prevChoppyY = Math.round(this.prevDisplayY / fallChoppyness) * fallChoppyness;
		var choppyY = Math.round(this.displayY / fallChoppyness) * fallChoppyness;
		var min = this.prevDisplayX;
		var lerpDisplayX = min + (this.displayX - min) * alpha;
		var lerpDisplayY = prevChoppyY + (choppyY - prevChoppyY) * alpha;
		var prevCos = Math.cos(this.prevRotationAngle / 16 * Math.PI);
		var currentCos = Math.cos(this.rotationAngle / 16 * Math.PI);
		var prevSin = Math.sin(this.prevRotationAngle / 16 * Math.PI);
		var currentSin = Math.sin(this.rotationAngle / 16 * Math.PI);
		var lerpCos = prevCos + (currentCos - prevCos) * alpha;
		var lerpSin = prevSin + (currentSin - prevSin) * alpha;
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			this.renderGelo(g,g4,lerpDisplayX + lerpCos * 64,lerpDisplayY + lerpSin * 64,alpha,o);
		}
		this.renderGelo(g,g4,lerpDisplayX,lerpDisplayY,alpha,this.main);
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.others.copyFrom(other.others);
		this.otherShadows.copyFrom(other.otherShadows);
		this.main = other.main.copy();
		this.x = other.x;
		this.y = other.y;
		this.prevDisplayX = other.prevDisplayX;
		this.prevDisplayY = other.prevDisplayY;
		this.displayX = other.displayX;
		this.displayY = other.displayY;
		this.prevRotationAngle = other.prevRotationAngle;
		this.rotationID = other.rotationID;
		this.rotationAngle = other.rotationAngle;
		this.targetRotationAngle = other.targetRotationAngle;
		this.rotationIncrement = other.rotationIncrement;
		this.stuckRotationCount = other.stuckRotationCount;
		this.lockResetCount = other.lockResetCount;
		this.graceT = other.graceT;
		this.das = other.das;
		this.dasDirection = other.dasDirection;
		this.arr = other.arr;
		this.mainShadow = other.mainShadow;
		this.willTriggerChain = other.willTriggerChain;
		this.shouldLock = other.shouldLock;
		this.willTriggerChainT = other.willTriggerChainT;
		this.isVisible = other.isVisible;
		this.isShadowVisible = other.isShadowVisible;
		return this;
	}
	,__class__: game_gelogroups_GeloGroup
};
var game_gelogroups_GeloGroupData = function(mainColor,others) {
	this.mainColor = mainColor;
	this.others = new game_copying_CopyableArray(others);
};
$hxClasses["game.gelogroups.GeloGroupData"] = game_gelogroups_GeloGroupData;
game_gelogroups_GeloGroupData.__name__ = "game.gelogroups.GeloGroupData";
game_gelogroups_GeloGroupData.__interfaces__ = [game_copying_ICopy];
game_gelogroups_GeloGroupData.prototype = {
	mainColor: null
	,others: null
	,copy: function() {
		return new game_gelogroups_GeloGroupData(this.mainColor,this.others.data);
	}
	,render: function(g,x,y) {
		var _g = 0;
		var _g1 = this.others.data;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var relativePos = game_gelos_OtherGeloPositions_OTHERGELO_POSITIONS[o.positionID][0];
			game_gelos_Gelo.renderStatic(g,x + relativePos.x * 64,y + relativePos.y * 64,o.color,0);
		}
		game_gelos_Gelo.renderStatic(g,x,y,this.mainColor,0);
	}
	,copyFrom: function(other) {
		return this;
	}
	,__class__: game_gelogroups_GeloGroupData
};
var game_gelogroups_TrainingGeloGroupOptions = function(trainingSettings,physics,animations,dropSpeed,prefsSettings,scoreManager,field,chainSim) {
	game_gelogroups_GeloGroupOptions.call(this,physics,animations,dropSpeed,prefsSettings,scoreManager,field,chainSim);
	this.trainingSettings = trainingSettings;
};
$hxClasses["game.gelogroups.TrainingGeloGroupOptions"] = game_gelogroups_TrainingGeloGroupOptions;
game_gelogroups_TrainingGeloGroupOptions.__name__ = "game.gelogroups.TrainingGeloGroupOptions";
game_gelogroups_TrainingGeloGroupOptions.__super__ = game_gelogroups_GeloGroupOptions;
game_gelogroups_TrainingGeloGroupOptions.prototype = $extend(game_gelogroups_GeloGroupOptions.prototype,{
	trainingSettings: null
	,__class__: game_gelogroups_TrainingGeloGroupOptions
});
var game_gelogroups_TrainingGeloGroup = function(opts) {
	game_gelogroups_GeloGroup.call(this,opts);
	this.trainingSettings = opts.trainingSettings;
};
$hxClasses["game.gelogroups.TrainingGeloGroup"] = game_gelogroups_TrainingGeloGroup;
game_gelogroups_TrainingGeloGroup.__name__ = "game.gelogroups.TrainingGeloGroup";
game_gelogroups_TrainingGeloGroup.__super__ = game_gelogroups_GeloGroup;
game_gelogroups_TrainingGeloGroup.prototype = $extend(game_gelogroups_GeloGroup.prototype,{
	trainingSettings: null
	,getPrimaryColor: function(geloColor) {
		if(this.trainingSettings.groupBlindMode) {
			return game_gelogroups_TrainingGeloGroup.BLIND_MODE_COLOR;
		} else {
			return game_gelogroups_GeloGroup.prototype.getPrimaryColor.call(this,geloColor);
		}
	}
	,renderGelo: function(g,g4,x,y,alpha,gelo) {
		if(this.trainingSettings.groupBlindMode) {
			g.set_color(game_gelogroups_TrainingGeloGroup.BLIND_MODE_COLOR);
			kha_graphics2_GraphicsExtension.fillCircle(g,x,y,32,16);
			g.set_color(-1);
			return;
		}
		game_gelogroups_GeloGroup.prototype.renderGelo.call(this,g,g4,x,y,alpha,gelo);
	}
	,copyFrom: function(other) {
		game_gelogroups_GeloGroup.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_gelogroups_TrainingGeloGroup
});
var game_gelos_FieldGeloState = $hxEnums["game.gelos.FieldGeloState"] = { __ename__:"game.gelos.FieldGeloState",__constructs__:null
	,IDLE: {_hx_name:"IDLE",_hx_index:0,__enum__:"game.gelos.FieldGeloState",toString:$estr}
	,FALLING: {_hx_name:"FALLING",_hx_index:1,__enum__:"game.gelos.FieldGeloState",toString:$estr}
	,BOUNCING: {_hx_name:"BOUNCING",_hx_index:2,__enum__:"game.gelos.FieldGeloState",toString:$estr}
	,POPPING: {_hx_name:"POPPING",_hx_index:3,__enum__:"game.gelos.FieldGeloState",toString:$estr}
};
game_gelos_FieldGeloState.__constructs__ = [game_gelos_FieldGeloState.IDLE,game_gelos_FieldGeloState.FALLING,game_gelos_FieldGeloState.BOUNCING,game_gelos_FieldGeloState.POPPING];
var game_gelos_GeloOptions = function(prefsSettings,color) {
	this.prefsSettings = prefsSettings;
	this.color = color;
};
$hxClasses["game.gelos.GeloOptions"] = game_gelos_GeloOptions;
game_gelos_GeloOptions.__name__ = "game.gelos.GeloOptions";
game_gelos_GeloOptions.prototype = {
	prefsSettings: null
	,color: null
	,__class__: game_gelos_GeloOptions
};
var game_gelos_FieldGeloOptions = function(x,y,prefsSettings,color) {
	game_gelos_GeloOptions.call(this,prefsSettings,color);
	this.x = x;
	this.y = y;
};
$hxClasses["game.gelos.FieldGeloOptions"] = game_gelos_FieldGeloOptions;
game_gelos_FieldGeloOptions.__name__ = "game.gelos.FieldGeloOptions";
game_gelos_FieldGeloOptions.__super__ = game_gelos_GeloOptions;
game_gelos_FieldGeloOptions.prototype = $extend(game_gelos_GeloOptions.prototype,{
	x: null
	,y: null
	,__class__: game_gelos_FieldGeloOptions
});
var game_gelos_Gelo = function(opts) {
	this.prefsSettings = opts.prefsSettings;
	this.color = opts.color;
};
$hxClasses["game.gelos.Gelo"] = game_gelos_Gelo;
game_gelos_Gelo.__name__ = "game.gelos.Gelo";
game_gelos_Gelo.__interfaces__ = [game_copying_ICopy];
game_gelos_Gelo.renderStatic = function(g,x,y,type,spriteVariation) {
	var subImageCoords = game_gelos_GeloSpriteCoordinates_GELO_SPRITE_COORDINATES.h[type].h[spriteVariation];
	if(subImageCoords == null) {
		return;
	}
	g.drawScaledSubImage(kha_Assets.images.pixel,subImageCoords.x,subImageCoords.y,64,64,x - 32,y - 32,64,64);
};
game_gelos_Gelo.create = function(opts) {
	var p = new game_gelos_Gelo(opts);
	game_gelos_Gelo.init(p);
	return p;
};
game_gelos_Gelo.init = function(p) {
	p.spriteVariation = 0;
	p.updateSubImageCoords();
	p.bounceT = 0;
	p.bounceType = game_gelos_GeloBounceType.NONE;
	p.popT = 0;
	p.popType = game_gelos_GeloPopType.NONE;
	p.isVisible = true;
	p.prevScaleX = 1;
	p.prevScaleY = 1;
	p.scaleX = 1;
	p.scaleY = 1;
	p.willTriggerChain = false;
};
game_gelos_Gelo.prototype = {
	prefsSettings: null
	,spriteVariation: null
	,subImageCoords: null
	,bounceT: null
	,bounceType: null
	,popT: null
	,popType: null
	,isVisible: null
	,prevScaleX: null
	,prevScaleY: null
	,color: null
	,scaleX: null
	,scaleY: null
	,willTriggerChain: null
	,copy: function() {
		return new game_gelos_Gelo(new game_gelos_GeloOptions(this.prefsSettings,this.color)).copyFrom(this);
	}
	,updateSubImageCoords: function() {
		this.subImageCoords = game_gelos_GeloSpriteCoordinates_GELO_SPRITE_COORDINATES.h[this.color].h[this.spriteVariation];
	}
	,updateTsuBounceType: function(table) {
		if(this.bounceT == table.length) {
			this.scaleX = 1;
			this.scaleY = 1;
			this.stopBouncing();
			return;
		}
		this.prevScaleX = this.scaleX;
		this.prevScaleY = this.scaleY;
		var current = table[this.bounceT];
		this.scaleX = current.x;
		this.scaleY = current.y;
		this.bounceT++;
	}
	,updateFeverBounceType: function() {
		this.stopBouncing();
	}
	,updateTsuPopType: function() {
		if(this.popT == 30) {
			this.stopPopping();
			return;
		}
		if(this.popT > 7 && this.popT % 3 == 0) {
			this.isVisible = !this.isVisible;
		}
		this.popT++;
	}
	,updateFeverPopType: function() {
	}
	,changeSpriteVariation: function(variation) {
		this.spriteVariation = variation;
		this.updateSubImageCoords();
	}
	,startBouncing: function(type) {
		this.bounceType = type;
		this.bounceT = 0;
	}
	,stopBouncing: function() {
		this.bounceType = game_gelos_GeloBounceType.NONE;
	}
	,startPopping: function(type) {
		this.popType = type;
		this.scaleX = 1;
		this.scaleY = 1;
		this.willTriggerChain = false;
	}
	,stopPopping: function() {
		this.popType = game_gelos_GeloPopType.NONE;
	}
	,update: function() {
		this.prevScaleX = this.scaleX;
		this.prevScaleY = this.scaleY;
		switch(this.bounceType._hx_index) {
		case 0:
			break;
		case 1:
			this.updateTsuBounceType(game_gelos_GeloBounceTables_GELO_TSU_SHORT_BOUNCE_TABLE);
			break;
		case 2:
			this.updateTsuBounceType(game_gelos_GeloBounceTables_GELO_TSU_LONG_BOUNCE_TABLE);
			break;
		case 3:
			this.updateFeverBounceType();
			break;
		}
		switch(this.popType._hx_index) {
		case 0:
			break;
		case 1:
			this.updateTsuPopType();
			break;
		case 2:
			this.updateFeverPopType();
			break;
		}
	}
	,render: function(g,g4,x,y,alpha) {
		if(!this.isVisible) {
			return;
		}
		var min = this.prevScaleX;
		var lerpScaleX = min + (this.scaleX - min) * alpha;
		var min = this.prevScaleY;
		var lerpScaleY = min + (this.scaleY - min) * alpha;
		var offsetX = x + (1 - lerpScaleX) * 32;
		var offsetY = y + (1 - lerpScaleY) * 32;
		if(this.willTriggerChain) {
			g.set_pipeline(Pipelines.FADE_TO_WHITE);
			g4.setPipeline(g.get_pipeline());
		}
		g.set_color(this.prefsSettings.colorTints.h[this.color]);
		g.drawScaledSubImage(kha_Assets.images.pixel,this.subImageCoords.x,this.subImageCoords.y,64,64,offsetX - 32,offsetY - 32,64 * lerpScaleX,64 * lerpScaleY);
		g.set_color(-1);
		g.set_pipeline(null);
	}
	,copyFrom: function(other) {
		this.spriteVariation = other.spriteVariation;
		this.subImageCoords = other.subImageCoords;
		this.bounceT = other.bounceT;
		this.bounceType = other.bounceType;
		this.popT = other.popT;
		this.popType = other.popType;
		this.isVisible = other.isVisible;
		this.prevScaleX = other.prevScaleX;
		this.prevScaleY = other.prevScaleY;
		this.scaleX = other.scaleX;
		this.scaleY = other.scaleY;
		this.willTriggerChain = other.willTriggerChain;
		return this;
	}
	,__class__: game_gelos_Gelo
};
var game_gelos_FieldGelo = function(opts) {
	game_gelos_Gelo.call(this,opts);
};
$hxClasses["game.gelos.FieldGelo"] = game_gelos_FieldGelo;
game_gelos_FieldGelo.__name__ = "game.gelos.FieldGelo";
game_gelos_FieldGelo.create = function(opts) {
	var p = new game_gelos_FieldGelo(opts);
	game_gelos_FieldGelo.init(p,opts);
	return p;
};
game_gelos_FieldGelo.init = function(p,opts) {
	game_gelos_Gelo.init(p);
	p.x = opts.x;
	p.y = opts.y;
	p.state = game_gelos_FieldGeloState.IDLE;
};
game_gelos_FieldGelo.__super__ = game_gelos_Gelo;
game_gelos_FieldGelo.prototype = $extend(game_gelos_Gelo.prototype,{
	x: null
	,y: null
	,distanceCounter: null
	,velocity: null
	,velocityLimit: null
	,accel: null
	,state: null
	,copy: function() {
		return new game_gelos_FieldGelo(new game_gelos_GeloOptions(this.prefsSettings,this.color)).copyFrom(this);
	}
	,startBouncing: function(type) {
		game_gelos_Gelo.prototype.startBouncing.call(this,type);
		this.state = game_gelos_FieldGeloState.BOUNCING;
	}
	,stopBouncing: function() {
		game_gelos_Gelo.prototype.stopBouncing.call(this);
		this.state = game_gelos_FieldGeloState.IDLE;
	}
	,startPopping: function(type) {
		game_gelos_Gelo.prototype.startPopping.call(this,type);
		this.state = game_gelos_FieldGeloState.POPPING;
	}
	,stopPopping: function() {
		game_gelos_Gelo.prototype.stopPopping.call(this);
		this.state = game_gelos_FieldGeloState.IDLE;
	}
	,startSplitting: function() {
		this.velocity = 0;
		this.velocityLimit = 23.25;
		this.accel = 0.75;
		this.distanceCounter = 31;
		this.state = game_gelos_FieldGeloState.FALLING;
	}
	,startDropping: function() {
		this.velocity = 32;
		this.velocityLimit = 32;
		this.accel = 0;
		this.distanceCounter = 0;
		this.state = game_gelos_FieldGeloState.FALLING;
	}
	,stopFalling: function() {
		this.state = game_gelos_FieldGeloState.IDLE;
	}
	,damage: function() {
		return true;
	}
	,renderAtOwnPosition: function(g,g4,alpha) {
		this.render(g,g4,this.x,this.y,alpha);
	}
	,copyFrom: function(other) {
		game_gelos_Gelo.prototype.copyFrom.call(this,other);
		this.x = other.x;
		this.y = other.y;
		this.distanceCounter = other.distanceCounter;
		this.velocity = other.velocity;
		this.velocityLimit = other.velocityLimit;
		this.accel = other.accel;
		this.state = other.state;
		return this;
	}
	,__class__: game_gelos_FieldGelo
});
var utils_IntPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["utils.IntPoint"] = utils_IntPoint;
utils_IntPoint.__name__ = "utils.IntPoint";
utils_IntPoint.prototype = {
	x: null
	,y: null
	,sub: function(rhs) {
		return new utils_IntPoint(this.x - rhs.x,this.y - rhs.y);
	}
	,__class__: utils_IntPoint
};
var game_gelos_FieldGeloPoint = function(color,x,y) {
	utils_IntPoint.call(this,x,y);
	this.color = color;
};
$hxClasses["game.gelos.FieldGeloPoint"] = game_gelos_FieldGeloPoint;
game_gelos_FieldGeloPoint.__name__ = "game.gelos.FieldGeloPoint";
game_gelos_FieldGeloPoint.__super__ = utils_IntPoint;
game_gelos_FieldGeloPoint.prototype = $extend(utils_IntPoint.prototype,{
	color: null
	,__class__: game_gelos_FieldGeloPoint
});
var game_gelos_GarbageGelo = function(opts) {
	game_gelos_FieldGelo.call(this,opts);
};
$hxClasses["game.gelos.GarbageGelo"] = game_gelos_GarbageGelo;
game_gelos_GarbageGelo.__name__ = "game.gelos.GarbageGelo";
game_gelos_GarbageGelo.create = function(opts) {
	var p = new game_gelos_GarbageGelo(opts);
	game_gelos_GarbageGelo.init(p,opts);
	return p;
};
game_gelos_GarbageGelo.init = function(p,opts) {
	game_gelos_FieldGelo.init(p,opts);
};
game_gelos_GarbageGelo.__super__ = game_gelos_FieldGelo;
game_gelos_GarbageGelo.prototype = $extend(game_gelos_FieldGelo.prototype,{
	copy: function() {
		return new game_gelos_GarbageGelo(new game_gelos_GeloOptions(this.prefsSettings,this.color)).copyFrom(this);
	}
	,startBouncing: function(type) {
		this.stopBouncing();
	}
	,startGarbageFalling: function(accel) {
		this.velocity = 0;
		this.velocityLimit = 32;
		this.accel = accel;
		this.distanceCounter = 0;
		this.state = game_gelos_FieldGeloState.FALLING;
	}
	,copyFrom: function(other) {
		game_gelos_FieldGelo.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_gelos_GarbageGelo
});
var game_gelos_GeloBounceType = $hxEnums["game.gelos.GeloBounceType"] = { __ename__:"game.gelos.GeloBounceType",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"game.gelos.GeloBounceType",toString:$estr}
	,TSU_SHORT: {_hx_name:"TSU_SHORT",_hx_index:1,__enum__:"game.gelos.GeloBounceType",toString:$estr}
	,TSU_LONG: {_hx_name:"TSU_LONG",_hx_index:2,__enum__:"game.gelos.GeloBounceType",toString:$estr}
	,FEVER: {_hx_name:"FEVER",_hx_index:3,__enum__:"game.gelos.GeloBounceType",toString:$estr}
};
game_gelos_GeloBounceType.__constructs__ = [game_gelos_GeloBounceType.NONE,game_gelos_GeloBounceType.TSU_SHORT,game_gelos_GeloBounceType.TSU_LONG,game_gelos_GeloBounceType.FEVER];
var game_gelos_GeloColor = {};
game_gelos_GeloColor.isColored = function(this1) {
	if(0 <= this1) {
		return this1 <= 4;
	} else {
		return false;
	}
};
game_gelos_GeloColor.isEmpty = function(this1) {
	return this1 == 99;
};
game_gelos_GeloColor.isGarbage = function(this1) {
	return 5 <= this1;
};
var game_gelos_GeloPopType = $hxEnums["game.gelos.GeloPopType"] = { __ename__:"game.gelos.GeloPopType",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"game.gelos.GeloPopType",toString:$estr}
	,TSU: {_hx_name:"TSU",_hx_index:1,__enum__:"game.gelos.GeloPopType",toString:$estr}
	,FEVER: {_hx_name:"FEVER",_hx_index:2,__enum__:"game.gelos.GeloPopType",toString:$estr}
};
game_gelos_GeloPopType.__constructs__ = [game_gelos_GeloPopType.NONE,game_gelos_GeloPopType.TSU,game_gelos_GeloPopType.FEVER];
var game_gelos_OtherGeloOptions = function(positionID,prefsSettings,color) {
	game_gelos_GeloOptions.call(this,prefsSettings,color);
	this.positionID = positionID;
};
$hxClasses["game.gelos.OtherGeloOptions"] = game_gelos_OtherGeloOptions;
game_gelos_OtherGeloOptions.__name__ = "game.gelos.OtherGeloOptions";
game_gelos_OtherGeloOptions.__interfaces__ = [game_copying_ICopy];
game_gelos_OtherGeloOptions.__super__ = game_gelos_GeloOptions;
game_gelos_OtherGeloOptions.prototype = $extend(game_gelos_GeloOptions.prototype,{
	copy: function() {
		return this;
	}
	,copyFrom: function(other) {
		return this;
	}
	,positionID: null
	,__class__: game_gelos_OtherGeloOptions
});
var game_gelos_OtherGelo = function(opts) {
	game_gelos_Gelo.call(this,opts);
	this.positionID = opts.positionID;
};
$hxClasses["game.gelos.OtherGelo"] = game_gelos_OtherGelo;
game_gelos_OtherGelo.__name__ = "game.gelos.OtherGelo";
game_gelos_OtherGelo.create = function(opts) {
	var p = new game_gelos_OtherGelo(opts);
	game_gelos_OtherGelo.init(p);
	return p;
};
game_gelos_OtherGelo.init = function(p) {
	game_gelos_Gelo.init(p);
	p.changeRotation(0);
};
game_gelos_OtherGelo.__super__ = game_gelos_Gelo;
game_gelos_OtherGelo.prototype = $extend(game_gelos_Gelo.prototype,{
	positionID: null
	,relX: null
	,relY: null
	,copy: function() {
		return new game_gelos_OtherGelo(new game_gelos_OtherGeloOptions(this.positionID,this.prefsSettings,this.color)).copyFrom(this);
	}
	,changeRotation: function(rotationID) {
		var rot = this.getRotation(rotationID);
		this.relX = rot.x;
		this.relY = rot.y;
	}
	,getRotation: function(rotationID) {
		return game_gelos_OtherGeloPositions_OTHERGELO_POSITIONS[this.positionID][rotationID];
	}
	,copyFrom: function(other) {
		game_gelos_Gelo.prototype.copyFrom.call(this,other);
		this.relX = other.relX;
		this.relY = other.relY;
		return this;
	}
	,__class__: game_gelos_OtherGelo
});
var game_gelos_ScreenGeloPoint = function(color,x,y) {
	utils_Point.call(this,x,y);
	this.color = color;
};
$hxClasses["game.gelos.ScreenGeloPoint"] = game_gelos_ScreenGeloPoint;
game_gelos_ScreenGeloPoint.__name__ = "game.gelos.ScreenGeloPoint";
game_gelos_ScreenGeloPoint.__super__ = utils_Point;
game_gelos_ScreenGeloPoint.prototype = $extend(utils_Point.prototype,{
	color: null
	,__class__: game_gelos_ScreenGeloPoint
});
var game_geometries_BoardOrientation = $hxEnums["game.geometries.BoardOrientation"] = { __ename__:"game.geometries.BoardOrientation",__constructs__:null
	,LEFT: {_hx_name:"LEFT",_hx_index:0,__enum__:"game.geometries.BoardOrientation",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:1,__enum__:"game.geometries.BoardOrientation",toString:$estr}
};
game_geometries_BoardOrientation.__constructs__ = [game_geometries_BoardOrientation.LEFT,game_geometries_BoardOrientation.RIGHT];
var game_geometries_BoardGeometries = function(absolutePosition,scale,orientation,preview,allClearIndicator,scoreDisplayY,garbageTray,editGeloDisplay) {
	this.absolutePosition = absolutePosition;
	this.scale = scale;
	this.orientation = orientation;
	this.preview = preview;
	this.allClearIndicator = allClearIndicator;
	this.scoreDisplayY = scoreDisplayY;
	this.garbageTray = garbageTray;
	this.editGeloDisplay = editGeloDisplay;
};
$hxClasses["game.geometries.BoardGeometries"] = game_geometries_BoardGeometries;
game_geometries_BoardGeometries.__name__ = "game.geometries.BoardGeometries";
game_geometries_BoardGeometries.prototype = {
	absolutePosition: null
	,scale: null
	,orientation: null
	,preview: null
	,allClearIndicator: null
	,scoreDisplayY: null
	,garbageTray: null
	,editGeloDisplay: null
	,__class__: game_geometries_BoardGeometries
};
var game_mediators_BorderColorMediator = function() {
};
$hxClasses["game.mediators.BorderColorMediator"] = game_mediators_BorderColorMediator;
game_mediators_BorderColorMediator.__name__ = "game.mediators.BorderColorMediator";
game_mediators_BorderColorMediator.prototype = {
	changeColor: null
	,__class__: game_mediators_BorderColorMediator
};
var game_mediators_ControlHintContainer = function() {
	this.isVisible = false;
	this.value = new game_copying_ConstantCopyableArray([]);
};
$hxClasses["game.mediators.ControlHintContainer"] = game_mediators_ControlHintContainer;
game_mediators_ControlHintContainer.__name__ = "game.mediators.ControlHintContainer";
game_mediators_ControlHintContainer.__interfaces__ = [game_copying_ICopyFrom];
game_mediators_ControlHintContainer.prototype = {
	value: null
	,isVisible: null
	,copyFrom: function(other) {
		this.value.copyFrom(other.value);
		this.isVisible = other.isVisible;
		return this;
	}
	,__class__: game_mediators_ControlHintContainer
};
var game_mediators_FrameCounter = function() {
	this.value = 0;
};
$hxClasses["game.mediators.FrameCounter"] = game_mediators_FrameCounter;
game_mediators_FrameCounter.__name__ = "game.mediators.FrameCounter";
game_mediators_FrameCounter.__interfaces__ = [game_copying_ICopyFrom];
game_mediators_FrameCounter.prototype = {
	value: null
	,update: function() {
		++this.value;
	}
	,copyFrom: function(other) {
		this.value = other.value;
		return this;
	}
	,__class__: game_mediators_FrameCounter
};
var game_mediators_GarbageTargetMediator = function(geometries) {
	this.geometries = geometries;
};
$hxClasses["game.mediators.GarbageTargetMediator"] = game_mediators_GarbageTargetMediator;
game_mediators_GarbageTargetMediator.__name__ = "game.mediators.GarbageTargetMediator";
game_mediators_GarbageTargetMediator.prototype = {
	geometries: null
	,garbageManager: null
	,startAnimation: function() {
		this.garbageManager.startAnimation();
	}
	,receiveGarbage: function(amount) {
		this.garbageManager.receiveGarbage(amount);
	}
	,setConfirmedGarbage: function(amount) {
		this.garbageManager.setConfirmedGarbage(amount);
	}
	,__class__: game_mediators_GarbageTargetMediator
};
var game_mediators_PauseMediator = function(pause,resume) {
	this.pause = pause;
	this.resume = resume;
};
$hxClasses["game.mediators.PauseMediator"] = game_mediators_PauseMediator;
game_mediators_PauseMediator.__name__ = "game.mediators.PauseMediator";
game_mediators_PauseMediator.prototype = {
	pause: null
	,resume: null
	,__class__: game_mediators_PauseMediator
};
var game_mediators_RollbackMediator = function(confirmFrame,rollback) {
	this.confirmFrame = confirmFrame;
	this.rollback = rollback;
};
$hxClasses["game.mediators.RollbackMediator"] = game_mediators_RollbackMediator;
game_mediators_RollbackMediator.__name__ = "game.mediators.RollbackMediator";
game_mediators_RollbackMediator.prototype = {
	confirmFrame: null
	,rollback: null
	,__class__: game_mediators_RollbackMediator
};
var game_mediators_SaveGameStateMediator = function(loadState,saveState) {
	this.loadState = loadState;
	this.saveState = saveState;
};
$hxClasses["game.mediators.SaveGameStateMediator"] = game_mediators_SaveGameStateMediator;
game_mediators_SaveGameStateMediator.__name__ = "game.mediators.SaveGameStateMediator";
game_mediators_SaveGameStateMediator.prototype = {
	loadState: null
	,saveState: null
	,__class__: game_mediators_SaveGameStateMediator
};
var game_net_InputHistoryEntry = function(frame,actions) {
	this.frame = frame;
	this.actions = actions;
};
$hxClasses["game.net.InputHistoryEntry"] = game_net_InputHistoryEntry;
game_net_InputHistoryEntry.__name__ = "game.net.InputHistoryEntry";
game_net_InputHistoryEntry.prototype = {
	frame: null
	,actions: null
	,__class__: game_net_InputHistoryEntry
};
var game_net_SessionManager = function(peer,isHost,remoteID) {
	this.peer = peer;
	this.frameCounter = new game_mediators_FrameCounter();
	if(isHost) {
		peer.on(peerjs_PeerEventType.Connection,$bind(this,this.initDataConnection));
	} else {
		this.initDataConnection(peer.connect(remoteID,{ serialization : peerjs_PeerDataSerialization.None}));
	}
	this.localInputHistory = [];
	this.localID = peer.id;
	this.remoteID = remoteID;
	this.state = 0;
};
$hxClasses["game.net.SessionManager"] = game_net_SessionManager;
game_net_SessionManager.__name__ = "game.net.SessionManager";
game_net_SessionManager.prototype = {
	peer: null
	,frameCounter: null
	,dc: null
	,roundTripCounter: null
	,localAdvantageCounter: null
	,remoteAdvantageCounter: null
	,lastLocalChecksum: null
	,lastRemoteChecksum: null
	,desyncCounter: null
	,lastConfirmedFrame: null
	,beginFrame: null
	,nextChecksumFrame: null
	,latestChecksumFrame: null
	,localInputHistory: null
	,lastInputFrame: null
	,syncPackageTimeTaskID: null
	,syncPackageTimeoutTaskID: null
	,sendBeginTaskID: null
	,sendChecksumTaskID: null
	,syncTimeoutTaskID: null
	,localID: null
	,remoteID: null
	,onInput: null
	,onCalculateChecksum: null
	,onConfirmFrame: null
	,averageRTT: null
	,averageLocalAdvantage: null
	,averageRemoteAdvantage: null
	,successfulSleepChecks: null
	,state: null
	,sleepFrames: null
	,isInputIdle: null
	,advantageSign: function(x) {
		if(x < 0) {
			return -1;
		} else {
			return 1;
		}
	}
	,error: function(message) {
		this.dispose();
		ScreenManager.pushOverlay(ui_ErrorPage.mainMenuPage(message));
	}
	,compareChecksums: function() {
		if(this.lastLocalChecksum == null || this.lastRemoteChecksum == null) {
			return;
		}
		if(this.lastLocalChecksum != this.lastRemoteChecksum) {
			if(++this.desyncCounter > 5) {
				this.error("Desync Detected");
			}
		}
		this.lastLocalChecksum = null;
		this.lastRemoteChecksum = null;
	}
	,initDataConnection: function(dc) {
		var _gthis = this;
		this.dc = dc;
		dc.on(peerjs_DataConnectionEventType.Open,function() {
			_gthis.initSyncingState();
		});
		dc.on(peerjs_DataConnectionEventType.Data,$bind(this,this.onMessage));
	}
	,onMessage: function(msg) {
		var parts = msg.split(";");
		switch(parts[0]) {
		case "0":
			if(this.state == 3) {
				this.onInputPacket(parts);
			}
			break;
		case "1":
			this.onSyncRequest(parts);
			break;
		case "2":
			this.onSyncResponse(parts);
			break;
		case "3":
			if(this.state == 3) {
				this.onInputAckPacket(parts);
			}
			break;
		case "4":
			if(this.state == 2) {
				this.onBeginRequest(parts);
			}
			break;
		case "5":
			if(this.state == 2) {
				this.onBeginResponse(parts);
			}
			break;
		case "6":
			if(this.state == 3) {
				this.onChecksumRequest(parts);
			}
			break;
		case "7":
			if(this.state == 3) {
				this.onChecksumResponse(parts);
			}
			break;
		case "8":
			if(this.state == 3) {
				this.onChecksumUpdate(parts);
			}
			break;
		default:
		}
	}
	,initSyncingState: function() {
		var _gthis = this;
		this.roundTripCounter = 0;
		this.localAdvantageCounter = 0;
		this.remoteAdvantageCounter = 0;
		this.successfulSleepChecks = 0;
		this.sleepFrames = 0;
		this.setSyncInterval(100);
		this.syncTimeoutTaskID = kha_Scheduler.addTimeTask(function() {
			_gthis.error("Synchronization Failed");
		},15);
		this.isInputIdle = true;
		this.state = 1;
	}
	,sendSyncRequest: function() {
		var ping = kha_Scheduler.realTime() * 1000 | 0;
		var prediction = null;
		if(this.averageRTT != null) {
			prediction = this.frameCounter.value + (this.averageRTT / 2 * 60 / 1000 | 0);
		}
		this.dc.send("" + "1" + ";" + ping + ";" + prediction + ";" + (this.state == 3 ? "R" : "O"));
	}
	,onSyncRequest: function(parts) {
		this.resetSyncTimeoutTimer();
		var pong = parts[1];
		var prediction = Std.parseInt(parts[2]);
		var adv = null;
		if(prediction != null) {
			adv = this.frameCounter.value - prediction;
			this.averageLocalAdvantage = Math.round(0.5 * adv + 0.5 * this.averageLocalAdvantage);
		}
		if(this.state == 1 && parts[3] == "R") {
			this.initRunningState();
		}
		this.dc.send("" + "2" + ";" + pong + ";" + adv);
	}
	,onSyncResponse: function(parts) {
		var pong = Std.parseInt(parts[1]);
		var rtt = (kha_Scheduler.realTime() * 1000 | 0) - pong;
		this.averageRTT = Math.round(0.5 * rtt + 0.5 * this.averageRTT);
		var adv = Std.parseInt(parts[2]);
		if(adv != null) {
			this.averageRemoteAdvantage = Math.round(0.5 * adv + 0.5 * this.averageRemoteAdvantage);
			if(this.sleepFrames == 0 && ++this.remoteAdvantageCounter % 5 == 0) {
				var diff = this.averageLocalAdvantage - this.averageRemoteAdvantage;
				if(this.state == 1 && Math.abs(diff) < 4) {
					if(++this.successfulSleepChecks > 5) {
						this.initBeginningState();
						return;
					}
				} else {
					this.successfulSleepChecks = 0;
				}
				if(!this.isInputIdle) {
					this.sleepFrames = 0;
					return;
				}
				if(this.averageLocalAdvantage < this.averageRemoteAdvantage) {
					this.sleepFrames = 0;
					return;
				}
				var diff = this.averageLocalAdvantage - this.averageRemoteAdvantage;
				var s = Math.round(diff / 2);
				if(s < 2) {
					this.sleepFrames = 0;
					return;
				}
				this.sleepFrames = Math.min(s,9) | 0;
			}
		}
	}
	,initBeginningState: function() {
		var _gthis = this;
		kha_Scheduler.removeTimeTask(this.syncTimeoutTaskID);
		this.sendBeginTaskID = kha_Scheduler.addTimeTask(function() {
			_gthis.dc.send("" + "4");
		},0,0.001);
		this.state = 2;
	}
	,onBeginRequest: function(parts) {
		this.dc.send("" + "5" + ";" + this.beginFrame);
	}
	,onBeginResponse: function(parts) {
		this.beginFrame = Std.parseInt(parts[1]);
		if(this.beginFrame == null) {
			this.beginFrame = this.frameCounter.value + 60;
			return;
		}
		kha_Scheduler.removeTimeTask(this.sendBeginTaskID);
	}
	,onInputPacket: function(parts) {
		var history = [];
		var i = 1;
		var lastFrame = -1;
		while(i < parts.length) {
			var frame = Std.parseInt(parts[i]);
			var actions = Std.parseInt(parts[i + 1]);
			history.push(new game_net_InputHistoryEntry(frame,actions));
			i += 2;
			lastFrame = frame;
		}
		if(lastFrame < this.lastInputFrame) {
			return;
		}
		this.dc.send("" + "3" + ";" + lastFrame);
		this.onInput(history);
		this.lastInputFrame = lastFrame;
	}
	,onInputAckPacket: function(parts) {
		var frame = Std.parseInt(parts[1]);
		if(frame <= this.lastConfirmedFrame) {
			return;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.localInputHistory;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.frame > frame) {
				_g.push(v);
			}
		}
		this.localInputHistory = _g;
		this.lastConfirmedFrame = frame;
		this.onConfirmFrame();
	}
	,onChecksumRequest: function(parts) {
		this.dc.send("" + "7" + ";" + this.nextChecksumFrame);
	}
	,onChecksumResponse: function(parts) {
		this.nextChecksumFrame = Std.parseInt(parts[1]);
		if(this.nextChecksumFrame != null && this.nextChecksumFrame <= this.frameCounter.value) {
			this.nextChecksumFrame = null;
			return;
		}
		if(this.nextChecksumFrame == null) {
			this.nextChecksumFrame = this.frameCounter.value + 120;
			return;
		}
		this.latestChecksumFrame = this.nextChecksumFrame;
	}
	,onChecksumUpdate: function(parts) {
		this.lastRemoteChecksum = parts[1];
		this.compareChecksums();
	}
	,updateSleepCounter: function() {
		if(this.sleepFrames > 0) {
			this.sleepFrames--;
		}
		return this.sleepFrames;
	}
	,initRunningState: function() {
		var _gthis = this;
		this.setSyncInterval(500);
		this.lastInputFrame = -1;
		this.lastConfirmedFrame = -1;
		this.desyncCounter = 0;
		this.latestChecksumFrame = -1;
		this.sendChecksumTaskID = kha_Scheduler.addTimeTask(function() {
			_gthis.dc.send("" + "6");
		},0,1);
		this.state = 3;
	}
	,updateBeginningState: function() {
		if(this.frameCounter.value == this.beginFrame) {
			this.initRunningState();
			return;
		}
		this.frameCounter.update();
	}
	,updateRunningState: function() {
		if(this.updateSleepCounter() > 0) {
			return;
		}
		if(this.frameCounter.value == this.latestChecksumFrame) {
			this.lastLocalChecksum = this.onCalculateChecksum();
			this.dc.send("" + "8" + ";" + this.lastLocalChecksum);
			this.nextChecksumFrame = null;
			this.compareChecksums();
		}
		this.frameCounter.update();
	}
	,resetSyncTimeoutTimer: function() {
		var _gthis = this;
		kha_Scheduler.removeTimeTask(this.syncPackageTimeoutTaskID);
		this.syncPackageTimeoutTaskID = kha_Scheduler.addTimeTask(function() {
			_gthis.error("Connection Error: Sync Package Timeout");
		},2);
	}
	,setSyncInterval: function(interval) {
		kha_Scheduler.removeTimeTask(this.syncPackageTimeTaskID);
		this.syncPackageTimeTaskID = kha_Scheduler.addTimeTask($bind(this,this.sendSyncRequest),0,interval / 1000);
	}
	,sendInput: function(frame,actions) {
		this.localInputHistory.push(new game_net_InputHistoryEntry(frame,actions));
		var msg = "" + "0";
		var _g = 0;
		var _g1 = this.localInputHistory;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			msg += ";" + e.frame + ";" + e.actions;
		}
		this.dc.send(msg);
	}
	,dispose: function() {
		kha_Scheduler.removeTimeTask(this.syncPackageTimeTaskID);
		kha_Scheduler.removeTimeTask(this.syncPackageTimeoutTaskID);
		kha_Scheduler.removeTimeTask(this.sendChecksumTaskID);
		kha_Scheduler.removeTimeTask(this.syncTimeoutTaskID);
		this.peer.destroy();
	}
	,update: function() {
		switch(this.state) {
		case 1:case 3:
			this.updateRunningState();
			break;
		case 2:
			this.updateBeginningState();
			break;
		default:
		}
	}
	,__class__: game_net_SessionManager
};
var game_particles_GarbageBulletParticleOptions = function(begin,control,target,beginScale,targetScale,duration,color,onFinish) {
	this.begin = begin;
	this.control = control;
	this.target = target;
	this.beginScale = beginScale;
	this.targetScale = targetScale;
	this.duration = duration;
	this.color = color;
	this.onFinish = onFinish;
};
$hxClasses["game.particles.GarbageBulletParticleOptions"] = game_particles_GarbageBulletParticleOptions;
game_particles_GarbageBulletParticleOptions.__name__ = "game.particles.GarbageBulletParticleOptions";
game_particles_GarbageBulletParticleOptions.prototype = {
	begin: null
	,control: null
	,target: null
	,beginScale: null
	,targetScale: null
	,duration: null
	,color: null
	,onFinish: null
	,__class__: game_particles_GarbageBulletParticleOptions
};
var game_particles_IParticle = function() { };
$hxClasses["game.particles.IParticle"] = game_particles_IParticle;
game_particles_IParticle.__name__ = "game.particles.IParticle";
game_particles_IParticle.__isInterface__ = true;
game_particles_IParticle.__interfaces__ = [game_copying_ICopy];
game_particles_IParticle.prototype = {
	isAnimationFinished: null
	,update: null
	,render: null
	,copyFrom: null
	,__class__: game_particles_IParticle
};
var game_particles_GarbageBulletParticle = function(opts) {
	this.begin = opts.begin;
	this.control = opts.control;
	this.target = opts.target;
	this.beginScale = opts.beginScale;
	this.targetScale = opts.targetScale;
	this.duration = opts.duration;
	this.color = opts.color;
	this.onFinish = opts.onFinish;
	this.trailParts = new game_copying_CopyableArray([]);
};
$hxClasses["game.particles.GarbageBulletParticle"] = game_particles_GarbageBulletParticle;
game_particles_GarbageBulletParticle.__name__ = "game.particles.GarbageBulletParticle";
game_particles_GarbageBulletParticle.__interfaces__ = [game_particles_IParticle];
game_particles_GarbageBulletParticle.create = function(opts) {
	var p = new game_particles_GarbageBulletParticle(opts);
	var begin = opts.begin;
	p.prevX = begin.x;
	p.prevY = begin.y;
	p.currentX = begin.x;
	p.currentY = begin.y;
	p.t = 0;
	p.isAnimationFinished = false;
	return p;
};
game_particles_GarbageBulletParticle.prototype = {
	begin: null
	,control: null
	,target: null
	,beginScale: null
	,targetScale: null
	,duration: null
	,color: null
	,onFinish: null
	,trailParts: null
	,prevX: null
	,prevY: null
	,currentX: null
	,currentY: null
	,t: null
	,isAnimationFinished: null
	,copy: function() {
		return new game_particles_GarbageBulletParticle(new game_particles_GarbageBulletParticleOptions(this.begin,this.control,this.target,this.beginScale,this.targetScale,this.duration,this.color,this.onFinish)).copyFrom(this);
	}
	,update: function() {
		this.prevX = this.currentX;
		this.prevY = this.currentY;
		var m1 = utils_Utils.pointLerp(this.begin,this.control,this.t);
		var m2 = utils_Utils.pointLerp(this.control,this.target,this.t);
		var current = utils_Utils.pointLerp(m1,m2,this.t);
		this.currentX = current.x;
		this.currentY = current.y;
		this.trailParts.data.push(game_particles_GarbageBulletTrailParticle.create(new game_particles_GarbageBulletTrailParticleOptions(this.currentX,this.currentY,this.color)));
		var _g = 0;
		var _g1 = this.trailParts.data;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.update();
		}
		this.t += 1 / this.duration;
		if(this.t >= 1) {
			this.onFinish();
			this.isAnimationFinished = true;
		}
	}
	,render: function(g,alpha) {
		var min = this.beginScale;
		var scale = min + (this.targetScale - min) * this.t;
		var min = this.prevX;
		var lerpX = min + (this.currentX - min) * alpha;
		var min = this.prevY;
		var lerpY = min + (this.currentY - min) * alpha;
		var _g = 0;
		var _g1 = this.trailParts.data;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.render(g,alpha);
		}
		g.set_color(this.color);
		kha_graphics2_GraphicsExtension.fillCircle(g,lerpX,lerpY,32 * scale);
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.trailParts.copyFrom(other.trailParts);
		this.prevX = other.prevX;
		this.prevY = other.prevY;
		this.currentX = other.currentX;
		this.currentY = other.currentY;
		this.t = other.t;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_particles_GarbageBulletParticle
};
var game_particles_GarbageBulletTrailParticleOptions = function(x,y,color) {
	this.x = x;
	this.y = y;
	this.color = color;
};
$hxClasses["game.particles.GarbageBulletTrailParticleOptions"] = game_particles_GarbageBulletTrailParticleOptions;
game_particles_GarbageBulletTrailParticleOptions.__name__ = "game.particles.GarbageBulletTrailParticleOptions";
game_particles_GarbageBulletTrailParticleOptions.prototype = {
	x: null
	,y: null
	,color: null
	,__class__: game_particles_GarbageBulletTrailParticleOptions
};
var game_particles_GarbageBulletTrailParticle = function(opts) {
	this.x = opts.x;
	this.y = opts.y;
	this.color = opts.color;
};
$hxClasses["game.particles.GarbageBulletTrailParticle"] = game_particles_GarbageBulletTrailParticle;
game_particles_GarbageBulletTrailParticle.__name__ = "game.particles.GarbageBulletTrailParticle";
game_particles_GarbageBulletTrailParticle.__interfaces__ = [game_particles_IParticle];
game_particles_GarbageBulletTrailParticle.create = function(opts) {
	var p = new game_particles_GarbageBulletTrailParticle(opts);
	p.lastT = 0;
	p.t = 0;
	p.isAnimationFinished = false;
	return p;
};
game_particles_GarbageBulletTrailParticle.prototype = {
	x: null
	,y: null
	,color: null
	,lastT: null
	,t: null
	,isAnimationFinished: null
	,copy: function() {
		return new game_particles_GarbageBulletTrailParticle(new game_particles_GarbageBulletTrailParticleOptions(this.x,this.y,this.color)).copyFrom(this);
	}
	,update: function() {
		if(this.t == 20) {
			this.isAnimationFinished = true;
			return;
		}
		this.lastT = this.t;
		this.t++;
	}
	,render: function(g,alpha) {
		var min = this.lastT;
		var lerpT = min + (this.t - min) * alpha;
		var tt = lerpT / 20;
		var r = 32 + -28 * tt;
		var bgOpacity = 0.5 + -0.5 * tt;
		var fgOpacity = 1 + -1 * tt;
		g.set_color(this.color);
		g.pushOpacity(bgOpacity);
		kha_graphics2_GraphicsExtension.fillCircle(g,this.x,this.y,r + 16,16);
		g.popOpacity();
		g.pushOpacity(fgOpacity);
		kha_graphics2_GraphicsExtension.fillCircle(g,this.x,this.y,r,4);
		g.popOpacity();
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.lastT = other.lastT;
		this.t = other.t;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_particles_GarbageBulletTrailParticle
};
var game_particles_GeloPopParticleOptions = function(dx,dyIncrement,color,maxT,x,y,dy) {
	this.dx = dx;
	this.dyIncrement = dyIncrement;
	this.color = color;
	this.maxT = maxT;
	this.x = x;
	this.y = y;
	this.dy = dy;
};
$hxClasses["game.particles.GeloPopParticleOptions"] = game_particles_GeloPopParticleOptions;
game_particles_GeloPopParticleOptions.__name__ = "game.particles.GeloPopParticleOptions";
game_particles_GeloPopParticleOptions.prototype = {
	dx: null
	,dyIncrement: null
	,color: null
	,maxT: null
	,x: null
	,y: null
	,dy: null
	,__class__: game_particles_GeloPopParticleOptions
};
var game_particles_GeloPopParticle = function(opts) {
	this.dx = opts.dx;
	this.dyIncrement = opts.dyIncrement;
	this.color = opts.color;
	this.maxT = opts.maxT;
	this.x = opts.x;
	this.y = opts.y;
	this.dy = opts.dy;
};
$hxClasses["game.particles.GeloPopParticle"] = game_particles_GeloPopParticle;
game_particles_GeloPopParticle.__name__ = "game.particles.GeloPopParticle";
game_particles_GeloPopParticle.__interfaces__ = [game_particles_IParticle];
game_particles_GeloPopParticle.create = function(opts) {
	var p = new game_particles_GeloPopParticle(opts);
	p.lastX = opts.x;
	p.lastY = opts.y;
	p.x = opts.x;
	p.y = opts.y;
	p.dy = opts.dy;
	p.t = 0;
	p.isAnimationFinished = false;
	return p;
};
game_particles_GeloPopParticle.prototype = {
	dx: null
	,dyIncrement: null
	,color: null
	,maxT: null
	,x: null
	,y: null
	,dy: null
	,lastX: null
	,lastY: null
	,t: null
	,isAnimationFinished: null
	,copy: function() {
		return new game_particles_GeloPopParticle(new game_particles_GeloPopParticleOptions(this.dx,this.dyIncrement,this.color,this.maxT,this.x,this.y,this.dy)).copyFrom(this);
	}
	,init: function() {
		this.t = 0;
		this.isAnimationFinished = false;
	}
	,update: function() {
		if(this.t >= this.maxT) {
			this.isAnimationFinished = true;
			return;
		}
		this.lastX = this.x;
		this.lastY = this.y;
		this.dy += this.dyIncrement;
		this.x += this.dx;
		this.y += this.dy;
		this.t++;
	}
	,render: function(g,alpha) {
		var min = this.lastX;
		var lerpedX = min + (this.x - min) * alpha;
		var min = this.lastY;
		var lerpedY = min + (this.y - min) * alpha;
		var r = Math.min(72 + -72 * (this.t / this.maxT),48);
		g.set_color(this.color);
		g.pushOpacity(0.5);
		kha_graphics2_GraphicsExtension.fillCircle(g,lerpedX,lerpedY,r);
		g.popOpacity();
		kha_graphics2_GraphicsExtension.fillCircle(g,lerpedX,lerpedY,Math.max(r - 24,0));
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.dy = other.dy;
		this.lastX = other.lastX;
		this.lastY = other.lastY;
		this.t = other.t;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_particles_GeloPopParticle
};
var game_particles_ParticleLayer = $hxEnums["game.particles.ParticleLayer"] = { __ename__:"game.particles.ParticleLayer",__constructs__:null
	,BACK: {_hx_name:"BACK",_hx_index:0,__enum__:"game.particles.ParticleLayer",toString:$estr}
	,FRONT: {_hx_name:"FRONT",_hx_index:1,__enum__:"game.particles.ParticleLayer",toString:$estr}
};
game_particles_ParticleLayer.__constructs__ = [game_particles_ParticleLayer.BACK,game_particles_ParticleLayer.FRONT];
var game_particles_ParticleManager = function() {
	this.backParticles = new game_copying_CopyableArray([]);
	this.frontParticles = new game_copying_CopyableArray([]);
};
$hxClasses["game.particles.ParticleManager"] = game_particles_ParticleManager;
game_particles_ParticleManager.__name__ = "game.particles.ParticleManager";
game_particles_ParticleManager.__interfaces__ = [game_copying_ICopyFrom];
game_particles_ParticleManager.prototype = {
	backParticles: null
	,frontParticles: null
	,updateArray: function(arr) {
		var i = arr.length;
		while(--i >= 0) {
			var p = arr[i];
			p.update();
			if(p.isAnimationFinished) {
				arr.splice(i,1);
			}
		}
	}
	,renderArray: function(g,arr,alpha) {
		var _g = 0;
		while(_g < arr.length) {
			var p = arr[_g];
			++_g;
			p.render(g,alpha);
		}
	}
	,add: function(layer,particle) {
		switch(layer._hx_index) {
		case 0:
			this.backParticles.data.push(particle);
			break;
		case 1:
			this.frontParticles.data.push(particle);
			break;
		}
	}
	,update: function() {
		this.updateArray(this.backParticles.data);
		this.updateArray(this.frontParticles.data);
	}
	,renderBackground: function(g,alpha) {
		this.renderArray(g,this.backParticles.data,alpha);
	}
	,renderForeground: function(g,alpha) {
		this.renderArray(g,this.frontParticles.data,alpha);
	}
	,copyFrom: function(other) {
		this.backParticles.copyFrom(other.backParticles);
		this.frontParticles.copyFrom(other.frontParticles);
		return this;
	}
	,__class__: game_particles_ParticleManager
};
var game_particles_PixelFloatParticleOptions = function(dx,dy,maxT,color,size,x,y) {
	this.dx = dx;
	this.dy = dy;
	this.maxT = maxT;
	this.color = color;
	this.size = size;
	this.x = x;
	this.y = y;
};
$hxClasses["game.particles.PixelFloatParticleOptions"] = game_particles_PixelFloatParticleOptions;
game_particles_PixelFloatParticleOptions.__name__ = "game.particles.PixelFloatParticleOptions";
game_particles_PixelFloatParticleOptions.prototype = {
	dx: null
	,dy: null
	,maxT: null
	,color: null
	,size: null
	,x: null
	,y: null
	,__class__: game_particles_PixelFloatParticleOptions
};
var game_particles_PixelFloatParticle = function(opts) {
	this.dx = opts.dx;
	this.dy = opts.dy;
	this.maxT = opts.maxT;
	this.color = opts.color;
	this.size = opts.size;
	this.x = opts.x;
	this.y = opts.y;
};
$hxClasses["game.particles.PixelFloatParticle"] = game_particles_PixelFloatParticle;
game_particles_PixelFloatParticle.__name__ = "game.particles.PixelFloatParticle";
game_particles_PixelFloatParticle.__interfaces__ = [game_particles_IParticle];
game_particles_PixelFloatParticle.create = function(opts) {
	var p = new game_particles_PixelFloatParticle(opts);
	p.lastX = opts.x;
	p.lastY = opts.y;
	p.lastT = 0;
	p.x = opts.x;
	p.y = opts.y;
	p.t = 0;
	p.isAnimationFinished = false;
	return p;
};
game_particles_PixelFloatParticle.prototype = {
	dx: null
	,dy: null
	,maxT: null
	,color: null
	,size: null
	,x: null
	,y: null
	,lastX: null
	,lastY: null
	,lastT: null
	,t: null
	,isAnimationFinished: null
	,copy: function() {
		return new game_particles_PixelFloatParticle(new game_particles_PixelFloatParticleOptions(this.dx,this.dy,this.maxT,this.color,this.size,this.x,this.y)).copyFrom(this);
	}
	,update: function() {
		if(this.t == this.maxT) {
			this.isAnimationFinished = true;
			return;
		}
		this.lastX = this.x;
		this.lastY = this.y;
		this.lastT = this.t;
		this.x += this.dx;
		this.y += this.dy;
		this.t++;
	}
	,render: function(g,alpha) {
		var min = this.lastX;
		var lerpedX = min + (this.x - min) * alpha;
		var min = this.lastY;
		var lerpedY = min + (this.y - min) * alpha;
		var min = this.lastT;
		var lerpedT = min + (this.t - min) * alpha;
		var opacity = 1 + -1 * (lerpedT / this.maxT);
		g.set_color(this.color);
		g.pushOpacity(opacity);
		kha_graphics2_GraphicsExtension.fillCircle(g,lerpedX,lerpedY,this.size,16);
		g.popOpacity();
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.lastX = other.lastX;
		this.lastY = other.lastY;
		this.lastT = other.lastT;
		this.t = other.t;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_particles_PixelFloatParticle
};
var game_particles_SmallStarParticleOptions = function(x,y,color) {
	this.x = x;
	this.y = y;
	this.color = color;
};
$hxClasses["game.particles.SmallStarParticleOptions"] = game_particles_SmallStarParticleOptions;
game_particles_SmallStarParticleOptions.__name__ = "game.particles.SmallStarParticleOptions";
game_particles_SmallStarParticleOptions.prototype = {
	x: null
	,y: null
	,color: null
	,__class__: game_particles_SmallStarParticleOptions
};
var game_particles_SmallStarParticle = function(opts) {
	this.x = opts.x;
	this.y = opts.y;
	this.color = opts.color;
};
$hxClasses["game.particles.SmallStarParticle"] = game_particles_SmallStarParticle;
game_particles_SmallStarParticle.__name__ = "game.particles.SmallStarParticle";
game_particles_SmallStarParticle.__interfaces__ = [game_particles_IParticle];
game_particles_SmallStarParticle.create = function(opts) {
	var p = new game_particles_SmallStarParticle(opts);
	p.t = 0;
	p.isAnimationFinished = false;
	return p;
};
game_particles_SmallStarParticle.prototype = {
	x: null
	,y: null
	,color: null
	,t: null
	,isAnimationFinished: null
	,copy: function() {
		return new game_particles_SmallStarParticle(new game_particles_SmallStarParticleOptions(this.x,this.y,this.color)).copyFrom(this);
	}
	,update: function() {
		if(this.t == 21) {
			this.isAnimationFinished = true;
			return;
		}
		this.t++;
	}
	,render: function(g,alpha) {
		var calc = Math.sin(this.t / 10);
		g.set_color(this.color);
		var _this = g.transformations[g.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = this.x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = this.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = calc;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = calc;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var m__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var m__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var m__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var m__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var m__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var m__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var m__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var m__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var m__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var trans__00 = _this._00 * m__001 + _this._10 * m__011 + _this._20 * m__021;
		var trans__10 = _this._00 * m__101 + _this._10 * m__111 + _this._20 * m__121;
		var trans__20 = _this._00 * m__201 + _this._10 * m__211 + _this._20 * m__221;
		var trans__01 = _this._01 * m__001 + _this._11 * m__011 + _this._21 * m__021;
		var trans__11 = _this._01 * m__101 + _this._11 * m__111 + _this._21 * m__121;
		var trans__21 = _this._01 * m__201 + _this._11 * m__211 + _this._21 * m__221;
		var trans__02 = _this._02 * m__001 + _this._12 * m__011 + _this._22 * m__021;
		var trans__12 = _this._02 * m__101 + _this._12 * m__111 + _this._22 * m__121;
		var trans__22 = _this._02 * m__201 + _this._12 * m__211 + _this._22 * m__221;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		g.pushOpacity(calc);
		g.drawSubImage(kha_Assets.images.Particles,-32,-32,64,0,64,64);
		g.popOpacity();
		g.popTransformation();
		g.set_color(-1);
	}
	,copyFrom: function(other) {
		this.t = other.t;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_particles_SmallStarParticle
};
var game_previews_IPreview = function() { };
$hxClasses["game.previews.IPreview"] = game_previews_IPreview;
game_previews_IPreview.__name__ = "game.previews.IPreview";
game_previews_IPreview.__isInterface__ = true;
game_previews_IPreview.__interfaces__ = [game_copying_ICopyFrom];
game_previews_IPreview.prototype = {
	isAnimationFinished: null
	,startAnimation: null
	,update: null
	,render: null
	,copyFrom: null
	,__class__: game_previews_IPreview
};
var game_previews_VerticalPreview = function(queue) {
	this.queue = queue;
	this.queueY = 64;
	this.targetY = 64;
	this.isAnimationFinished = true;
};
$hxClasses["game.previews.VerticalPreview"] = game_previews_VerticalPreview;
game_previews_VerticalPreview.__name__ = "game.previews.VerticalPreview";
game_previews_VerticalPreview.__interfaces__ = [game_previews_IPreview];
game_previews_VerticalPreview.prototype = {
	queue: null
	,t: null
	,queueY: null
	,beginY: null
	,targetY: null
	,isAnimationFinished: null
	,startAnimation: function(index) {
		this.t = 0;
		this.beginY = this.queueY;
		this.targetY = -(160. * index);
		this.isAnimationFinished = false;
	}
	,update: function() {
		if(this.queueY == this.targetY) {
			this.isAnimationFinished = true;
			return;
		}
		var min = this.beginY;
		this.queueY = min + (this.targetY - min) * (this.t / 12);
		this.t++;
	}
	,render: function(g,x,y) {
		var _g = -5;
		while(_g < 8) {
			var i = _g++;
			var index = this.queue.currentIndex + i;
			this.queue.get(index).render(g,x,this.queueY + 160. * index + 96.);
		}
	}
	,copyFrom: function(other) {
		this.t = other.t;
		this.queueY = other.queueY;
		this.beginY = other.beginY;
		this.targetY = other.targetY;
		this.isAnimationFinished = other.isAnimationFinished;
		return this;
	}
	,__class__: game_previews_VerticalPreview
};
var game_randomizers_RandomizerOptions = function(rng,prefsSettings) {
	this.rng = rng;
	this.prefsSettings = prefsSettings;
};
$hxClasses["game.randomizers.RandomizerOptions"] = game_randomizers_RandomizerOptions;
game_randomizers_RandomizerOptions.__name__ = "game.randomizers.RandomizerOptions";
game_randomizers_RandomizerOptions.prototype = {
	rng: null
	,prefsSettings: null
	,__class__: game_randomizers_RandomizerOptions
};
var game_randomizers_Randomizer = function(opts) {
	this.rng = opts.rng;
	this.prefsSettings = opts.prefsSettings;
};
$hxClasses["game.randomizers.Randomizer"] = game_randomizers_Randomizer;
game_randomizers_Randomizer.__name__ = "game.randomizers.Randomizer";
game_randomizers_Randomizer.__interfaces__ = [game_copying_ICopyFrom];
game_randomizers_Randomizer.prototype = {
	rng: null
	,prefsSettings: null
	,pools: null
	,currentPool: null
	,tsu: function() {
		var colorSet = [0,1,2,3,4];
		var swapWith;
		var temp;
		var index = 5;
		while(--index >= 0) {
			swapWith = this.rng.data.GetUpTo(index);
			temp = colorSet[index];
			colorSet[index] = colorSet[swapWith];
			colorSet[swapWith] = temp;
		}
		while(--index >= 0) {
			swapWith = this.rng.data.GetUpTo(index);
			temp = colorSet[index];
			colorSet[index] = colorSet[swapWith];
			colorSet[swapWith] = temp;
		}
		while(--index >= 0) {
			swapWith = this.rng.data.GetUpTo(index);
			temp = colorSet[index];
			colorSet[index] = colorSet[swapWith];
			colorSet[swapWith] = temp;
		}
		while(--index >= 0) {
			swapWith = this.rng.data.GetUpTo(index);
			temp = colorSet[index];
			colorSet[index] = colorSet[swapWith];
			colorSet[swapWith] = temp;
		}
		while(--index >= 0) {
			swapWith = this.rng.data.GetUpTo(index);
			temp = colorSet[index];
			colorSet[index] = colorSet[swapWith];
			colorSet[swapWith] = temp;
		}
		var _g = 3;
		var _g1 = 5 + 1;
		while(_g < _g1) {
			var p = _g++;
			var this1 = this.pools;
			var this2 = new Array(256);
			var v = this2;
			this1.h[p] = v;
			var pool = this.pools.h[p];
			var _g2 = 0;
			while(_g2 < 256) {
				var i = _g2++;
				pool[i] = colorSet[i % p];
			}
			index = 256;
			while(--index >= 0) {
				swapWith = this.rng.data.GetUpTo(255);
				temp = pool[index];
				pool[index] = pool[swapWith];
				pool[swapWith] = temp;
			}
		}
		this.pools.h[4][0] = this.pools.h[3][3];
		this.pools.h[4][1] = this.pools.h[3][2];
		this.pools.h[4][2] = this.pools.h[3][1];
		this.pools.h[4][3] = this.pools.h[3][0];
		this.pools.h[5][3] = this.pools.h[4][6];
		this.pools.h[5][4] = this.pools.h[4][5];
		this.pools.h[5][5] = this.pools.h[4][4];
		this.pools.h[5][6] = this.pools.h[4][3];
	}
	,generatePools: function(type) {
		this.pools = new haxe_ds_IntMap();
		this.tsu();
	}
	,createQueueData: function(dropset) {
		var p = this.pools.h[this.currentPool];
		var groups = [];
		var index = 0;
		var mainColor;
		var otherOptions;
		while(index < 256) {
			var _g = 0;
			while(_g < dropset.length) {
				var type = dropset[_g];
				++_g;
				otherOptions = [];
				otherOptions[0] = new game_gelos_OtherGeloOptions(0,this.prefsSettings,5);
				otherOptions[1] = new game_gelos_OtherGeloOptions(1,this.prefsSettings,5);
				otherOptions[2] = new game_gelos_OtherGeloOptions(2,this.prefsSettings,5);
				otherOptions[3] = new game_gelos_OtherGeloOptions(3,this.prefsSettings,5);
				otherOptions[4] = new game_gelos_OtherGeloOptions(4,this.prefsSettings,5);
				otherOptions[5] = new game_gelos_OtherGeloOptions(5,this.prefsSettings,5);
				otherOptions[6] = new game_gelos_OtherGeloOptions(6,this.prefsSettings,5);
				otherOptions[7] = new game_gelos_OtherGeloOptions(7,this.prefsSettings,5);
				mainColor = p[index++];
				var otherColor = p[index++];
				if(mainColor == null || otherColor == null) {
					return groups;
				}
				otherOptions[1].color = otherColor;
				groups.push(new game_gelogroups_GeloGroupData(mainColor,otherOptions));
			}
		}
		return groups;
	}
	,copyFrom: function(other) {
		this.currentPool = other.currentPool;
		return this;
	}
	,__class__: game_randomizers_Randomizer
};
var game_randomizers_RandomizerType = $hxEnums["game.randomizers.RandomizerType"] = { __ename__:"game.randomizers.RandomizerType",__constructs__:null
	,TSU: {_hx_name:"TSU",_hx_index:0,__enum__:"game.randomizers.RandomizerType",toString:$estr}
};
game_randomizers_RandomizerType.__constructs__ = [game_randomizers_RandomizerType.TSU];
var game_rules_AnimationsType = $hxEnums["game.rules.AnimationsType"] = { __ename__:"game.rules.AnimationsType",__constructs__:null
	,TSU: {_hx_name:"TSU",_hx_index:0,__enum__:"game.rules.AnimationsType",toString:$estr}
	,FEVER: {_hx_name:"FEVER",_hx_index:1,__enum__:"game.rules.AnimationsType",toString:$estr}
};
game_rules_AnimationsType.__constructs__ = [game_rules_AnimationsType.TSU,game_rules_AnimationsType.FEVER];
var game_rules_IRule = function() { };
$hxClasses["game.rules.IRule"] = game_rules_IRule;
game_rules_IRule.__name__ = "game.rules.IRule";
game_rules_IRule.__isInterface__ = true;
game_rules_IRule.__interfaces__ = [hxbit_Serializable];
var game_rules_EndlessRule = function(rngSeed,marginTime,targetPoints,softDropBonus,popCount,vanishHiddenRows,groupBonusTableType,colorBonusTableType,powerTableType,dropBonusGarbage,allClearReward,physics,animations,dropSpeed,randomizeGarbage,__uid) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.rngSeed = rngSeed;
	this.marginTime = marginTime;
	this.targetPoints = targetPoints;
	this.softDropBonus = softDropBonus;
	this.popCount = popCount;
	this.vanishHiddenRows = vanishHiddenRows;
	this.groupBonusTableType = groupBonusTableType;
	this.colorBonusTableType = colorBonusTableType;
	this.powerTableType = powerTableType;
	this.dropBonusGarbage = dropBonusGarbage;
	this.allClearReward = allClearReward;
	this.physics = physics;
	this.animations = animations;
	this.dropSpeed = dropSpeed;
	this.randomizeGarbage = randomizeGarbage;
	if(__uid != null) {
		this.__uid = __uid;
	}
};
$hxClasses["game.rules.EndlessRule"] = game_rules_EndlessRule;
game_rules_EndlessRule.__name__ = "game.rules.EndlessRule";
game_rules_EndlessRule.__interfaces__ = [game_rules_IRule];
game_rules_EndlessRule.doSerialize = function(__ctx,__this) {
	__ctx.addInt(__this.rngSeed);
	__ctx.addInt(__this.marginTime);
	__ctx.addInt(__this.targetPoints);
	__ctx.addFloat(__this.softDropBonus);
	__ctx.addInt(__this.popCount);
	__ctx.addBool(__this.vanishHiddenRows);
	__ctx.addString(__this.groupBonusTableType);
	__ctx.addString(__this.colorBonusTableType);
	__ctx.addString(__this.powerTableType);
	__ctx.addBool(__this.dropBonusGarbage);
	__ctx.addInt(__this.allClearReward);
	__ctx.usedEnums.h["game.rules.PhysicsType"] = true;
	hxbit_enumSer_Game_$rules_$PhysicsType.doSerialize(__ctx,__this.physics);
	__ctx.usedEnums.h["game.rules.AnimationsType"] = true;
	hxbit_enumSer_Game_$rules_$AnimationsType.doSerialize(__ctx,__this.animations);
	__ctx.addFloat(__this.dropSpeed);
	__ctx.addBool(__this.randomizeGarbage);
};
game_rules_EndlessRule.doUnserialize = function(__ctx,__this) {
	__this.rngSeed = __ctx.getInt();
	__this.marginTime = __ctx.getInt();
	__this.targetPoints = __ctx.getInt();
	var v = __ctx.input.getFloat(__ctx.inPos);
	__ctx.inPos += 4;
	__this.softDropBonus = v;
	__this.popCount = __ctx.getInt();
	__this.vanishHiddenRows = __ctx.input.b[__ctx.inPos++] != 0;
	var v0 = __ctx.getString();
	__this.groupBonusTableType = v0;
	var v0 = __ctx.getString();
	__this.colorBonusTableType = v0;
	var v0 = __ctx.getString();
	__this.powerTableType = v0;
	__this.dropBonusGarbage = __ctx.input.b[__ctx.inPos++] != 0;
	__this.allClearReward = __ctx.getInt();
	var __e = hxbit_enumSer_Game_$rules_$PhysicsType.doUnserialize(__ctx);
	__this.physics = __e;
	var __e = hxbit_enumSer_Game_$rules_$AnimationsType.doUnserialize(__ctx);
	__this.animations = __e;
	var v = __ctx.input.getFloat(__ctx.inPos);
	__ctx.inPos += 4;
	__this.dropSpeed = v;
	__this.randomizeGarbage = __ctx.input.b[__ctx.inPos++] != 0;
};
game_rules_EndlessRule.prototype = {
	rngSeed: null
	,marginTime: null
	,targetPoints: null
	,softDropBonus: null
	,popCount: null
	,vanishHiddenRows: null
	,groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,physics: null
	,animations: null
	,dropSpeed: null
	,randomizeGarbage: null
	,__uid: null
	,getCLID: function() {
		return game_rules_EndlessRule.__clid;
	}
	,serialize: function(__ctx) {
		game_rules_EndlessRule.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("rngSeed");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("marginTime");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("targetPoints");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("softDropBonus");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("popCount");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("vanishHiddenRows");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("groupBonusTableType");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("colorBonusTableType");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("powerTableType");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("dropBonusGarbage");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("allClearReward");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("physics");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PEnum("game.rules.PhysicsType"));
		schema.fieldsNames.push("animations");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PEnum("game.rules.AnimationsType"));
		schema.fieldsNames.push("dropSpeed");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("randomizeGarbage");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.isFinal = hxbit_Serializer.isClassFinal(game_rules_EndlessRule.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_rules_EndlessRule.doUnserialize(__ctx,this);
	}
	,__class__: game_rules_EndlessRule
};
var game_rules_GroupBonusTable = {};
game_rules_GroupBonusTable.get = function(this1,clears) {
	var index = Math.min(this1.length - 1,Math.max(clears - 1,0)) | 0;
	return this1[index];
};
var game_rules_MarginTimeManager = function(startMarginTime,startTargetPoints) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.startMarginTime = startMarginTime;
	this.startTargetPoints = startTargetPoints;
	this.reset();
	this.isEnabled = true;
	this.targetPoints = startTargetPoints;
};
$hxClasses["game.rules.MarginTimeManager"] = game_rules_MarginTimeManager;
game_rules_MarginTimeManager.__name__ = "game.rules.MarginTimeManager";
game_rules_MarginTimeManager.__interfaces__ = [hxbit_Serializable,game_copying_ICopyFrom];
game_rules_MarginTimeManager.doSerialize = function(__ctx,__this) {
	__ctx.addInt(__this.marginTime);
};
game_rules_MarginTimeManager.doUnserialize = function(__ctx,__this) {
	__this.marginTime = __ctx.getInt();
};
game_rules_MarginTimeManager.prototype = {
	changeCounter: null
	,marginTime: null
	,startMarginTime: null
	,startTargetPoints: null
	,isEnabled: null
	,targetPoints: null
	,reset: function() {
		this.marginTime = -this.startMarginTime * 60;
		this.changeCounter = 0;
		this.targetPoints = this.startTargetPoints;
	}
	,update: function() {
		if(!this.isEnabled || this.changeCounter > 12 || this.targetPoints <= 1) {
			return;
		}
		if(this.marginTime == 0) {
			this.targetPoints = this.targetPoints * 0.75 | 0;
		} else if(this.marginTime > 0 && this.marginTime % 960 == 0) {
			this.targetPoints = this.targetPoints / 2 | 0;
			this.changeCounter++;
		}
		++this.marginTime;
	}
	,__uid: null
	,getCLID: function() {
		return game_rules_MarginTimeManager.__clid;
	}
	,serialize: function(__ctx) {
		game_rules_MarginTimeManager.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("marginTime");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(game_rules_MarginTimeManager.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		game_rules_MarginTimeManager.doUnserialize(__ctx,this);
	}
	,copyFrom: function(other) {
		this.changeCounter = other.changeCounter;
		this.marginTime = other.marginTime;
		this.startMarginTime = other.startMarginTime;
		this.startTargetPoints = other.startTargetPoints;
		this.isEnabled = other.isEnabled;
		this.targetPoints = other.targetPoints;
		return this;
	}
	,__class__: game_rules_MarginTimeManager
};
var game_rules_PhysicsType = $hxEnums["game.rules.PhysicsType"] = { __ename__:"game.rules.PhysicsType",__constructs__:null
	,TSU: {_hx_name:"TSU",_hx_index:0,__enum__:"game.rules.PhysicsType",toString:$estr}
	,FEVER: {_hx_name:"FEVER",_hx_index:1,__enum__:"game.rules.PhysicsType",toString:$estr}
};
game_rules_PhysicsType.__constructs__ = [game_rules_PhysicsType.TSU,game_rules_PhysicsType.FEVER];
var game_rules_QueryablePowerTable = function(values,increment) {
	this.values = values;
	this.increment = increment;
};
$hxClasses["game.rules.QueryablePowerTable"] = game_rules_QueryablePowerTable;
game_rules_QueryablePowerTable.__name__ = "game.rules.QueryablePowerTable";
game_rules_QueryablePowerTable.prototype = {
	values: null
	,increment: null
	,get: function(chain) {
		var length = this.values.length;
		if(chain <= length) {
			return this.values[chain - 1];
		}
		var diff = chain - length;
		var extra = diff * this.increment;
		return this.values[length - 1] + extra;
	}
	,__class__: game_rules_QueryablePowerTable
};
var game_rules_VersusRule = function(garbageDropLimit,garbageConfirmGracePeriod,rngSeed,marginTime,targetPoints,softDropBonus,popCount,vanishHiddenRows,groupBonusTableType,colorBonusTableType,powerTableType,dropBonusGarbage,allClearReward,physics,animations,dropSpeed,randomizeGarbage,__uid) {
	game_rules_EndlessRule.call(this,rngSeed,marginTime,targetPoints,softDropBonus,popCount,vanishHiddenRows,groupBonusTableType,colorBonusTableType,powerTableType,dropBonusGarbage,allClearReward,physics,animations,dropSpeed,randomizeGarbage,__uid);
	this.garbageDropLimit = garbageDropLimit;
	this.garbageConfirmGracePeriod = garbageConfirmGracePeriod;
};
$hxClasses["game.rules.VersusRule"] = game_rules_VersusRule;
game_rules_VersusRule.__name__ = "game.rules.VersusRule";
game_rules_VersusRule.doSerialize = function(__ctx,__this) {
	__ctx.addInt(__this.garbageDropLimit);
	__ctx.addInt(__this.garbageConfirmGracePeriod);
};
game_rules_VersusRule.doUnserialize = function(__ctx,__this) {
	__this.garbageDropLimit = __ctx.getInt();
	__this.garbageConfirmGracePeriod = __ctx.getInt();
};
game_rules_VersusRule.__super__ = game_rules_EndlessRule;
game_rules_VersusRule.prototype = $extend(game_rules_EndlessRule.prototype,{
	garbageDropLimit: null
	,garbageConfirmGracePeriod: null
	,getCLID: function() {
		return game_rules_VersusRule.__clid;
	}
	,serialize: function(__ctx) {
		game_rules_EndlessRule.prototype.serialize.call(this,__ctx);
		game_rules_VersusRule.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = game_rules_EndlessRule.prototype.getSerializeSchema.call(this);
		schema.fieldsNames.push("garbageDropLimit");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("garbageConfirmGracePeriod");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(game_rules_VersusRule.__clid);
		return schema;
	}
	,unserialize: function(__ctx) {
		game_rules_EndlessRule.prototype.unserialize.call(this,__ctx);
		game_rules_VersusRule.doUnserialize(__ctx,this);
	}
	,__class__: game_rules_VersusRule
});
var game_screens_GameScreenBase = function() {
	this.font = kha_Assets.fonts.Pixellari;
	this.background = new game_backgrounds_NestBackground(new game_copying_CopyableRNG(kha_System.get_time() * 1000000 | 0));
	this.controlHintContainer = new game_mediators_ControlHintContainer();
	this.isPaused = false;
	ScaleManager.addOnResizeCallback($bind(this,this.onResize));
};
$hxClasses["game.screens.GameScreenBase"] = game_screens_GameScreenBase;
game_screens_GameScreenBase.__name__ = "game.screens.GameScreenBase";
game_screens_GameScreenBase.__interfaces__ = [IScreen];
game_screens_GameScreenBase.prototype = {
	font: null
	,background: null
	,controlHintContainer: null
	,fontSize: null
	,transform: null
	,gameState: null
	,pauseMenu: null
	,isPaused: null
	,onResize: function() {
		var scr = ScaleManager.screen;
		var scale = scr.smallerScale;
		var tlX = (scr.width - 1440 * scale) / 2;
		var tlY = (scr.height - 1080 * scale) / 2;
		this.fontSize = 32 * scale | 0;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tlX;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = tlY;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = scale;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = scale;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		this.transform = new kha_math_FastMatrix3(_this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02,_this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12,_this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22,_this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02,_this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12,_this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22,_this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02,_this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12,_this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22);
	}
	,pause: function(inputDevice) {
		this.pauseMenu.onShow(inputDevice);
		this.isPaused = true;
	}
	,resume: function() {
		this.isPaused = false;
	}
	,updatePaused: function() {
		this.pauseMenu.update();
	}
	,updateRunning: function() {
		this.background.update();
		this.gameState.update();
	}
	,renderGameState: function(g,g4,alpha) {
		this.gameState.render(g,g4,alpha);
	}
	,dispose: function() {
	}
	,update: function() {
		if(this.isPaused) {
			this.updatePaused();
			return;
		}
		this.updateRunning();
	}
	,render: function(g,g4,alpha) {
		this.background.render(g,alpha);
		var trans = this.transform;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		this.renderGameState(g,g4,alpha);
		g.popTransformation();
		if(this.controlHintContainer.isVisible) {
			g.set_font(this.font);
			g.set_fontSize(this.fontSize);
			input_AnyInputDevice.instance.renderControls(g,0,ScaleManager.screen.width,0,this.controlHintContainer.value.data);
		}
		if(this.isPaused) {
			this.pauseMenu.render(g,alpha);
		}
	}
	,__class__: game_screens_GameScreenBase
};
var game_screens_BackupStateGameScreen = function(gameStateBuilder) {
	game_screens_GameScreenBase.call(this);
	this.stateBuilder = gameStateBuilder;
	this.stateBuilder.controlHintContainer = this.controlHintContainer;
	this.stateBuilder.pauseMediator = new game_mediators_PauseMediator($bind(this,this.pause),$bind(this,this.resume));
	this.stateBuilder.saveGameStateMediator = new game_mediators_SaveGameStateMediator($bind(this,this.loadState),$bind(this,this.saveState));
	this.stateBuilder.build();
	this.gameState = this.stateBuilder.gameState;
	this.pauseMenu = this.stateBuilder.pauseMenu;
	this.backupStateBuilder = gameStateBuilder.createBackupBuilder();
	this.backupStateBuilder.build();
	this.backupState = this.backupStateBuilder.gameState;
};
$hxClasses["game.screens.BackupStateGameScreen"] = game_screens_BackupStateGameScreen;
game_screens_BackupStateGameScreen.__name__ = "game.screens.BackupStateGameScreen";
game_screens_BackupStateGameScreen.__super__ = game_screens_GameScreenBase;
game_screens_BackupStateGameScreen.prototype = $extend(game_screens_GameScreenBase.prototype,{
	stateBuilder: null
	,backupStateBuilder: null
	,backupState: null
	,loadState: function() {
		this.stateBuilder.copyFrom(this.backupStateBuilder);
	}
	,saveState: function() {
		this.backupStateBuilder.copyFrom(this.stateBuilder);
	}
	,__class__: game_screens_BackupStateGameScreen
});
var game_screens_GameScreen = function(gameStateBuilder) {
	game_screens_GameScreenBase.call(this);
	gameStateBuilder.controlHintContainer = this.controlHintContainer;
	gameStateBuilder.pauseMediator = new game_mediators_PauseMediator($bind(this,this.pause),$bind(this,this.resume));
	gameStateBuilder.build();
	this.gameState = gameStateBuilder.gameState;
	this.pauseMenu = gameStateBuilder.pauseMenu;
};
$hxClasses["game.screens.GameScreen"] = game_screens_GameScreen;
game_screens_GameScreen.__name__ = "game.screens.GameScreen";
game_screens_GameScreen.__super__ = game_screens_GameScreenBase;
game_screens_GameScreen.prototype = $extend(game_screens_GameScreenBase.prototype,{
	__class__: game_screens_GameScreen
});
var game_screens_NetplayGameScreenOptions = function(session,frameCounter,gameStateBuilder) {
	this.session = session;
	this.frameCounter = frameCounter;
	this.gameStateBuilder = gameStateBuilder;
};
$hxClasses["game.screens.NetplayGameScreenOptions"] = game_screens_NetplayGameScreenOptions;
game_screens_NetplayGameScreenOptions.__name__ = "game.screens.NetplayGameScreenOptions";
game_screens_NetplayGameScreenOptions.prototype = {
	session: null
	,frameCounter: null
	,gameStateBuilder: null
	,__class__: game_screens_NetplayGameScreenOptions
};
var game_screens_NetplayGameScreen = function(opts) {
	game_screens_GameScreenBase.call(this);
	this.session = opts.session;
	this.frameCounter = opts.frameCounter;
	this.gameStateBuilder = opts.gameStateBuilder;
	this.session.onCalculateChecksum = $bind(this,this.onCalculateChecksum);
	this.session.onConfirmFrame = $bind(this,this.confirmFrame);
	this.gameStateBuilder.controlHintContainer = this.controlHintContainer;
	this.gameStateBuilder.pauseMediator = new game_mediators_PauseMediator($bind(this,this.pause),$bind(this,this.resume));
	this.gameStateBuilder.rollbackMediator = new game_mediators_RollbackMediator($bind(this,this.confirmFrame),$bind(this,this.rollback));
	this.gameStateBuilder.build();
	this.gameState = this.gameStateBuilder.gameState;
	this.pauseMenu = this.gameStateBuilder.pauseMenu;
	this.serializer = new hxbit_Serializer();
	this.lastConfirmedFrame = this.gameStateBuilder.createBackupBuilder();
	this.lastConfirmedFrame.build();
};
$hxClasses["game.screens.NetplayGameScreen"] = game_screens_NetplayGameScreen;
game_screens_NetplayGameScreen.__name__ = "game.screens.NetplayGameScreen";
game_screens_NetplayGameScreen.__super__ = game_screens_GameScreenBase;
game_screens_NetplayGameScreen.prototype = $extend(game_screens_GameScreenBase.prototype,{
	session: null
	,frameCounter: null
	,gameStateBuilder: null
	,serializer: null
	,lastConfirmedFrame: null
	,updatePaused: function() {
		this.pauseMenu.update();
		this.updateGameState();
	}
	,updateRunning: function() {
		this.background.update();
		this.updateGameState();
	}
	,updateGameState: function() {
		this.session.update();
		if(this.session.sleepFrames > 0) {
			return;
		}
		if(this.session.state == 3) {
			this.gameState.update();
		}
	}
	,onCalculateChecksum: function() {
		this.serializer.begin();
		this.gameState.addDesyncInfo(this.serializer);
		var crc = haxe_crypto_Crc32.make(this.serializer.end());
		return HxOverrides.substr(crc == null ? "null" : "" + crc,0,8);
	}
	,confirmFrame: function() {
		this.lastConfirmedFrame.copyFrom(this.gameStateBuilder);
	}
	,rollback: function(resimulate) {
		this.gameStateBuilder.copyFrom(this.lastConfirmedFrame);
		while(--resimulate >= 0) this.gameState.update();
	}
	,dispose: function() {
		this.session.dispose();
	}
	,render: function(g,g4,alpha) {
		game_screens_GameScreenBase.prototype.render.call(this,g,g4,alpha);
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		var status = "L: " + this.session.averageLocalAdvantage + " -- R: " + this.session.averageRemoteAdvantage + " -- RTT: " + this.session.averageRTT;
		var tmp;
		switch(this.session.state) {
		case 0:
			tmp = "Waiting For Peer...";
			break;
		case 1:
			tmp = "Synchronizing -- C: " + this.session.successfulSleepChecks + "/5 -- " + status;
			break;
		case 2:
			tmp = "Synchronized! Game will begin soon...";
			break;
		case 3:
			tmp = "S: " + this.session.sleepFrames + " -- " + status;
			break;
		}
		g.drawString(tmp,0,0);
	}
	,__class__: game_screens_NetplayGameScreen
});
var game_simulation_SimulationStepOptions = function(chain,fieldSnapshot) {
	this.chain = chain;
	this.fieldSnapshot = fieldSnapshot;
};
$hxClasses["game.simulation.SimulationStepOptions"] = game_simulation_SimulationStepOptions;
game_simulation_SimulationStepOptions.__name__ = "game.simulation.SimulationStepOptions";
game_simulation_SimulationStepOptions.prototype = {
	chain: null
	,fieldSnapshot: null
	,__class__: game_simulation_SimulationStepOptions
};
var game_simulation_BeginSimStepOptions = function(groupData,sendsAllClearBonus,dropBonus,groupIndex,chain,fieldSnapshot) {
	game_simulation_SimulationStepOptions.call(this,chain,fieldSnapshot);
	this.groupData = groupData;
	this.sendsAllClearBonus = sendsAllClearBonus;
	this.dropBonus = dropBonus;
	this.groupIndex = groupIndex;
};
$hxClasses["game.simulation.BeginSimStepOptions"] = game_simulation_BeginSimStepOptions;
game_simulation_BeginSimStepOptions.__name__ = "game.simulation.BeginSimStepOptions";
game_simulation_BeginSimStepOptions.__super__ = game_simulation_SimulationStepOptions;
game_simulation_BeginSimStepOptions.prototype = $extend(game_simulation_SimulationStepOptions.prototype,{
	groupData: null
	,sendsAllClearBonus: null
	,dropBonus: null
	,groupIndex: null
	,__class__: game_simulation_BeginSimStepOptions
});
var game_simulation_SimulationStep = function(type,opts) {
	this.chain = opts.chain;
	this.fieldSnapshot = opts.fieldSnapshot;
	this.type = type;
};
$hxClasses["game.simulation.SimulationStep"] = game_simulation_SimulationStep;
game_simulation_SimulationStep.__name__ = "game.simulation.SimulationStep";
game_simulation_SimulationStep.__interfaces__ = [game_copying_ICopy];
game_simulation_SimulationStep.prototype = {
	chain: null
	,fieldSnapshot: null
	,type: null
	,copy: function() {
		return new game_simulation_SimulationStep(this.type,new game_simulation_SimulationStepOptions(this.chain,this.fieldSnapshot));
	}
	,cardRow: function(row) {
		var f = kha_Assets.fonts.Pixellari;
		return f.height(40) + f.height(32) * row;
	}
	,renderBackground: function(g,y,color,size) {
		g.set_color(color);
		g.fillRect(0,y,game_geometries_BoardGeometries.WIDTH,size);
		g.pushOpacity(0.75);
		g.set_color(-16777216);
		g.fillRect(0,y + 4,game_geometries_BoardGeometries.WIDTH,size - 8);
		g.set_color(-1);
		g.popOpacity();
	}
	,renderTitle: function(g,y,title) {
		g.set_fontSize(40);
		g.drawString(title,12,y + 12);
	}
	,renderLabel: function(g,y,alpha) {
	}
	,renderCard: function(g,y,alpha) {
	}
	,copyFrom: function(other) {
		return this;
	}
	,__class__: game_simulation_SimulationStep
};
var game_simulation_BeginSimStep = function(opts) {
	game_simulation_SimulationStep.call(this,game_simulation_SimulationStepType.BEGIN,opts);
	this.groupData = opts.groupData;
	this.sendsAllClearBonus = opts.sendsAllClearBonus;
	this.dropBonus = opts.dropBonus;
	this.groupIndex = opts.groupIndex;
};
$hxClasses["game.simulation.BeginSimStep"] = game_simulation_BeginSimStep;
game_simulation_BeginSimStep.__name__ = "game.simulation.BeginSimStep";
game_simulation_BeginSimStep.__super__ = game_simulation_SimulationStep;
game_simulation_BeginSimStep.prototype = $extend(game_simulation_SimulationStep.prototype,{
	groupData: null
	,sendsAllClearBonus: null
	,dropBonus: null
	,groupIndex: null
	,copy: function() {
		return new game_simulation_BeginSimStep(new game_simulation_BeginSimStepOptions(this.groupData,this.sendsAllClearBonus,this.dropBonus,this.groupIndex,this.chain,this.fieldSnapshot));
	}
	,renderLabel: function(g,y,alpha) {
		this.renderBackground(g,y,-16711936,64);
		this.renderTitle(g,y,"Begin");
	}
	,renderCard: function(g,y,alpha) {
		this.renderBackground(g,y,-16711936,512);
		this.renderTitle(g,y,"Begin");
		g.set_fontSize(32);
		g.drawString("Chain: " + this.chain,12,y + this.cardRow(1));
		g.drawString("Drop bonus: " + this.dropBonus,12,y + this.cardRow(2));
		g.drawString("Sends AC Bonus: " + Std.string(this.sendsAllClearBonus),12,y + this.cardRow(3));
		if(this.groupData != null) {
			g.drawString("Placed Gelo Group:",12,y + this.cardRow(4));
			this.groupData.render(g,172.,y + this.cardRow(5) + 160.);
		}
	}
	,copyFrom: function(other) {
		game_simulation_SimulationStep.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_simulation_BeginSimStep
});
var game_simulation__$ChainSimulator_SimOptions = function(field,sendAllClearBonus,dropBonus,groupIndex,groupData) {
	this.field = field;
	this.sendAllClearBonus = sendAllClearBonus;
	this.dropBonus = dropBonus;
	this.groupIndex = groupIndex;
	this.groupData = groupData;
};
$hxClasses["game.simulation._ChainSimulator.SimOptions"] = game_simulation__$ChainSimulator_SimOptions;
game_simulation__$ChainSimulator_SimOptions.__name__ = "game.simulation._ChainSimulator.SimOptions";
game_simulation__$ChainSimulator_SimOptions.prototype = {
	field: null
	,sendAllClearBonus: null
	,dropBonus: null
	,groupIndex: null
	,groupData: null
	,__class__: game_simulation__$ChainSimulator_SimOptions
};
var game_simulation_ChainSimulatorOptions = function(popCount,vanishHiddenRows,linkBuilder,garbageDisplay,accumulatedDisplay) {
	this.popCount = popCount;
	this.vanishHiddenRows = vanishHiddenRows;
	this.linkBuilder = linkBuilder;
	this.garbageDisplay = garbageDisplay;
	this.accumulatedDisplay = accumulatedDisplay;
};
$hxClasses["game.simulation.ChainSimulatorOptions"] = game_simulation_ChainSimulatorOptions;
game_simulation_ChainSimulatorOptions.__name__ = "game.simulation.ChainSimulatorOptions";
game_simulation_ChainSimulatorOptions.prototype = {
	popCount: null
	,vanishHiddenRows: null
	,linkBuilder: null
	,garbageDisplay: null
	,accumulatedDisplay: null
	,__class__: game_simulation_ChainSimulatorOptions
};
var game_simulation_ChainSimulator = function(opts) {
	this.popCount = opts.popCount;
	this.vanishHiddenRows = opts.vanishHiddenRows;
	this.linkBuilder = opts.linkBuilder;
	this.garbageDisplay = opts.garbageDisplay;
	this.accumulatedDisplay = opts.accumulatedDisplay;
	this.steps = new game_copying_CopyableArray([]);
	this.latestGarbageCounter = 0;
	this.viewIndex = -1;
	this.stepIndex = 0;
};
$hxClasses["game.simulation.ChainSimulator"] = game_simulation_ChainSimulator;
game_simulation_ChainSimulator.__name__ = "game.simulation.ChainSimulator";
game_simulation_ChainSimulator.__interfaces__ = [game_copying_ICopyFrom];
game_simulation_ChainSimulator.prototype = {
	popCount: null
	,vanishHiddenRows: null
	,linkBuilder: null
	,garbageDisplay: null
	,accumulatedDisplay: null
	,steps: null
	,latestChainCounter: null
	,latestGarbageCounter: null
	,viewIndex: null
	,stepIndex: null
	,pushStep: function(step) {
		this.steps.data[this.stepIndex++] = step;
	}
	,pop: function(field) {
		var _gthis = this;
		var popInfo = new game_fields_FieldPopInfo();
		field.checkConnections(function(connected) {
			if(connected.length >= _gthis.popCount.v) {
				popInfo.hasPops = true;
				var firstInGroup = connected[0];
				popInfo.beginners.data.push(new game_gelos_FieldGeloPoint(firstInGroup.color,firstInGroup.x,firstInGroup.y));
				var _g = 0;
				while(_g < connected.length) {
					var c = connected[_g];
					++_g;
					var gelo = field.get(c.x,c.y);
					if(!gelo.damage()) {
						continue;
					}
					var x = c.x;
					var y = c.y;
					popInfo.addClear(gelo.color,x,y);
					field.clear(x,y);
					field.checkAround(x,y,function(aroundGelo,aroundX,aroundY,_) {
						var aroundColor = aroundGelo.color;
						if(!game_gelos_GeloColor.isGarbage(aroundColor)) {
							return;
						}
						if(!aroundGelo.damage()) {
							return;
						}
						popInfo.addClear(aroundColor,aroundX,aroundY);
						field.clear(aroundX,aroundY);
					});
				}
			}
		});
		return popInfo;
	}
	,sim: function(opts) {
		var field = opts.field;
		var sendsAllClearBonus = opts.sendAllClearBonus;
		var links = [];
		var lastRemainder = 0.0;
		var currentACBonus = sendsAllClearBonus;
		var currentDropBonus = opts.dropBonus;
		var step = new game_simulation_BeginSimStep(new game_simulation_BeginSimStepOptions(opts.groupData,sendsAllClearBonus,opts.dropBonus,opts.groupIndex,this.latestChainCounter,field.copy()));
		this.steps.data[this.stepIndex++] = step;
		while(true) {
			field.drop();
			field.setSpriteVariations();
			var step = new game_simulation_DropSimStep(new game_simulation_SimulationStepOptions(this.latestChainCounter,field.copy()));
			this.steps.data[this.stepIndex++] = step;
			var popInfo = this.pop(field);
			if(!popInfo.hasPops) {
				break;
			}
			var linkInfo = this.linkBuilder.build(new game_simulation_LinkInfoBuildParameters(popInfo.clearsByColor.data,++this.latestChainCounter,currentDropBonus,lastRemainder,currentACBonus,this.latestGarbageCounter));
			this.latestGarbageCounter = linkInfo.accumulatedGarbage;
			lastRemainder = linkInfo.garbageRemainder;
			currentACBonus = false;
			currentDropBonus = 0;
			links.push(linkInfo);
			var gDisplay = this.garbageDisplay.copy();
			var accumDisplay = this.accumulatedDisplay.copy();
			gDisplay.startAnimation(linkInfo.garbage);
			accumDisplay.startAnimation(linkInfo.accumulatedGarbage);
			var step1 = new game_simulation_PopSimStep(new game_simulation_PopSimStepOptions(gDisplay,accumDisplay,popInfo,linkInfo,this.latestChainCounter,field.copy()));
			this.steps.data[this.stepIndex++] = step1;
		}
		field.customForEach(0,field.totalRows,function(gelo,_,_1) {
			gelo.stopFalling();
		});
		if(this.vanishHiddenRows.v) {
			field.customForEach(field.garbageRows,field.outerRows,function(_,x,y) {
				field.clear(x,y);
			});
		}
		field.setSpriteVariations();
		var bottomRow = field.totalRows - 1;
		var allClear = true;
		field.customForEach(bottomRow,bottomRow - 1,function(_,_1,_2) {
			allClear = false;
		});
		var _g = this.latestChainCounter;
		var _g1 = field.copy();
		var step = new game_simulation_EndSimStep(new game_simulation_EndSimStepOptions(new game_copying_ConstantCopyableArray(links),allClear,_g,_g1));
		this.steps.data[this.stepIndex++] = step;
	}
	,view: function(delta) {
		this.viewIndex = Math.min(this.steps.data.length - 1,Math.max(this.viewIndex + delta,0)) | 0;
	}
	,simulate: function(opts) {
		this.latestChainCounter = 0;
		this.latestGarbageCounter = 0;
		this.viewIndex = this.stepIndex;
		this.sim(opts);
	}
	,clear: function() {
		this.steps.data.length = 0;
		this.stepIndex = 0;
		this.viewIndex = -1;
	}
	,rewindToPreviousEndStep: function() {
		var passedOne = false;
		while(true) {
			if(this.viewIndex == 0) {
				this.editViewed();
				return;
			}
			if(this.steps.data[this.viewIndex].type == game_simulation_SimulationStepType.END) {
				if(passedOne) {
					this.stepIndex = this.viewIndex + 1;
					return;
				}
				passedOne = true;
			}
			this.view(-1);
		}
	}
	,jumpToBeginStep: function() {
		var i = this.viewIndex;
		while(++i < this.steps.data.length) if(this.steps.data[i].type == game_simulation_SimulationStepType.BEGIN) {
			this.viewIndex = i;
			this.editViewed();
			return;
		}
	}
	,findBeginStep: function() {
		var i = this.viewIndex;
		while(true) {
			var step = this.steps.data[i];
			if(step.type == game_simulation_SimulationStepType.BEGIN) {
				return js_Boot.__cast(step , game_simulation_BeginSimStep);
			}
			--i;
		}
	}
	,modify: function(field) {
		var sendsAllClearBonus;
		var dropBonus;
		var groupIndex;
		this.editViewed();
		var currentStep = this.steps.data[this.viewIndex];
		this.latestChainCounter = currentStep.chain;
		if(currentStep.type == game_simulation_SimulationStepType.BEGIN) {
			var beginStep = js_Boot.__cast(currentStep , game_simulation_BeginSimStep);
			sendsAllClearBonus = beginStep.sendsAllClearBonus;
			dropBonus = beginStep.dropBonus;
			groupIndex = beginStep.groupIndex;
		} else {
			sendsAllClearBonus = false;
			dropBonus = 0;
			groupIndex = null;
		}
		this.sim(new game_simulation__$ChainSimulator_SimOptions(field,sendsAllClearBonus,dropBonus,groupIndex,null));
	}
	,getViewedStep: function() {
		return this.steps.data[this.viewIndex];
	}
	,viewNext: function() {
		this.view(1);
	}
	,viewPrevious: function() {
		this.view(-1);
	}
	,editViewed: function() {
		this.stepIndex = this.viewIndex;
	}
	,nextStep: function() {
		this.stepIndex++;
	}
	,viewLast: function() {
		this.viewIndex = this.steps.data.length - 1;
	}
	,reset: function() {
		this.steps.data.length = 0;
	}
	,copyFrom: function(other) {
		this.latestChainCounter = other.latestChainCounter;
		this.latestGarbageCounter = other.latestGarbageCounter;
		this.viewIndex = other.viewIndex;
		this.stepIndex = other.stepIndex;
		return this;
	}
	,__class__: game_simulation_ChainSimulator
};
var game_simulation_DropSimStep = function(opts) {
	game_simulation_SimulationStep.call(this,game_simulation_SimulationStepType.DROP,opts);
};
$hxClasses["game.simulation.DropSimStep"] = game_simulation_DropSimStep;
game_simulation_DropSimStep.__name__ = "game.simulation.DropSimStep";
game_simulation_DropSimStep.__super__ = game_simulation_SimulationStep;
game_simulation_DropSimStep.prototype = $extend(game_simulation_SimulationStep.prototype,{
	copy: function() {
		return new game_simulation_DropSimStep(new game_simulation_SimulationStepOptions(this.chain,this.fieldSnapshot));
	}
	,renderLabel: function(g,y,alpha) {
		this.renderBackground(g,y,-16776961,64);
		this.renderTitle(g,y,"Drop");
	}
	,renderCard: function(g,y,alpha) {
		this.renderBackground(g,y,-16776961,512);
		this.renderTitle(g,y,"Drop");
		g.set_fontSize(32);
		g.drawString("Chain: " + this.chain,12,y + this.cardRow(1));
	}
	,copyFrom: function(other) {
		game_simulation_SimulationStep.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_simulation_DropSimStep
});
var game_simulation_EndSimStepOptions = function(links,endsInAllClear,chain,fieldSnapshot) {
	game_simulation_SimulationStepOptions.call(this,chain,fieldSnapshot);
	this.links = links;
	this.endsInAllClear = endsInAllClear;
};
$hxClasses["game.simulation.EndSimStepOptions"] = game_simulation_EndSimStepOptions;
game_simulation_EndSimStepOptions.__name__ = "game.simulation.EndSimStepOptions";
game_simulation_EndSimStepOptions.__super__ = game_simulation_SimulationStepOptions;
game_simulation_EndSimStepOptions.prototype = $extend(game_simulation_SimulationStepOptions.prototype,{
	links: null
	,endsInAllClear: null
	,__class__: game_simulation_EndSimStepOptions
});
var game_simulation_EndSimStep = function(opts) {
	game_simulation_SimulationStep.call(this,game_simulation_SimulationStepType.END,opts);
	this.links = opts.links;
	var linkData = this.links.data;
	if(linkData.length == 0) {
		this.totalGarbage = 0;
		this.endsInAllClear = false;
		this.isLastLinkPowerful = false;
		return;
	}
	var lastLink = linkData[linkData.length - 1];
	this.totalGarbage = lastLink.accumulatedGarbage;
	this.endsInAllClear = opts.endsInAllClear;
	this.isLastLinkPowerful = lastLink.isPowerful;
};
$hxClasses["game.simulation.EndSimStep"] = game_simulation_EndSimStep;
game_simulation_EndSimStep.__name__ = "game.simulation.EndSimStep";
game_simulation_EndSimStep.__super__ = game_simulation_SimulationStep;
game_simulation_EndSimStep.prototype = $extend(game_simulation_SimulationStep.prototype,{
	links: null
	,endsInAllClear: null
	,totalGarbage: null
	,isLastLinkPowerful: null
	,copy: function() {
		var _g = this.chain;
		var _g1 = this.fieldSnapshot;
		return new game_simulation_EndSimStep(new game_simulation_EndSimStepOptions(this.links.copy(),this.endsInAllClear,_g,_g1));
	}
	,renderLabel: function(g,y,alpha) {
		this.renderBackground(g,y,-8388480,64);
		this.renderTitle(g,y,"End");
	}
	,renderCard: function(g,y,alpha) {
		this.renderBackground(g,y,-8388480,512);
		this.renderTitle(g,y,"End");
		g.set_fontSize(32);
		g.drawString("Chain: " + this.chain,12,y + this.cardRow(1));
		g.drawString("Total Garbage: " + this.totalGarbage,12,y + this.cardRow(2));
		g.drawString("All Clear: " + Std.string(this.endsInAllClear),12,y + this.cardRow(3));
	}
	,copyFrom: function(other) {
		game_simulation_SimulationStep.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_simulation_EndSimStep
});
var game_simulation_ILinkInfoBuilder = function() { };
$hxClasses["game.simulation.ILinkInfoBuilder"] = game_simulation_ILinkInfoBuilder;
game_simulation_ILinkInfoBuilder.__name__ = "game.simulation.ILinkInfoBuilder";
game_simulation_ILinkInfoBuilder.__isInterface__ = true;
game_simulation_ILinkInfoBuilder.prototype = {
	build: null
	,__class__: game_simulation_ILinkInfoBuilder
};
var game_simulation_LinkInfo = function(chain,score,clearCount,chainPower,groupBonus,colorBonus,garbage,accumulatedGarbage,garbageRemainder,sendsAllClearBonus,isPowerful) {
	this.chain = chain;
	this.score = score;
	this.clearCount = clearCount;
	this.chainPower = chainPower;
	this.groupBonus = groupBonus;
	this.colorBonus = colorBonus;
	this.garbage = garbage;
	this.accumulatedGarbage = accumulatedGarbage;
	this.garbageRemainder = garbageRemainder;
	this.sendsAllClearBonus = sendsAllClearBonus;
	this.isPowerful = isPowerful;
};
$hxClasses["game.simulation.LinkInfo"] = game_simulation_LinkInfo;
game_simulation_LinkInfo.__name__ = "game.simulation.LinkInfo";
game_simulation_LinkInfo.prototype = {
	chain: null
	,score: null
	,clearCount: null
	,chainPower: null
	,groupBonus: null
	,colorBonus: null
	,garbage: null
	,accumulatedGarbage: null
	,garbageRemainder: null
	,sendsAllClearBonus: null
	,isPowerful: null
	,__class__: game_simulation_LinkInfo
};
var game_simulation_LinkInfoBuildParameters = function(clearsByColor,chain,dropBonus,garbageRemainder,sendsAllClearBonus,totalGarbage) {
	this.clearsByColor = clearsByColor;
	this.chain = chain;
	this.dropBonus = dropBonus;
	this.garbageRemainder = garbageRemainder;
	this.sendsAllClearBonus = sendsAllClearBonus;
	this.totalGarbage = totalGarbage;
};
$hxClasses["game.simulation.LinkInfoBuildParameters"] = game_simulation_LinkInfoBuildParameters;
game_simulation_LinkInfoBuildParameters.__name__ = "game.simulation.LinkInfoBuildParameters";
game_simulation_LinkInfoBuildParameters.prototype = {
	clearsByColor: null
	,chain: null
	,dropBonus: null
	,garbageRemainder: null
	,sendsAllClearBonus: null
	,totalGarbage: null
	,__class__: game_simulation_LinkInfoBuildParameters
};
var game_simulation_LinkInfoBuilderOptions = function(groupBonusTableType,colorBonusTableType,powerTableType,dropBonusGarbage,allClearReward,marginManager) {
	this.groupBonusTableType = groupBonusTableType;
	this.colorBonusTableType = colorBonusTableType;
	this.powerTableType = powerTableType;
	this.dropBonusGarbage = dropBonusGarbage;
	this.allClearReward = allClearReward;
	this.marginManager = marginManager;
};
$hxClasses["game.simulation.LinkInfoBuilderOptions"] = game_simulation_LinkInfoBuilderOptions;
game_simulation_LinkInfoBuilderOptions.__name__ = "game.simulation.LinkInfoBuilderOptions";
game_simulation_LinkInfoBuilderOptions.prototype = {
	groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,marginManager: null
	,__class__: game_simulation_LinkInfoBuilderOptions
};
var game_simulation_LinkInfoBuilder = function(opts) {
	this.groupBonusTableType = opts.groupBonusTableType;
	this.colorBonusTableType = opts.colorBonusTableType;
	this.powerTableType = opts.powerTableType;
	this.dropBonusGarbage = opts.dropBonusGarbage;
	this.allClearReward = opts.allClearReward;
	this.marginManager = opts.marginManager;
};
$hxClasses["game.simulation.LinkInfoBuilder"] = game_simulation_LinkInfoBuilder;
game_simulation_LinkInfoBuilder.__name__ = "game.simulation.LinkInfoBuilder";
game_simulation_LinkInfoBuilder.__interfaces__ = [game_simulation_ILinkInfoBuilder];
game_simulation_LinkInfoBuilder.prototype = {
	groupBonusTableType: null
	,colorBonusTableType: null
	,powerTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,marginManager: null
	,build: function(params) {
		var chain = params.chain;
		var colorCount = 0;
		var clearCount = 0;
		var groupBonus = 0;
		var key = utils_ValueBox.toValue(this.groupBonusTableType);
		var groupBonusTable = game_rules_GroupBonusTables_GROUP_BONUS_TABLES.h[key];
		var key = utils_ValueBox.toValue(this.colorBonusTableType);
		var colorBonusTable = game_rules_ColorBonusTables_COLOR_BONUS_TABLES.h[key];
		var key = utils_ValueBox.toValue(this.powerTableType);
		var powerTable = game_rules_PowerTables_POWER_TABLES.h[key];
		var c = params.clearsByColor.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1 <= 0) {
				continue;
			}
			groupBonus += game_rules_GroupBonusTable.get(groupBonusTable,c1);
			clearCount += c1;
			++colorCount;
		}
		var colorBonus = colorBonusTable[colorCount - 1];
		var chainPower = powerTable.get(chain);
		var bonuses = groupBonus + colorBonus;
		var score = 10 * clearCount * (Math.min(999,Math.max(chainPower + bonuses,1)) | 0);
		var garbageScore = utils_ValueBox.toValue(this.dropBonusGarbage) ? score + params.dropBonus : score;
		var garbageFloat = garbageScore / this.marginManager.targetPoints + params.garbageRemainder;
		if(params.sendsAllClearBonus) {
			garbageFloat += utils_ValueBox.toValue(this.allClearReward);
		}
		var garbage = garbageFloat | 0;
		var garbageRemainder = garbageFloat - garbage;
		return new game_simulation_LinkInfo(chain,score,clearCount,chainPower,groupBonus,colorBonus,garbage,params.totalGarbage + garbage,garbageRemainder,params.sendsAllClearBonus,bonuses > 0);
	}
	,__class__: game_simulation_LinkInfoBuilder
};
var game_simulation_NullLinkInfoBuilder = function() {
	this.info = new game_simulation_LinkInfo(0,0,0,0,0,0,0,0,0,false,false);
};
$hxClasses["game.simulation.NullLinkInfoBuilder"] = game_simulation_NullLinkInfoBuilder;
game_simulation_NullLinkInfoBuilder.__name__ = "game.simulation.NullLinkInfoBuilder";
game_simulation_NullLinkInfoBuilder.__interfaces__ = [game_simulation_ILinkInfoBuilder];
game_simulation_NullLinkInfoBuilder.__properties__ = {get_instance:"get_instance"};
game_simulation_NullLinkInfoBuilder.get_instance = function() {
	if(game_simulation_NullLinkInfoBuilder.instance == null) {
		game_simulation_NullLinkInfoBuilder.instance = new game_simulation_NullLinkInfoBuilder();
	}
	return game_simulation_NullLinkInfoBuilder.instance;
};
game_simulation_NullLinkInfoBuilder.prototype = {
	info: null
	,build: function(params) {
		return this.info;
	}
	,__class__: game_simulation_NullLinkInfoBuilder
};
var game_simulation_PopSimStepOptions = function(garbageDisplay,accumulatedDisplay,popInfo,linkInfo,chain,fieldSnapshot) {
	game_simulation_SimulationStepOptions.call(this,chain,fieldSnapshot);
	this.garbageDisplay = garbageDisplay;
	this.accumulatedDisplay = accumulatedDisplay;
	this.popInfo = popInfo;
	this.linkInfo = linkInfo;
};
$hxClasses["game.simulation.PopSimStepOptions"] = game_simulation_PopSimStepOptions;
game_simulation_PopSimStepOptions.__name__ = "game.simulation.PopSimStepOptions";
game_simulation_PopSimStepOptions.__super__ = game_simulation_SimulationStepOptions;
game_simulation_PopSimStepOptions.prototype = $extend(game_simulation_SimulationStepOptions.prototype,{
	garbageDisplay: null
	,accumulatedDisplay: null
	,popInfo: null
	,linkInfo: null
	,__class__: game_simulation_PopSimStepOptions
});
var game_simulation_PopSimStep = function(opts) {
	game_simulation_SimulationStep.call(this,game_simulation_SimulationStepType.POP,opts);
	this.garbageDisplay = opts.garbageDisplay;
	this.accumulatedDisplay = opts.accumulatedDisplay;
	this.popInfo = opts.popInfo;
	this.linkInfo = opts.linkInfo;
};
$hxClasses["game.simulation.PopSimStep"] = game_simulation_PopSimStep;
game_simulation_PopSimStep.__name__ = "game.simulation.PopSimStep";
game_simulation_PopSimStep.__super__ = game_simulation_SimulationStep;
game_simulation_PopSimStep.prototype = $extend(game_simulation_SimulationStep.prototype,{
	garbageDisplay: null
	,accumulatedDisplay: null
	,popInfo: null
	,linkInfo: null
	,copy: function() {
		var _g = this.chain;
		var _g1 = this.fieldSnapshot.copy();
		return new game_simulation_PopSimStep(new game_simulation_PopSimStepOptions(this.garbageDisplay.copy(),this.accumulatedDisplay.copy(),this.popInfo.copy(),this.linkInfo,_g,_g1));
	}
	,renderLabel: function(g,y,alpha) {
		this.renderBackground(g,y,-256,64);
		this.renderTitle(g,y,"Pop");
		var chainStr = "" + this.chain + "-CHAIN!";
		var width = kha_Assets.fonts.Pixellari.width(40,chainStr);
		var x = game_geometries_BoardGeometries.WIDTH - 12 - width;
		g.drawString(chainStr,x,y + 12);
	}
	,renderCard: function(g,y,alpha) {
		this.renderBackground(g,y,-256,512);
		this.renderTitle(g,y,"Pop");
		g.set_fontSize(32);
		g.drawString("Chain: " + this.chain,12,y + this.cardRow(1));
		g.drawString("Chain Power: " + this.linkInfo.chainPower,12,y + this.cardRow(2));
		g.drawString("Group Bonus: " + this.linkInfo.groupBonus,12,y + this.cardRow(3));
		g.drawString("Color Bonus: " + this.linkInfo.colorBonus,12,y + this.cardRow(4));
		g.drawString("Pops: " + this.linkInfo.clearCount,12,y + this.cardRow(5));
		g.drawString("Score: " + this.linkInfo.score,12,y + this.cardRow(6));
		g.drawString("Garbage: " + this.linkInfo.garbage,12,y + this.cardRow(7));
		this.garbageDisplay.render(g,0,y + this.cardRow(8),alpha);
		g.drawString("Accum. Garbage: " + this.linkInfo.accumulatedGarbage,12,y + this.cardRow(10));
		this.accumulatedDisplay.render(g,0,y + this.cardRow(11),alpha);
	}
	,copyFrom: function(other) {
		game_simulation_SimulationStep.prototype.copyFrom.call(this,other);
		return this;
	}
	,__class__: game_simulation_PopSimStep
});
var game_simulation_SimulationStepType = $hxEnums["game.simulation.SimulationStepType"] = { __ename__:"game.simulation.SimulationStepType",__constructs__:null
	,BEGIN: {_hx_name:"BEGIN",_hx_index:0,__enum__:"game.simulation.SimulationStepType",toString:$estr}
	,DROP: {_hx_name:"DROP",_hx_index:1,__enum__:"game.simulation.SimulationStepType",toString:$estr}
	,POP: {_hx_name:"POP",_hx_index:2,__enum__:"game.simulation.SimulationStepType",toString:$estr}
	,END: {_hx_name:"END",_hx_index:3,__enum__:"game.simulation.SimulationStepType",toString:$estr}
};
game_simulation_SimulationStepType.__constructs__ = [game_simulation_SimulationStepType.BEGIN,game_simulation_SimulationStepType.DROP,game_simulation_SimulationStepType.POP,game_simulation_SimulationStepType.END];
var game_states_GameStateOptions = function(particleManager,frameCounter,boardManager,marginManager) {
	this.particleManager = particleManager;
	this.frameCounter = frameCounter;
	this.boardManager = boardManager;
	this.marginManager = marginManager;
};
$hxClasses["game.states.GameStateOptions"] = game_states_GameStateOptions;
game_states_GameStateOptions.__name__ = "game.states.GameStateOptions";
game_states_GameStateOptions.prototype = {
	particleManager: null
	,frameCounter: null
	,boardManager: null
	,marginManager: null
	,__class__: game_states_GameStateOptions
};
var game_states_GameState = function(opts) {
	this.particleManager = opts.particleManager;
	this.frameCounter = opts.frameCounter;
	this.boardManager = opts.boardManager;
	this.marginManager = opts.marginManager;
	this.FADE_TO_WHITELocation = Pipelines.FADE_TO_WHITE.getConstantLocation("comp");
};
$hxClasses["game.states.GameState"] = game_states_GameState;
game_states_GameState.__name__ = "game.states.GameState";
game_states_GameState.prototype = {
	particleManager: null
	,frameCounter: null
	,boardManager: null
	,marginManager: null
	,FADE_TO_WHITELocation: null
	,addDesyncInfo: function(ctx) {
		this.boardManager.addDesyncInfo(ctx);
	}
	,update: function() {
		this.boardManager.update();
		this.particleManager.update();
		this.marginManager.update();
		this.frameCounter.update();
	}
	,render: function(g,g4,alpha) {
		g.set_pipeline(Pipelines.FADE_TO_WHITE);
		g4.setPipeline(g.get_pipeline());
		g4.setFloat(this.FADE_TO_WHITELocation,0.5 + Math.cos(this.frameCounter.value / 4) / 2);
		g.set_pipeline(null);
		this.particleManager.renderBackground(g,alpha);
		this.boardManager.render(g,g4,alpha);
		this.particleManager.renderForeground(g,alpha);
	}
	,__class__: game_states_GameState
};
var ui_IMenuPage = function() { };
$hxClasses["ui.IMenuPage"] = ui_IMenuPage;
ui_IMenuPage.__name__ = "ui.IMenuPage";
ui_IMenuPage.__isInterface__ = true;
ui_IMenuPage.prototype = {
	header: null
	,controlHints: null
	,onResize: null
	,onShow: null
	,update: null
	,render: null
	,__class__: ui_IMenuPage
};
var ui_ListMenuPage = function(opts) {
	this.widgetBuilder = opts.widgetBuilder;
	this.header = opts.header;
	this.font = kha_Assets.fonts.Pixellari;
	this.widgets = [];
	this.widgetIndex = 0;
	this.minIndex = 0;
};
$hxClasses["ui.ListMenuPage"] = ui_ListMenuPage;
ui_ListMenuPage.__name__ = "ui.ListMenuPage";
ui_ListMenuPage.__interfaces__ = [ui_IMenuPage];
ui_ListMenuPage.prototype = {
	widgetBuilder: null
	,header: null
	,font: null
	,menu: null
	,widgetBottomPadding: null
	,descFontSize: null
	,descFontHeight: null
	,scrollArrowSize: null
	,widgets: null
	,widgetIndex: null
	,minIndex: null
	,controlHints: null
	,setControlHints: function() {
		this.controlHints = ui_ListMenuPage.DEFAULT_CONTROL_DISPLAYS.concat(this.widgets[this.widgetIndex].controlHints);
	}
	,onSelect: function() {
		this.widgetIndex = Math.min(this.widgets.length - 1,Math.max(this.widgetIndex,0)) | 0;
		this.controlHints = ui_ListMenuPage.DEFAULT_CONTROL_DISPLAYS.concat(this.widgets[this.widgetIndex].controlHints);
	}
	,popPage: function() {
		this.menu.popPage();
	}
	,renderArrow: function(g,x,y,spriteX) {
		g.drawScaledSubImage(kha_Assets.images.Arrows,spriteX,0,64,64,x,y,this.scrollArrowSize,this.scrollArrowSize);
	}
	,onResize: function() {
		var smallerScale = this.menu.scaleManager.smallerScale;
		this.widgetBottomPadding = 16 * smallerScale;
		this.descFontSize = 48 * smallerScale | 0;
		this.descFontHeight = this.font.height(this.descFontSize);
		this.scrollArrowSize = 64 * smallerScale;
		var _g = 0;
		var _g1 = this.widgets;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.onResize();
		}
	}
	,moveUp: function() {
		if(this.widgetIndex > 0) {
			this.widgetIndex--;
			if(this.widgetIndex < this.minIndex) {
				this.minIndex--;
			}
		} else {
			this.widgetIndex = this.widgets.length - 1;
			this.minIndex = Math.max(0,this.widgets.length - 7) | 0;
		}
		this.onSelect();
	}
	,moveDown: function() {
		if(this.widgetIndex < this.widgets.length - 1) {
			this.widgetIndex++;
			if(this.widgetIndex > this.minIndex + 7 - 1) {
				this.minIndex++;
			}
		} else {
			this.widgetIndex = 0;
			this.minIndex = 0;
		}
		this.onSelect();
	}
	,onShow: function(menu) {
		this.menu = menu;
		this.widgets = this.widgetBuilder(menu);
		var _g = 0;
		var _g1 = this.widgets;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.onShow(menu);
		}
		if(!menu.prefsSettings.menuRememberCursor) {
			this.widgetIndex = 0;
			this.minIndex = 0;
		}
		this.controlHints = ui_ListMenuPage.DEFAULT_CONTROL_DISPLAYS.concat(this.widgets[this.widgetIndex].controlHints);
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("MENU_UP")) {
			if(this.widgetIndex > 0) {
				this.widgetIndex--;
				if(this.widgetIndex < this.minIndex) {
					this.minIndex--;
				}
			} else {
				this.widgetIndex = this.widgets.length - 1;
				this.minIndex = Math.max(0,this.widgets.length - 7) | 0;
			}
			this.onSelect();
		} else if(inputDevice.getAction("MENU_DOWN")) {
			if(this.widgetIndex < this.widgets.length - 1) {
				this.widgetIndex++;
				if(this.widgetIndex > this.minIndex + 7 - 1) {
					this.minIndex++;
				}
			} else {
				this.widgetIndex = 0;
				this.minIndex = 0;
			}
			this.onSelect();
		}
		if(inputDevice.getAction("BACK")) {
			this.popPage();
		}
		this.widgets[this.widgetIndex].update();
	}
	,render: function(g,x,y) {
		g.set_font(this.font);
		g.set_fontSize(this.descFontSize);
		if(this.minIndex > 0) {
			this.renderArrow(g,x,y,64);
		}
		var drawY = y + this.scrollArrowSize;
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			var index = this.minIndex + i;
			var widget = this.widgets[index];
			if(widget == null) {
				break;
			}
			widget.render(g,x,drawY,index == this.widgetIndex);
			drawY += widget.height + this.widgetBottomPadding;
		}
		g.set_font(this.font);
		g.set_fontSize(this.descFontSize);
		if(this.minIndex + 7 < this.widgets.length) {
			this.renderArrow(g,x,drawY,0);
		}
		var desc = this.widgets[this.widgetIndex].description;
		var _g = 0;
		var _g1 = desc.length;
		while(_g < _g1) {
			var i = _g++;
			var row = desc[i];
			var rowWidth = this.font.width(this.descFontSize,row);
			g.drawString(row,x + this.menu.scaleManager.width - this.menu.padding * 2 - rowWidth,y + this.descFontHeight * i);
		}
	}
	,__class__: ui_ListMenuPage
};
var game_ui_AutoAttackLinkPage = function(autoAttackManager,data) {
	var _gthis = this;
	this.autoAttackManager = autoAttackManager;
	this.data = data;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		var widgets = [new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Clears For Color 1",0,72,1,_gthis.data.clearsByColor.h[0],function(value) {
			_gthis.setColor(0,value);
		},["Set The Number Of Color 1 Gelos","That Popped In The Link"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Clears For Color 2",0,72,1,_gthis.data.clearsByColor.h[1],function(value) {
			_gthis.setColor(1,value);
		},["Set The Number Of Color 2 Gelos","That Popped In The Link"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Clears For Color 3",0,72,1,_gthis.data.clearsByColor.h[2],function(value) {
			_gthis.setColor(2,value);
		},["Set The Number Of Color 3 Gelos","That Popped In The Link"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Clears For Color 4",0,72,1,_gthis.data.clearsByColor.h[3],function(value) {
			_gthis.setColor(3,value);
		},["Set The Number Of Color 4 Gelos","That Popped In The Link"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Clears For Color 5",0,72,1,_gthis.data.clearsByColor.h[4],function(value) {
			_gthis.setColor(4,value);
		},["Set The Number Of Color 5 Gelos","That Popped In The Link"]))];
		if(data == autoAttackManager.linkData.data[0]) {
			widgets.push(new ui_YesNoWidget(new ui_YesNoWidgetOptions("Send All Clear Bonus",["Whether To Send All Clear Bonus On This Link"],false,function(value) {
				data.sendsAllClearBonus = value;
				autoAttackManager.constructLinks();
			})));
		}
		return widgets;
	},"Edit Link"));
};
$hxClasses["game.ui.AutoAttackLinkPage"] = game_ui_AutoAttackLinkPage;
game_ui_AutoAttackLinkPage.__name__ = "game.ui.AutoAttackLinkPage";
game_ui_AutoAttackLinkPage.__super__ = ui_ListMenuPage;
game_ui_AutoAttackLinkPage.prototype = $extend(ui_ListMenuPage.prototype,{
	autoAttackManager: null
	,data: null
	,getColor: function(color) {
		return this.data.clearsByColor.h[color];
	}
	,setColor: function(color,value) {
		var v = value | 0;
		this.data.clearsByColor.h[color] = v;
		this.autoAttackManager.constructLinks();
	}
	,__class__: game_ui_AutoAttackLinkPage
});
var game_ui_ControlsPageOptions = function(header,actions,inputDevice) {
	this.header = header;
	this.actions = actions;
	this.inputDevice = inputDevice;
};
$hxClasses["game.ui.ControlsPageOptions"] = game_ui_ControlsPageOptions;
game_ui_ControlsPageOptions.__name__ = "game.ui.ControlsPageOptions";
game_ui_ControlsPageOptions.prototype = {
	header: null
	,actions: null
	,inputDevice: null
	,__class__: game_ui_ControlsPageOptions
};
var ui_InputLimitedListPage = function(opts) {
	ui_ListMenuPage.call(this,opts);
	this.inputDevice = opts.inputDevice;
};
$hxClasses["ui.InputLimitedListPage"] = ui_InputLimitedListPage;
ui_InputLimitedListPage.__name__ = "ui.InputLimitedListPage";
ui_InputLimitedListPage.__super__ = ui_ListMenuPage;
ui_InputLimitedListPage.prototype = $extend(ui_ListMenuPage.prototype,{
	inputDevice: null
	,onShow: function(menu) {
		var _this = menu.inputDevices;
		_this.head = new haxe_ds_GenericCell(this.inputDevice,_this.head);
		menu.setInputDevice();
		ui_ListMenuPage.prototype.onShow.call(this,menu);
	}
	,popPage: function() {
		var _this = this.menu;
		var _this1 = _this.inputDevices;
		var k = _this1.head;
		if(k != null) {
			_this1.head = k.next;
		}
		_this.setInputDevice();
		ui_ListMenuPage.prototype.popPage.call(this);
	}
	,__class__: ui_InputLimitedListPage
});
var game_ui_ControlsPage = function(opts) {
	ui_InputLimitedListPage.call(this,new ui_InputLimitedListPageOptions(opts.inputDevice,function(menu) {
		var _this = opts.actions;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = new game_ui_InputWidget(_this[i]);
		}
		return result;
	},opts.header));
};
$hxClasses["game.ui.ControlsPage"] = game_ui_ControlsPage;
game_ui_ControlsPage.__name__ = "game.ui.ControlsPage";
game_ui_ControlsPage.__super__ = ui_InputLimitedListPage;
game_ui_ControlsPage.prototype = $extend(ui_InputLimitedListPage.prototype,{
	__class__: game_ui_ControlsPage
});
var game_ui_ControlsPageWidgetOptions = function(title,description,actions,inputDevice) {
	this.title = title;
	this.description = description;
	this.actions = actions;
	this.inputDevice = inputDevice;
};
$hxClasses["game.ui.ControlsPageWidgetOptions"] = game_ui_ControlsPageWidgetOptions;
game_ui_ControlsPageWidgetOptions.__name__ = "game.ui.ControlsPageWidgetOptions";
game_ui_ControlsPageWidgetOptions.prototype = {
	title: null
	,description: null
	,actions: null
	,inputDevice: null
	,__class__: game_ui_ControlsPageWidgetOptions
};
var ui_IListWidget = function() { };
$hxClasses["ui.IListWidget"] = ui_IListWidget;
ui_IListWidget.__name__ = "ui.IListWidget";
ui_IListWidget.__isInterface__ = true;
ui_IListWidget.prototype = {
	description: null
	,controlHints: null
	,height: null
	,onShow: null
	,onResize: null
	,update: null
	,render: null
	,__class__: ui_IListWidget
};
var ui_ButtonWidget = function(opts) {
	this.callback = opts.callback;
	this.title = opts.title;
	this.description = opts.description;
	this.font = kha_Assets.fonts.Pixellari;
	this.controlHints = [new ui_ControlHint(["CONFIRM"],"Confirm")];
};
$hxClasses["ui.ButtonWidget"] = ui_ButtonWidget;
ui_ButtonWidget.__name__ = "ui.ButtonWidget";
ui_ButtonWidget.__interfaces__ = [ui_IListWidget];
ui_ButtonWidget.prototype = {
	callback: null
	,title: null
	,description: null
	,font: null
	,fontSize: null
	,menu: null
	,controlHints: null
	,height: null
	,onShow: function(menu) {
		this.menu = menu;
	}
	,onResize: function() {
		this.fontSize = 60 * this.menu.scaleManager.smallerScale | 0;
		this.height = this.font.height(this.fontSize);
	}
	,update: function() {
		if(this.menu.inputDevice.getAction("CONFIRM")) {
			this.callback();
		}
	}
	,render: function(g,x,y,isSelected) {
		g.set_color(isSelected ? -23296 : -1);
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		g.drawString(this.title,x,y);
		g.set_color(-1);
	}
	,__class__: ui_ButtonWidget
};
var ui_SubPageWidget = function(opts) {
	ui_ButtonWidget.call(this,new ui_ButtonWidgetOptions($bind(this,this.pushSubPage),opts.title,opts.description));
	this.subPage = opts.subPage;
};
$hxClasses["ui.SubPageWidget"] = ui_SubPageWidget;
ui_SubPageWidget.__name__ = "ui.SubPageWidget";
ui_SubPageWidget.__super__ = ui_ButtonWidget;
ui_SubPageWidget.prototype = $extend(ui_ButtonWidget.prototype,{
	subPage: null
	,pushSubPage: function() {
		this.menu.pushPage(this.subPage);
	}
	,__class__: ui_SubPageWidget
});
var game_ui_ControlsPageWidget = function(opts) {
	var _g = opts.description;
	ui_SubPageWidget.call(this,new ui_SubPageWidgetOptions(opts.title,new game_ui_ControlsPage(new game_ui_ControlsPageOptions(opts.title,opts.actions,opts.inputDevice)),_g));
};
$hxClasses["game.ui.ControlsPageWidget"] = game_ui_ControlsPageWidget;
game_ui_ControlsPageWidget.__name__ = "game.ui.ControlsPageWidget";
game_ui_ControlsPageWidget.__super__ = ui_SubPageWidget;
game_ui_ControlsPageWidget.prototype = $extend(ui_SubPageWidget.prototype,{
	__class__: game_ui_ControlsPageWidget
});
var game_ui_CustomAutoAttackPage = function(autoAttackManager,linkBuilder) {
	var _gthis = this;
	this.autoAttackManager = autoAttackManager;
	this.linkBuilder = linkBuilder;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		var data = autoAttackManager.linkData.data;
		var widgets = [new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			data.push(new game_auto_$attack_AutoAttackLinkData());
			_gthis.rebuild();
		},"Add Link",["Add A New Chain Link"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			data.length = 0;
			_gthis.rebuild();
		},"Clear Links",["Delete All Chain Links"]))];
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			var title = "Link " + (i + 1);
			widgets.push(new ui_SubPageWidget(new ui_SubPageWidgetOptions(title,new game_ui_AutoAttackLinkPage(autoAttackManager,data[i]),["Edit " + title])));
		}
		return widgets;
	},"Configure"));
};
$hxClasses["game.ui.CustomAutoAttackPage"] = game_ui_CustomAutoAttackPage;
game_ui_CustomAutoAttackPage.__name__ = "game.ui.CustomAutoAttackPage";
game_ui_CustomAutoAttackPage.__super__ = ui_ListMenuPage;
game_ui_CustomAutoAttackPage.prototype = $extend(ui_ListMenuPage.prototype,{
	autoAttackManager: null
	,linkBuilder: null
	,rebuild: function() {
		this.onShow(this.menu);
		this.onResize();
	}
	,__class__: game_ui_CustomAutoAttackPage
});
var game_ui_PauseMenuOptions = function(prefsSettings,pauseMediator) {
	this.prefsSettings = prefsSettings;
	this.pauseMediator = pauseMediator;
};
$hxClasses["game.ui.PauseMenuOptions"] = game_ui_PauseMenuOptions;
game_ui_PauseMenuOptions.__name__ = "game.ui.PauseMenuOptions";
game_ui_PauseMenuOptions.prototype = {
	prefsSettings: null
	,pauseMediator: null
	,__class__: game_ui_PauseMenuOptions
};
var game_ui_EndlessPauseMenuOptions = function(endlessSettings,controlHintContainer,actionBuffer,prefsSettings,pauseMediator) {
	game_ui_PauseMenuOptions.call(this,prefsSettings,pauseMediator);
	this.endlessSettings = endlessSettings;
	this.controlHintContainer = controlHintContainer;
	this.actionBuffer = actionBuffer;
};
$hxClasses["game.ui.EndlessPauseMenuOptions"] = game_ui_EndlessPauseMenuOptions;
game_ui_EndlessPauseMenuOptions.__name__ = "game.ui.EndlessPauseMenuOptions";
game_ui_EndlessPauseMenuOptions.__super__ = game_ui_PauseMenuOptions;
game_ui_EndlessPauseMenuOptions.prototype = $extend(game_ui_PauseMenuOptions.prototype,{
	endlessSettings: null
	,controlHintContainer: null
	,actionBuffer: null
	,__class__: game_ui_EndlessPauseMenuOptions
});
var ui_Menu = function(opts) {
	this.positionFactor = opts.positionFactor;
	this.widthFactor = opts.widthFactor;
	this.backgroundOpacity = opts.backgroundOpacity;
	this.prefsSettings = opts.prefsSettings;
	this.pages = new haxe_ds_GenericStack();
	if(opts.initialPage != null) {
		var _this = this.pages;
		_this.head = new haxe_ds_GenericCell(opts.initialPage,_this.head);
	}
	this.inputDevices = new haxe_ds_GenericStack();
	this.headerFont = kha_Assets.fonts.DigitalDisco;
	this.controlsFont = kha_Assets.fonts.Pixellari;
	this.scaleManager = new ScaleManager(1920,1080);
	ScaleManager.addOnResizeCallback($bind(this,this.resize));
};
$hxClasses["ui.Menu"] = ui_Menu;
ui_Menu.__name__ = "ui.Menu";
ui_Menu.prototype = {
	positionFactor: null
	,widthFactor: null
	,backgroundOpacity: null
	,prefsSettings: null
	,pages: null
	,inputDevices: null
	,headerFont: null
	,controlsFont: null
	,headerFontSize: null
	,headerFontHeight: null
	,controlsFontSize: null
	,warningFontSize: null
	,warningFontHeight: null
	,warningFontWidths: null
	,renderX: null
	,scaleManager: null
	,padding: null
	,inputDevice: null
	,resize: function() {
		var scr = ScaleManager.screen;
		this.scaleManager.resize(scr.width * this.widthFactor,scr.height);
		var ssc = this.scaleManager.smallerScale;
		this.headerFontSize = 128 * ssc | 0;
		this.headerFontHeight = this.headerFont.height(this.headerFontSize);
		this.controlsFontSize = 48 * ssc | 0;
		this.warningFontSize = 24 * ssc | 0;
		this.warningFontHeight = this.controlsFont.height(this.warningFontSize);
		this.warningFontWidths = [];
		var _g = 0;
		var _g1 = ui_Menu.WARNING;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			this.warningFontWidths.push(this.controlsFont.width(this.warningFontSize,line));
		}
		this.renderX = scr.width * this.positionFactor;
		this.padding = 64 * ssc;
		var p = this.pages.iterator();
		while(p.hasNext()) {
			var p1 = p.next();
			p1.onShow(this);
			p1.onResize();
		}
	}
	,setInputDevice: function() {
		var _this = this.inputDevices;
		this.inputDevice = _this.head == null ? null : _this.head.elt;
	}
	,onShow: function(inputDevice) {
		var _this = this.inputDevices;
		_this.head = new haxe_ds_GenericCell(inputDevice,_this.head);
		this.setInputDevice();
		var _this = this.pages;
		var page = _this.head == null ? null : _this.head.elt;
		page.onShow(this);
		page.onResize();
	}
	,pushPage: function(page) {
		page.onShow(this);
		page.onResize();
		var _this = this.pages;
		_this.head = new haxe_ds_GenericCell(page,_this.head);
	}
	,popPage: function() {
		var _this = this.pages;
		var k = _this.head;
		var poppedPage;
		if(k == null) {
			poppedPage = null;
		} else {
			_this.head = k.next;
			poppedPage = k.elt;
		}
		if(this.pages.head == null) {
			var _this = this.pages;
			_this.head = new haxe_ds_GenericCell(poppedPage,_this.head);
		}
		var _this = this.pages;
		var firstPage = _this.head == null ? null : _this.head.elt;
		firstPage.onShow(this);
		firstPage.onResize();
	}
	,pushInputDevice: function(inputDevice) {
		var _this = this.inputDevices;
		_this.head = new haxe_ds_GenericCell(inputDevice,_this.head);
		this.setInputDevice();
	}
	,popInputDevice: function() {
		var _this = this.inputDevices;
		var k = _this.head;
		if(k != null) {
			_this.head = k.next;
		}
		this.setInputDevice();
	}
	,update: function() {
		var _this = this.pages;
		var currentPage = _this.head == null ? null : _this.head.elt;
		if(currentPage == null) {
			return;
		}
		currentPage.update();
	}
	,render: function(g,alpha) {
		var _this = this.pages;
		var currentPage = _this.head == null ? null : _this.head.elt;
		if(currentPage == null) {
			return;
		}
		var paddedX = this.renderX + this.padding;
		var width = this.scaleManager.width;
		var height = this.scaleManager.height;
		g.scissor(this.renderX | 0,0,width | 0,height | 0);
		g.pushOpacity(this.backgroundOpacity);
		g.set_color(-16777216);
		g.fillRect(this.renderX,0,width,height);
		g.set_color(-1);
		g.popOpacity();
		g.set_font(this.headerFont);
		g.set_fontSize(this.headerFontSize);
		g.drawString(currentPage.header,paddedX,this.padding);
		var topLineY = this.padding + this.headerFontHeight;
		g.drawLine(paddedX,topLineY,this.renderX + width - this.padding,topLineY,4);
		currentPage.render(g,paddedX,topLineY + this.padding * 0.375);
		g.set_font(this.controlsFont);
		g.set_fontSize(this.warningFontSize);
		g.set_color(kha_Color._new(-8947849));
		var warningBaseline = this.scaleManager.height - this.headerFontHeight * 1.5;
		var invertedIndex = 3;
		g.drawString(ui_Menu.WARNING[invertedIndex],this.renderX + width - this.padding - this.warningFontWidths[invertedIndex],warningBaseline - 0 * this.warningFontHeight);
		var invertedIndex = 2;
		g.drawString(ui_Menu.WARNING[invertedIndex],this.renderX + width - this.padding - this.warningFontWidths[invertedIndex],warningBaseline - this.warningFontHeight);
		var invertedIndex = 1;
		g.drawString(ui_Menu.WARNING[invertedIndex],this.renderX + width - this.padding - this.warningFontWidths[invertedIndex],warningBaseline - 2 * this.warningFontHeight);
		var invertedIndex = 0;
		g.drawString(ui_Menu.WARNING[invertedIndex],this.renderX + width - this.padding - this.warningFontWidths[invertedIndex],warningBaseline - 3 * this.warningFontHeight);
		g.set_color(-1);
		g.set_fontSize(this.controlsFontSize);
		this.inputDevice.renderControls(g,this.renderX,width,this.padding,currentPage.controlHints);
		g.disableScissor();
	}
	,__class__: ui_Menu
};
var game_ui_PauseMenu = function(opts) {
	this.updateGameState = false;
	this.pauseMediator = opts.pauseMediator;
	var _g = opts.prefsSettings;
	ui_Menu.call(this,new ui_MenuOptions(new ui_ListMenuPage(new ui_ListMenuPageOptions($bind(this,this.generateInitalPage),"Paused")),0,1,0.9,_g));
};
$hxClasses["game.ui.PauseMenu"] = game_ui_PauseMenu;
game_ui_PauseMenu.__name__ = "game.ui.PauseMenu";
game_ui_PauseMenu.__super__ = ui_Menu;
game_ui_PauseMenu.prototype = $extend(ui_Menu.prototype,{
	pauseMediator: null
	,updateGameState: null
	,generateInitalPage: function(menu) {
		return [new ui_ButtonWidget(new ui_ButtonWidgetOptions(this.pauseMediator.resume,"Resume",["Continue Chaining!"])),new ui_SubPageWidget(new ui_SubPageWidgetOptions("Options",new main_$menu_ui_OptionsPage(this.prefsSettings),["Change Various Options and Settings"])),new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("Return To The Main Menu?",function() {
			ScreenManager.switchScreen(new main_$menu_MainMenuScreen());
		},"Exit To Main Menu",["Return To The Main Menu"]))];
	}
	,update: function() {
		if(this.inputDevice.getAction("PAUSE")) {
			this.pauseMediator.resume();
		}
		ui_Menu.prototype.update.call(this);
	}
	,__class__: game_ui_PauseMenu
});
var game_ui_EndlessPauseMenu = function(opts) {
	this.endlessSettings = opts.endlessSettings;
	this.controlHintContainer = opts.controlHintContainer;
	this.actionBuffer = opts.actionBuffer;
	game_ui_PauseMenu.call(this,opts);
};
$hxClasses["game.ui.EndlessPauseMenu"] = game_ui_EndlessPauseMenu;
game_ui_EndlessPauseMenu.__name__ = "game.ui.EndlessPauseMenu";
game_ui_EndlessPauseMenu.__super__ = game_ui_PauseMenu;
game_ui_EndlessPauseMenu.prototype = $extend(game_ui_PauseMenu.prototype,{
	endlessSettings: null
	,controlHintContainer: null
	,actionBuffer: null
	,generateInitalPage: function(_) {
		var _gthis = this;
		var endlessOpts = new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Endless Options",["Change Various Options And Settings","Specific to Endless Mode"],function(_) {
			var endlessOpts = new ui_YesNoWidget(new ui_YesNoWidgetOptions("Show Control Hints",["Show Or Hide The Control Display","At The Bottom"],_gthis.endlessSettings.showControlHints,function(value) {
				_gthis.endlessSettings.showControlHints = value;
				_gthis.controlHintContainer.isVisible = value;
				save_$data_SaveManager.saveProfiles();
			}));
			var endlessOpts1;
			switch(_gthis.endlessSettings.clearOnXMode) {
			case "CLEAR":
				endlessOpts1 = 0;
				break;
			case "NEW":
				endlessOpts1 = 2;
				break;
			case "RESTART":
				endlessOpts1 = 1;
				break;
			}
			return [endlessOpts,new ui_OptionListWidget(new ui_OptionListWidgetOptions("Clear Field on X",["CLEAR","RESTART","NEW"],endlessOpts1,function(value) {
				_gthis.endlessSettings.clearOnXMode = value;
				save_$data_SaveManager.saveProfiles();
			},["Clear The Field When A","Gelo Group Locks On The","Top Of The Center Column","","CLEAR: Clear the Field","RESTART: CLEAR + Restart Queue","NEW: CLEAR + Regenerate Queue"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			},"Save Replay",["Download A Replay File Of This Session","","To View It, Just Drag & Drop The File","On The GelaVolt Window"]))];
		}));
		var pauseMenuOpts = game_ui_PauseMenu.prototype.generateInitalPage.call(this,_);
		pauseMenuOpts.unshift(endlessOpts);
		return pauseMenuOpts;
	}
	,__class__: game_ui_EndlessPauseMenu
});
var game_ui_GroupEditorPage = function(queue) {
	this.controlHints = [new ui_ControlHint(["MENU_LEFT","MENU_UP","MENU_DOWN","MENU_RIGHT"],"Select"),new ui_ControlHint(["BACK"],"Back"),new ui_ControlHint(["CONFIRM"],"Cycle Colors")];
	this.header = "Edit Gelo Group";
	this.queue = queue;
	this.selectionX = 1;
	this.selectionY = 1;
};
$hxClasses["game.ui.GroupEditorPage"] = game_ui_GroupEditorPage;
game_ui_GroupEditorPage.__name__ = "game.ui.GroupEditorPage";
game_ui_GroupEditorPage.__interfaces__ = [ui_IMenuPage];
game_ui_GroupEditorPage.prototype = {
	queue: null
	,menu: null
	,currentIndex: null
	,scale: null
	,selectionX: null
	,selectionY: null
	,header: null
	,controlHints: null
	,selectHorizontal: function(delta) {
	}
	,selectVertical: function(delta) {
		var r = (this.selectionY + delta) % 2;
		this.selectionY = (r < 0 ? r + 2 : r) | 0;
	}
	,onResize: function() {
		this.scale = this.menu.scaleManager.smallerScale * 4;
	}
	,onShow: function(menu) {
		this.menu = menu;
	}
	,loadGroup: function(index) {
		this.currentIndex = index;
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("MENU_LEFT")) {
			this.selectHorizontal(-1);
		} else if(inputDevice.getAction("MENU_RIGHT")) {
			this.selectHorizontal(1);
		}
		if(inputDevice.getAction("MENU_UP")) {
			this.selectVertical(-1);
		} else if(inputDevice.getAction("MENU_DOWN")) {
			this.selectVertical(1);
		}
		if(inputDevice.getAction("BACK")) {
			this.menu.popPage();
		} else if(inputDevice.getAction("CONFIRM")) {
			var group = this.queue.get(this.currentIndex);
			if(this.selectionX == 1 && this.selectionY == 1) {
				var r = (group.mainColor + 1) % 5;
				group.mainColor = (r < 0 ? r + 5 : r) | 0;
			} else {
				var positionID = this.selectionY * 3 + this.selectionX;
				if(positionID > 3) {
					--positionID;
				}
				var r = (group.others.data[positionID].color + 1) % 6;
				group.others.data[positionID].color = (r < 0 ? r + 6 : r) | 0;
			}
		}
	}
	,render: function(g,x,y) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = this.scale;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = this.scale;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		var groupX = 208.;
		var groupY = 96.;
		var offsetX = 112.;
		g.set_color(game_ui_GroupEditorPage.GRID_COLOR);
		var currentGrid = 64;
		var verticalX = offsetX + currentGrid;
		var end = 192;
		g.drawLine(verticalX,0,verticalX,end,1);
		g.drawLine(offsetX,currentGrid,offsetX + end,currentGrid,1);
		var currentGrid = 128;
		var verticalX = offsetX + currentGrid;
		var end = 192;
		g.drawLine(verticalX,0,verticalX,end,1);
		g.drawLine(offsetX,currentGrid,offsetX + end,currentGrid,1);
		g.set_color(-1);
		this.queue.get(this.currentIndex).render(g,groupX,groupY);
		g.drawRect(112. + this.selectionX * 64,this.selectionY * 64,64,64,4);
		g.popTransformation();
	}
	,__class__: game_ui_GroupEditorPage
};
var game_ui_InputWidget = function(action) {
	this.controlHints = [new ui_ControlHint(["CONFIRM"],"Rebind"),new ui_ControlHint(["MENU_RIGHT"],"Default (HOLD)")];
	this.font = kha_Assets.fonts.Pixellari;
	this.action = action;
	var data = game_actions_ActionData_ACTION_DATA.h[action];
	this.isUnbindable = data.isUnbindable;
	if(this.isUnbindable) {
		this.controlHints.push(new ui_ControlHint(["MENU_LEFT"],"Unbind (HOLD)"));
	}
	this.description = data.description;
};
$hxClasses["game.ui.InputWidget"] = game_ui_InputWidget;
game_ui_InputWidget.__name__ = "game.ui.InputWidget";
game_ui_InputWidget.__interfaces__ = [ui_IListWidget];
game_ui_InputWidget.prototype = {
	font: null
	,action: null
	,fontSize: null
	,menu: null
	,unbindCounter: null
	,defaultCounter: null
	,isUnbindable: null
	,description: null
	,controlHints: null
	,height: null
	,onShow: function(menu) {
		this.menu = menu;
	}
	,onResize: function() {
		this.fontSize = 60 * this.menu.scaleManager.smallerScale | 0;
		this.height = this.font.height(this.fontSize);
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(this.isUnbindable && inputDevice.getRawAction("MENU_LEFT")) {
			++this.unbindCounter;
		} else {
			this.unbindCounter = 0;
		}
		if(inputDevice.getRawAction("MENU_RIGHT")) {
			++this.defaultCounter;
		} else {
			this.defaultCounter = 0;
		}
		if(this.unbindCounter == 90) {
			inputDevice.unbind(this.action);
			this.unbindCounter = 100;
			this.defaultCounter = 100;
		}
		if(this.defaultCounter == 90) {
			inputDevice.bindDefault(this.action);
			this.unbindCounter = 100;
			this.defaultCounter = 100;
		}
		if(inputDevice.getAction("CONFIRM")) {
			inputDevice.rebind(this.action);
		}
	}
	,render: function(g,x,y,isSelected) {
		g.set_color(isSelected ? -23296 : -1);
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		this.menu.inputDevice.renderBinding(g,x,y,this.menu.scaleManager.smallerScale,this.action);
		g.set_color(-1);
	}
	,__class__: game_ui_InputWidget
};
var game_ui_ListSubPageWidgetOptions = function(header,description,widgetBuilder) {
	this.header = header;
	this.description = description;
	this.widgetBuilder = widgetBuilder;
};
$hxClasses["game.ui.ListSubPageWidgetOptions"] = game_ui_ListSubPageWidgetOptions;
game_ui_ListSubPageWidgetOptions.__name__ = "game.ui.ListSubPageWidgetOptions";
game_ui_ListSubPageWidgetOptions.prototype = {
	header: null
	,description: null
	,widgetBuilder: null
	,__class__: game_ui_ListSubPageWidgetOptions
};
var game_ui_ListSubPageWidget = function(opts) {
	var _g = opts.description;
	ui_SubPageWidget.call(this,new ui_SubPageWidgetOptions(opts.header,new ui_ListMenuPage(new ui_ListMenuPageOptions(opts.widgetBuilder,opts.header)),_g));
};
$hxClasses["game.ui.ListSubPageWidget"] = game_ui_ListSubPageWidget;
game_ui_ListSubPageWidget.__name__ = "game.ui.ListSubPageWidget";
game_ui_ListSubPageWidget.__super__ = ui_SubPageWidget;
game_ui_ListSubPageWidget.prototype = $extend(ui_SubPageWidget.prototype,{
	__class__: game_ui_ListSubPageWidget
});
var game_ui_QueueEditorPageOptions = function(queue,groupEditor) {
	this.queue = queue;
	this.groupEditor = groupEditor;
};
$hxClasses["game.ui.QueueEditorPageOptions"] = game_ui_QueueEditorPageOptions;
game_ui_QueueEditorPageOptions.__name__ = "game.ui.QueueEditorPageOptions";
game_ui_QueueEditorPageOptions.prototype = {
	queue: null
	,groupEditor: null
	,__class__: game_ui_QueueEditorPageOptions
};
var ui_MenuPageBase = function(opts) {
	this.designFontSize = opts.designFontSize;
	this.font = kha_Assets.fonts.get(opts.font);
	this.header = opts.header;
	this.controlHints = opts.controlHints;
};
$hxClasses["ui.MenuPageBase"] = ui_MenuPageBase;
ui_MenuPageBase.__name__ = "ui.MenuPageBase";
ui_MenuPageBase.__interfaces__ = [ui_IMenuPage];
ui_MenuPageBase.prototype = {
	designFontSize: null
	,font: null
	,header: null
	,controlHints: null
	,menu: null
	,fontSize: null
	,fontHeight: null
	,onShow: function(menu) {
		this.menu = menu;
	}
	,onResize: function() {
		this.fontSize = this.designFontSize * this.menu.scaleManager.smallerScale | 0;
		this.fontHeight = this.font.height(this.fontSize);
	}
	,update: function() {
	}
	,render: function(g,x,y) {
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
	}
	,__class__: ui_MenuPageBase
};
var game_ui_QueueEditorPage = function(opts) {
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(72,"Edit Queue",[new ui_ControlHint(["MENU_LEFT","MENU_UP","MENU_DOWN","MENU_RIGHT"],"Select"),new ui_ControlHint(["BACK"],"Back"),new ui_ControlHint(["CONFIRM"],"Edit")],null));
	this.queue = opts.queue;
	this.groupEditor = opts.groupEditor;
	this.selectionX = 0;
	this.selectionY = 0;
	this.minView = 0;
};
$hxClasses["game.ui.QueueEditorPage"] = game_ui_QueueEditorPage;
game_ui_QueueEditorPage.__name__ = "game.ui.QueueEditorPage";
game_ui_QueueEditorPage.__super__ = ui_MenuPageBase;
game_ui_QueueEditorPage.prototype = $extend(ui_MenuPageBase.prototype,{
	queue: null
	,groupEditor: null
	,selectionX: null
	,selectionY: null
	,minView: null
	,cellToScreen: function(cellX,cellY) {
		return new utils_Point(150 + cellX * 64 * 4,118 + cellY * 64 * 4.5);
	}
	,selectionToIndex: function() {
		return this.selectionY * 7 + this.selectionX;
	}
	,selectHorizontal: function(delta) {
		var groupCount = this.queue.groups.data.length;
		var d = this.selectionY * -7 + groupCount;
		var mod = Math.min(d,7) | 0;
		var r = (this.selectionX + delta) % mod;
		this.selectionX = (r < 0 ? r + mod : r) | 0;
	}
	,selectVertical: function(delta) {
		var d = (this.queue.groups.data.length / 7 | 0) + 1;
		var r = (this.selectionY + delta) % d;
		this.selectionY = (r < 0 ? r + d : r) | 0;
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("MENU_LEFT")) {
			this.selectHorizontal(-1);
		} else if(inputDevice.getAction("MENU_RIGHT")) {
			this.selectHorizontal(1);
		}
		var groupCount = this.queue.groups.data.length;
		var maxRows = groupCount / 7 | 0;
		var currentRow = this.minView / 7 | 0;
		if(inputDevice.getAction("MENU_UP")) {
			if(this.selectionY > 0) {
				this.selectVertical(-1);
				if(this.selectionY < currentRow) {
					this.minView -= 7;
				}
			} else {
				this.selectionY = maxRows;
				this.minView = (maxRows - 1) * 7;
			}
			this.selectHorizontal(0);
		} else if(inputDevice.getAction("MENU_DOWN")) {
			if(this.selectionY < maxRows) {
				this.selectVertical(1);
				if(this.selectionY > currentRow + 1) {
					this.minView += 7;
				}
			} else {
				this.selectionY = 0;
				this.minView = 0;
			}
			this.selectHorizontal(0);
		}
		if(inputDevice.getAction("BACK")) {
			this.menu.popPage();
		} else if(inputDevice.getAction("CONFIRM")) {
			this.groupEditor.loadGroup(this.selectionToIndex());
			this.menu.pushPage(this.groupEditor);
		}
	}
	,render: function(g,x,y) {
		ui_MenuPageBase.prototype.render.call(this,g,x,y);
		var groups = this.queue.groups;
		var scale = this.menu.scaleManager.smallerScale;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = scale;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = scale;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var transform__00 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var transform__10 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var transform__20 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var transform__01 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var transform__11 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var transform__21 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var transform__02 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var transform__12 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var transform__22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var _this = g.transformations[g.transformationIndex];
		var trans__00 = _this._00 * transform__00 + _this._10 * transform__01 + _this._20 * transform__02;
		var trans__10 = _this._00 * transform__10 + _this._10 * transform__11 + _this._20 * transform__12;
		var trans__20 = _this._00 * transform__20 + _this._10 * transform__21 + _this._20 * transform__22;
		var trans__01 = _this._01 * transform__00 + _this._11 * transform__01 + _this._21 * transform__02;
		var trans__11 = _this._01 * transform__10 + _this._11 * transform__11 + _this._21 * transform__12;
		var trans__21 = _this._01 * transform__20 + _this._11 * transform__21 + _this._21 * transform__22;
		var trans__02 = _this._02 * transform__00 + _this._12 * transform__01 + _this._22 * transform__02;
		var trans__12 = _this._02 * transform__10 + _this._12 * transform__11 + _this._22 * transform__12;
		var trans__22 = _this._02 * transform__20 + _this._12 * transform__21 + _this._22 * transform__22;
		g.transformationIndex++;
		if(g.transformationIndex == g.transformations.length) {
			g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g.transformations[g.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		g.setTransformation(g.transformations[g.transformationIndex]);
		var selectedIndex = this.selectionToIndex();
		var _g = 0;
		while(_g < 14) {
			var i = _g++;
			var index = this.minView + i;
			var group = groups.data[index];
			if(group == null) {
				break;
			}
			var row = i / 7 | 0;
			var column = i % 7;
			var screenCoords = this.cellToScreen(column,row);
			var screenX = screenCoords.x;
			var screenY = screenCoords.y;
			group.render(g,screenX,screenY);
			var str = "" + (index + 1) + ".";
			if(index == selectedIndex) {
				g.set_color(-23296);
				g.drawRect(screenX - 128,screenY - 128,256,288.,4);
			}
			g.drawString(str,screenX - g.get_font().width(this.fontSize,str) / 2,screenY + 96.);
			g.set_color(-1);
		}
		g.popTransformation();
	}
	,__class__: game_ui_QueueEditorPage
});
var game_ui_ReplayPauseMenuOptions = function(actionBuffer,prefsSettings,pauseMediator) {
	game_ui_PauseMenuOptions.call(this,prefsSettings,pauseMediator);
	this.actionBuffer = actionBuffer;
};
$hxClasses["game.ui.ReplayPauseMenuOptions"] = game_ui_ReplayPauseMenuOptions;
game_ui_ReplayPauseMenuOptions.__name__ = "game.ui.ReplayPauseMenuOptions";
game_ui_ReplayPauseMenuOptions.__super__ = game_ui_PauseMenuOptions;
game_ui_ReplayPauseMenuOptions.prototype = $extend(game_ui_PauseMenuOptions.prototype,{
	actionBuffer: null
	,__class__: game_ui_ReplayPauseMenuOptions
});
var game_ui_ReplayPauseMenu = function(opts) {
	this.actionBuffer = opts.actionBuffer;
	game_ui_PauseMenu.call(this,opts);
};
$hxClasses["game.ui.ReplayPauseMenu"] = game_ui_ReplayPauseMenu;
game_ui_ReplayPauseMenu.__name__ = "game.ui.ReplayPauseMenu";
game_ui_ReplayPauseMenu.__super__ = game_ui_PauseMenu;
game_ui_ReplayPauseMenu.prototype = $extend(game_ui_PauseMenu.prototype,{
	actionBuffer: null
	,generateInitalPage: function(_) {
		var _gthis = this;
		var replayOpts = new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Replay Options",["Change Various Options and Settings","Specific to Replays"],function(_) {
			return [new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
				_gthis.actionBuffer.mode = 1;
				_gthis.pauseMediator.resume();
			},"Take Control",["Stop Replay Playback And","Take Control Of The Board"]))];
		}));
		var pauseMenuOpts = game_ui_PauseMenu.prototype.generateInitalPage.call(this,_);
		pauseMenuOpts.unshift(replayOpts);
		return pauseMenuOpts;
	}
	,__class__: game_ui_ReplayPauseMenu
});
var game_ui_TrainingPauseMenuOptions = function(popCount,vanishHiddenRows,dropSpeed,physics,powerTableType,colorBonusTableType,groupBonusTableType,dropBonusGarbage,allClearReward,randomizer,queue,playState,trainingBoard,allClearManager,chainSim,marginManager,trainingSettings,playerGarbageManager,infoGarbageManager,controlHintContainer,autoAttackManager,prefsSettings,pauseMediator) {
	game_ui_PauseMenuOptions.call(this,prefsSettings,pauseMediator);
	this.popCount = popCount;
	this.vanishHiddenRows = vanishHiddenRows;
	this.dropSpeed = dropSpeed;
	this.physics = physics;
	this.powerTableType = powerTableType;
	this.colorBonusTableType = colorBonusTableType;
	this.groupBonusTableType = groupBonusTableType;
	this.dropBonusGarbage = dropBonusGarbage;
	this.allClearReward = allClearReward;
	this.randomizer = randomizer;
	this.queue = queue;
	this.playState = playState;
	this.trainingBoard = trainingBoard;
	this.allClearManager = allClearManager;
	this.chainSim = chainSim;
	this.marginManager = marginManager;
	this.trainingSettings = trainingSettings;
	this.playerGarbageManager = playerGarbageManager;
	this.infoGarbageManager = infoGarbageManager;
	this.controlHintContainer = controlHintContainer;
	this.autoAttackManager = autoAttackManager;
};
$hxClasses["game.ui.TrainingPauseMenuOptions"] = game_ui_TrainingPauseMenuOptions;
game_ui_TrainingPauseMenuOptions.__name__ = "game.ui.TrainingPauseMenuOptions";
game_ui_TrainingPauseMenuOptions.__super__ = game_ui_PauseMenuOptions;
game_ui_TrainingPauseMenuOptions.prototype = $extend(game_ui_PauseMenuOptions.prototype,{
	popCount: null
	,vanishHiddenRows: null
	,dropSpeed: null
	,physics: null
	,powerTableType: null
	,colorBonusTableType: null
	,groupBonusTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,randomizer: null
	,queue: null
	,playState: null
	,trainingBoard: null
	,allClearManager: null
	,chainSim: null
	,marginManager: null
	,trainingSettings: null
	,playerGarbageManager: null
	,infoGarbageManager: null
	,controlHintContainer: null
	,autoAttackManager: null
	,__class__: game_ui_TrainingPauseMenuOptions
});
var game_ui_TrainingPauseMenu = function(opts) {
	this.popCount = opts.popCount;
	this.vanishHiddenRows = opts.vanishHiddenRows;
	this.dropSpeed = opts.dropSpeed;
	this.physics = opts.physics;
	this.powerTableType = opts.powerTableType;
	this.colorBonusTableType = opts.colorBonusTableType;
	this.groupBonusTableType = opts.groupBonusTableType;
	this.dropBonusGarbage = opts.dropBonusGarbage;
	this.allClearReward = opts.allClearReward;
	this.randomizer = opts.randomizer;
	this.queue = opts.queue;
	this.playState = opts.playState;
	this.trainingBoard = opts.trainingBoard;
	this.allClearManager = opts.allClearManager;
	this.chainSim = opts.chainSim;
	this.marginManager = opts.marginManager;
	this.trainingSettings = opts.trainingSettings;
	this.playerGarbageManager = opts.playerGarbageManager;
	this.infoGarbageManager = opts.infoGarbageManager;
	this.controlHintContainer = opts.controlHintContainer;
	this.autoAttackManager = opts.autoAttackManager;
	game_ui_PauseMenu.call(this,opts);
};
$hxClasses["game.ui.TrainingPauseMenu"] = game_ui_TrainingPauseMenu;
game_ui_TrainingPauseMenu.__name__ = "game.ui.TrainingPauseMenu";
game_ui_TrainingPauseMenu.__super__ = game_ui_PauseMenu;
game_ui_TrainingPauseMenu.prototype = $extend(game_ui_PauseMenu.prototype,{
	popCount: null
	,vanishHiddenRows: null
	,dropSpeed: null
	,physics: null
	,powerTableType: null
	,colorBonusTableType: null
	,groupBonusTableType: null
	,dropBonusGarbage: null
	,allClearReward: null
	,randomizer: null
	,queue: null
	,playState: null
	,trainingBoard: null
	,allClearManager: null
	,chainSim: null
	,marginManager: null
	,trainingSettings: null
	,playerGarbageManager: null
	,infoGarbageManager: null
	,controlHintContainer: null
	,autoAttackManager: null
	,generateInitalPage: function(_) {
		var _gthis = this;
		var trainingSettings = new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Training Options",["Change Various Options And Settings","To Help Elevate Your Practice!"],function(_) {
			return [new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Misc. Options",["Change Miscelaneous","Training Options"],function(_) {
				var trainingSettings = new ui_YesNoWidget(new ui_YesNoWidgetOptions("Show Control Hints",["Show Or Hide The Control Display","At The Bottom"],_gthis.trainingSettings.showControlHints,function(value) {
					_gthis.trainingSettings.showControlHints = value;
					_gthis.controlHintContainer.isVisible = value;
					save_$data_SaveManager.saveProfiles();
				}));
				var trainingSettings1;
				switch(_gthis.trainingSettings.clearOnXMode) {
				case "CLEAR":
					trainingSettings1 = 0;
					break;
				case "NEW":
					trainingSettings1 = 2;
					break;
				case "RESTART":
					trainingSettings1 = 1;
					break;
				}
				return [trainingSettings,new ui_OptionListWidget(new ui_OptionListWidgetOptions("Clear Field on X",["CLEAR","RESTART","NEW"],trainingSettings1,function(value) {
					_gthis.trainingSettings.clearOnXMode = value;
					save_$data_SaveManager.saveProfiles();
				},["Clear The Field When A","Gelo Group Locks On The","Top Of The Center Column","","CLEAR: Clear the Field","RESTART: CLEAR + Restart Queue","NEW: CLEAR + Regenerate Queue"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(($_=_gthis.playerGarbageManager,$bind($_,$_.clear)),"Clear Player Garbage Tray",["Clear The Garbage Tray Above","The Board You Control"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(($_=_gthis.infoGarbageManager,$bind($_,$_.clear)),"Clear Info Garbage Tray",["Clear The Garbage Tray Above","The Information Display"])),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Garbage Auto-Clear",["Automatically Clear The","Garbage Tray Above The","Information Display Before","Every Chain"],_gthis.trainingSettings.autoClear,function(value) {
					_gthis.trainingSettings.autoClear = value;
					save_$data_SaveManager.saveProfiles();
				})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Auto-Attack Options",["Practice Your Neutral Skills","By Defending Against"," Periodically Sent Chains!"],function(_) {
					var trainingSettings = new ui_YesNoWidget(new ui_YesNoWidgetOptions("Enable",["Enable Or Disable","Auto-Attacking"],!_gthis.autoAttackManager.isPaused,function(value) {
						_gthis.autoAttackManager.isPaused = !value;
						_gthis.autoAttackManager.reset();
					}));
					var trainingSettings1 = new ui_ButtonWidget(new ui_ButtonWidgetOptions(($_=_gthis.autoAttackManager,$bind($_,$_.reset)),"Reset Timer",["Reset The Auto-Attack","Timer"]));
					var trainingSettings2 = new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Min. Delay",1,90,1,_gthis.trainingSettings.minAttackTime,function(value) {
						_gthis.trainingSettings.minAttackTime = value | 0;
						_gthis.autoAttackManager.reset();
						save_$data_SaveManager.saveProfiles();
					},["Set The Minimum Delay Before","The Chain Is Triggered","In Seconds"]));
					var trainingSettings3 = new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Max. Delay",1,90,1,_gthis.trainingSettings.maxAttackTime,function(value) {
						_gthis.trainingSettings.maxAttackTime = value | 0;
						_gthis.autoAttackManager.reset();
						save_$data_SaveManager.saveProfiles();
					},["Set The Maximum Delay Before","The Chain Is Triggered","In Seconds"]));
					var trainingSettings4;
					switch(_gthis.autoAttackManager.type) {
					case "CUSTOM":
						trainingSettings4 = 1;
						break;
					case "RANDOM":
						trainingSettings4 = 0;
						break;
					}
					return [trainingSettings,trainingSettings1,trainingSettings2,trainingSettings3,new ui_OptionListWidget(new ui_OptionListWidgetOptions("Auto-Attack Type",["RANDOM","CUSTOM"],trainingSettings4,function(value) {
						_gthis.autoAttackManager.type = value;
					},["Alternate Between RANDOM And CUSTOM","Auto-Attack Types.","","CUSTOM Enables You To Specify","Settings For Each Chain Link"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
						var _gthis1 = _gthis;
						var trainingSettings;
						switch(_gthis.autoAttackManager.type) {
						case "CUSTOM":
							trainingSettings = new game_ui_CustomAutoAttackPage(_gthis.autoAttackManager,new game_simulation_LinkInfoBuilder(new game_simulation_LinkInfoBuilderOptions(_gthis.groupBonusTableType,_gthis.colorBonusTableType,_gthis.powerTableType,_gthis.dropBonusGarbage,_gthis.allClearReward,_gthis.marginManager)));
							break;
						case "RANDOM":
							trainingSettings = new ui_ListMenuPage(new ui_ListMenuPageOptions(function(_) {
								return [new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Min. Chain",1,50,1,_gthis.trainingSettings.minAttackChain,function(value) {
									_gthis.trainingSettings.minAttackChain = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Smallest Chain","That Can Be Sent"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Max. Chain",1,50,1,_gthis.trainingSettings.maxAttackChain,function(value) {
									_gthis.trainingSettings.maxAttackChain = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Largest Chain","That Can Be Sent"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Min. Colors",1,5,1,_gthis.trainingSettings.minAttackColors,function(value) {
									_gthis.trainingSettings.minAttackColors = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Minimum Number of","Colors That Can Be Used","In The Chain"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Max. Colors",1,5,1,_gthis.trainingSettings.maxAttackColors,function(value) {
									_gthis.trainingSettings.maxAttackColors = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Maximum Number of","Colors That Can Be Used","In the Chain"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Min. Plus Gelos/Color",0,14,1,_gthis.trainingSettings.minAttackGroupDiff,function(value) {
									_gthis.trainingSettings.minAttackGroupDiff = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Minimum"," Number of Gelos That","Can Be Added To","The Pop Count"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Max. Plus Gelos/Color",0,14,1,_gthis.trainingSettings.maxAttackGroupDiff,function(value) {
									_gthis.trainingSettings.maxAttackGroupDiff = value | 0;
									save_$data_SaveManager.saveProfiles();
								},["Set The Maximum"," Number Of Gelos That","Can Be Added To","The Pop Count"]))];
							},"Configure"));
							break;
						}
						_gthis1.pushPage(trainingSettings);
					},"Configure",["Configure Chain Steps According","To The Selected Type"]))];
				}))];
			})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Queue Options",["Change Options Related To The NEXT Queue"],function(_) {
				return [new ui_SubPageWidget(new ui_SubPageWidgetOptions("Edit Queue",new game_ui_QueueEditorPage(new game_ui_QueueEditorPageOptions(_gthis.queue,new game_ui_GroupEditorPage(_gthis.queue))),["View And Edit Gelo Groups","In The Current Queue"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions($bind(_gthis,_gthis.doNothing),"Randomizer: TSU",["Change The Randomizer Algorithm","(Sorry, Only TSU For Now)"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions($bind(_gthis,_gthis.doNothing),"Dropset: CLASSICAL",["Change The Dropset Used For","Queue Generation","(Sorry, Only CLASSICAL For Now)"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Colors",3,5,1,_gthis.randomizer.currentPool,function(value) {
					_gthis.randomizer.currentPool = value | 0;
				},["Change The Number Of Possible","Gelo Colors"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
					_gthis.playState.regenerateQueue();
					_gthis.playState.previousGroup();
				},"Regenerate Queue",["Regenerate Groups Based On","The Settings Above"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Keep Groups",0,128,1,_gthis.trainingSettings.keepGroupCount,function(value) {
					_gthis.trainingSettings.keepGroupCount = value | 0;
					save_$data_SaveManager.saveProfiles();
				},["Set The Number Of Gelo Groups","To Keep From The Start Of The","Previous Queue After Randomization"]))];
			})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Field Options",["Change Options Related to the Field"],function(_) {
				return [new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
					_gthis.allClearManager.startAnimation();
				},"Trigger All Clear",["Trigger An All Clear","Without Changing The Field"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
					_gthis.trainingBoard.clearField();
				},"Clear Field (No AC)",["Clear The Field Of Gelos","Without Triggering An All Clear"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
					_gthis.trainingBoard.clearField();
					_gthis.allClearManager.startAnimation();
				},"Clear Field (Trigger All Clear)",["Clear The Field Of Gelos","And Trigger an All Clear"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Pop Count",2,14,1,utils_ValueBox.toValue(_gthis.popCount),function(value) {
					_gthis.popCount.v = value | 0;
				},["Change The Number Of Gelos","You Need To Connect","To Pop Them"])),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Vanish Ghost Row",["Set Whether Gelos That","Lock In the Ghost Row","Disappear Or Not"],utils_ValueBox.toValue(_gthis.vanishHiddenRows),function(value) {
					_gthis.vanishHiddenRows.v = value;
				})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Grid Options",["Modify The Number Of Columns","And Rows"],function(_) {
					return [new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Ghost Rows",1,2,1,_gthis.trainingBoard.getField().hiddenRows,function(value) {
						_gthis.trainingBoard.getField().hiddenRows = value | 0;
					},["Change The Number Of Ghost Rows"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
						_gthis.trainingBoard.getField().createData();
					},"Apply Changes",["Modify The Field According to","The Settings Above","(WARNING: All Gelos Will Be Erased!)"]))];
				}))];
			})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Gelo Group Options",["Change Options Related","to Gelo Group Handling"],function(_) {
				return [new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Drop Speed",0,31,0.1,utils_ValueBox.toValue(_gthis.dropSpeed),function(value) {
					_gthis.dropSpeed.v = value;
				},["Change How Fast The","Gelo Group Falls","(Without Soft Drop)"])),new ui_OptionListWidget(new ui_OptionListWidgetOptions("Physics Type",["TSU","FEVER"],utils_ValueBox.toValue(_gthis.physics) == game_rules_PhysicsType.TSU ? 0 : 1,function(value) {
					_gthis.physics.v = value == "FEVER" ? game_rules_PhysicsType.FEVER : game_rules_PhysicsType.TSU;
				},["Alternate Between 'TSU' And 'FEVER'","Physics Types. 'FEVER' Physics Allow","You To Climb Over Adjacent","Gelos More Freely!"])),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Enable Blind Mode",["Blind Mode Grays Out Your Active","Gelo Group To Encourage Looking At","The Preview And Planning","Ahead!"],_gthis.trainingSettings.groupBlindMode,function(value) {
					_gthis.trainingSettings.groupBlindMode = value;
					save_$data_SaveManager.saveProfiles();
				}))];
			})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Ruleset Options",["Change Options Related to the Ruleset"],function(_) {
				var trainingSettings;
				switch(_gthis.powerTableType.v) {
				case "OPP":
					trainingSettings = 0;
					break;
				case "TSU":
					trainingSettings = 1;
					break;
				case "TSU (Singleplayer)":
					trainingSettings = 2;
					break;
				}
				var trainingSettings1 = new ui_OptionListWidget(new ui_OptionListWidgetOptions("Power Table",["OPP","TSU","TSU (Singleplayer)"],trainingSettings,function(value) {
					_gthis.powerTableType.v = value;
				},["Choose Between 'OPP', 'TSU' And","'TSU (Singleplayer)' Chain Power","Tables"]));
				var trainingSettings;
				switch(_gthis.colorBonusTableType.v) {
				case "FEVER":
					trainingSettings = 1;
					break;
				case "TSU":
					trainingSettings = 0;
					break;
				}
				var trainingSettings2 = new ui_OptionListWidget(new ui_OptionListWidgetOptions("Color Bonus Table",["TSU","FEVER"],trainingSettings,function(value) {
					_gthis.colorBonusTableType.v = value;
				},["Alternate Between 'TSU' And 'FEVER'","Color Bonus Tables"]));
				var trainingSettings;
				switch(_gthis.groupBonusTableType.v) {
				case "FEVER":
					trainingSettings = 1;
					break;
				case "TSU":
					trainingSettings = 0;
					break;
				}
				return [trainingSettings1,trainingSettings2,new ui_OptionListWidget(new ui_OptionListWidgetOptions("Group Bonus Table",["TSU","FEVER"],trainingSettings,function(value) {
					_gthis.groupBonusTableType.v = value;
				},["Alternate Between 'TSU' And 'FEVER'","Group Bonus Tables"])),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Enable Margin Time",["Enable Or Disable Margin Time"],_gthis.marginManager.isEnabled,function(value) {
					_gthis.marginManager.isEnabled = value;
				})),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Initial Margin Time",0,256,32,_gthis.marginManager.startMarginTime,function(value) {
					_gthis.marginManager.startMarginTime = value | 0;
				},["Set The Number Of Seconds","Before The First Margin Change","Takes Effect"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Target Points",10,990,1,_gthis.marginManager.targetPoints,function(value) {
					_gthis.marginManager.targetPoints = value | 0;
				},["Set the Current Target Points"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Change Initial Target Points",10,990,10,_gthis.marginManager.startTargetPoints,function(value) {
					_gthis.marginManager.startTargetPoints = value | 0;
				},["Set The Target Points Before","The First Margin Change Takes","Effect"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(($_=_gthis.marginManager,$bind($_,$_.reset)),"Reset Margin Time + Target Points",["Reset Both The Margin Timer","And The Target Points To","Their Initial Values"]))];
			}))];
		}));
		var pauseMenuOptions = game_ui_PauseMenu.prototype.generateInitalPage.call(this,_);
		pauseMenuOptions.unshift(trainingSettings);
		return pauseMenuOptions;
	}
	,doNothing: function() {
	}
	,__class__: game_ui_TrainingPauseMenu
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,keyValueIterator: null
	,copy: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = kha_Scheduler.addTimeTask(function() {
		me.run();
	},time_ms / 1000,time_ms / 1000);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = kha_Scheduler.realTime();
	var r = f();
	haxe_Log.trace(kha_Scheduler.realTime() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return kha_Scheduler.realTime();
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		kha_Scheduler.removeTimeTask(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	while(i < b.length) {
		blks[i >> 2] |= b.b[i] << (((b.length << 3) + i & 3) << 3);
		++i;
	}
	blks[i >> 2] |= 128 << (b.length * 8 + i) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,iterator: function() {
		var l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.elt;
		}};
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,clear: function() {
		this.h = Object.create(null);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{set_position:"set_position"})
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt8: function(x) {
		if(x < -128 || x >= 128) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeByte(x & 255);
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_UInt8Array = {};
haxe_io_UInt8Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_net_ReadyState = $hxEnums["haxe.net.ReadyState"] = { __ename__:"haxe.net.ReadyState",__constructs__:null
	,Connecting: {_hx_name:"Connecting",_hx_index:0,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Open: {_hx_name:"Open",_hx_index:1,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closing: {_hx_name:"Closing",_hx_index:2,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closed: {_hx_name:"Closed",_hx_index:3,__enum__:"haxe.net.ReadyState",toString:$estr}
};
haxe_net_ReadyState.__constructs__ = [haxe_net_ReadyState.Connecting,haxe_net_ReadyState.Open,haxe_net_ReadyState.Closing,haxe_net_ReadyState.Closed];
var haxe_net_WebSocket = function() {
};
$hxClasses["haxe.net.WebSocket"] = haxe_net_WebSocket;
haxe_net_WebSocket.__name__ = "haxe.net.WebSocket";
haxe_net_WebSocket.create = function(url,protocols,origin,debug) {
	if(debug == null) {
		debug = false;
	}
	return new haxe_net_impl_WebSocketJs(url,protocols);
};
haxe_net_WebSocket.defer = function(callback) {
	haxe_Timer.delay(callback,0);
};
haxe_net_WebSocket.prototype = {
	process: function() {
	}
	,sendString: function(message) {
	}
	,sendBytes: function(message) {
	}
	,close: function() {
	}
	,get_readyState: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,onopen: function() {
	}
	,onerror: function(message) {
	}
	,onmessageString: function(message) {
	}
	,onmessageBytes: function(message) {
	}
	,onclose: function(e) {
	}
	,__class__: haxe_net_WebSocket
	,__properties__: {get_readyState:"get_readyState"}
};
var haxe_net_impl_WebSocketJs = function(url,protocols) {
	var _gthis = this;
	haxe_net_WebSocket.call(this);
	if(protocols != null) {
		this.impl = new WebSocket(url,protocols);
	} else {
		this.impl = new WebSocket(url);
	}
	this.impl.onopen = function(e) {
		_gthis.onopen();
	};
	this.impl.onclose = function(e) {
		_gthis.onclose(e);
	};
	this.impl.onerror = function(e) {
		_gthis.onerror("error");
	};
	this.impl.onmessage = function(e) {
		var m = e.data;
		if(typeof(m) == "string") {
			_gthis.onmessageString(m);
		} else if(((m) instanceof ArrayBuffer)) {
			_gthis.onmessageBytes(haxe_io_Bytes.ofData(js_Boot.__cast(m , ArrayBuffer)));
		} else if(((m) instanceof Blob)) {
			var arrayBuffer;
			var fileReader = new FileReader();
			fileReader.onload = function() {
				arrayBuffer = fileReader.result;
				_gthis.onmessageBytes(haxe_io_Bytes.ofData(arrayBuffer));
			};
			fileReader.readAsArrayBuffer(js_Boot.__cast(m , Blob));
		} else {
			haxe_Log.trace("Unhandled websocket onmessage " + m,{ fileName : "src/haxe/net/impl/WebSocketJs.hx", lineNumber : 56, className : "haxe.net.impl.WebSocketJs", methodName : "new"});
		}
	};
};
$hxClasses["haxe.net.impl.WebSocketJs"] = haxe_net_impl_WebSocketJs;
haxe_net_impl_WebSocketJs.__name__ = "haxe.net.impl.WebSocketJs";
haxe_net_impl_WebSocketJs.__super__ = haxe_net_WebSocket;
haxe_net_impl_WebSocketJs.prototype = $extend(haxe_net_WebSocket.prototype,{
	impl: null
	,sendString: function(message) {
		this.impl.send(message);
	}
	,sendBytes: function(message) {
		message = message.sub(0,message.length);
		this.impl.send(message.b.bufferValue);
	}
	,close: function() {
		this.impl.close();
	}
	,get_readyState: function() {
		switch(this.impl.readyState) {
		case 0:
			return haxe_net_ReadyState.Connecting;
		case 1:
			return haxe_net_ReadyState.Open;
		case 2:
			return haxe_net_ReadyState.Closing;
		case 3:
			return haxe_net_ReadyState.Closed;
		default:
			throw haxe_Exception.thrown("Unexpected websocket state");
		}
	}
	,__class__: haxe_net_impl_WebSocketJs
});
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var hxbit_ConvertField = function(path,from,to) {
	this.path = path;
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = "hxbit.ConvertField";
hxbit_ConvertField.prototype = {
	path: null
	,index: null
	,same: null
	,defaultValue: null
	,from: null
	,to: null
	,conv: null
	,written: null
	,__class__: hxbit_ConvertField
};
var hxbit_Convert = function(classPath,ourSchema,schema) {
	var ourMap_h = Object.create(null);
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		ourMap_h[ourSchema.fieldsNames[i]] = ourSchema.fieldsTypes[i];
	}
	this.read = [];
	this.hadCID = !schema.isFinal;
	this.hasCID = !ourSchema.isFinal;
	var map_h = Object.create(null);
	var _g = 0;
	var _g1 = schema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var oldT = schema.fieldsTypes[i];
		var newT = ourMap_h[schema.fieldsNames[i]];
		var c = new hxbit_ConvertField(classPath + "." + schema.fieldsNames[i],oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				c.conv = hxbit_Convert.convFuns.h[c.path];
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		map_h[schema.fieldsNames[i]] = c;
	}
	this.write = [];
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var newT = ourSchema.fieldsTypes[i];
		var c = map_h[ourSchema.fieldsNames[i]];
		if(c == null) {
			c = new hxbit_ConvertField(null,null,newT);
			c.defaultValue = hxbit_Convert.getDefault(newT);
		} else {
			c.written = true;
		}
		this.write.push(c);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = "hxbit.Convert";
hxbit_Convert.sameType = function(a,b) {
	switch(a._hx_index) {
	case 0:
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 16:
			var _g = b.t;
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		var _g = a.k;
		var _g1 = a.v;
		switch(b._hx_index) {
		case 7:
			var bk = b.k;
			var bv = b.v;
			var av = _g1;
			var ak = _g;
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		var _g = a.k;
		switch(b._hx_index) {
		case 8:
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		var _g = a.fields;
		switch(b._hx_index) {
		case 9:
			var fb = b.fields;
			var fa = _g;
			if(fa.length != fb.length) {
				return false;
			}
			var _g = 0;
			var _g1 = fa.length;
			while(_g < _g1) {
				var i = _g++;
				var a1 = fa[i];
				var b1 = fb[i];
				if(a1.name != b1.name || a1.opt != b1.opt || !hxbit_Convert.sameType(a1.type,b1.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		var _g = a.k;
		if(b._hx_index == 10) {
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		} else {
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b);
		}
		break;
	case 11:
		var _g = a.k;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 11:
			var b1 = b.k;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		var _g = a.t;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 12:
			var b1 = b.t;
			var a1 = _g;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		var _g = a.t;
		switch(b._hx_index) {
		case 0:
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b._hx_index == 10) {
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:
		return 0.;
	case 2:
		return false;
	case 5:
		var _g = t.name;
		return null;
	case 6:
		var _g = t.name;
		return null;
	case 7:
		var _g = t.v;
		var k = t.k;
		switch(k._hx_index) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		var _g = t.k;
		return [];
	case 9:
		var _g = t.fields;
		return null;
	case 10:
		var t1 = t.k;
		return hxbit_Convert.getDefault(t1);
	case 11:
		var _g = t.k;
		var this1 = new Array(0);
		return this1;
	case 12:
		var _g = t.t;
		return null;
	case 3:case 4:case 13:case 14:case 17:
		return null;
	case 15:
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	case 16:
		var _g = t.t;
		return 0;
	case 18:
		var _g = t.name;
		return null;
	}
};
hxbit_Convert.registerConverter = function(path,f) {
	hxbit_Convert.convFuns.h[path] = f;
};
hxbit_Convert.prototype = {
	read: null
	,write: null
	,hasCID: null
	,hadCID: null
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.write.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var w = this.write[i];
			if(w.from == null) {
				_g.push("insert:" + Std.string(w.defaultValue));
			} else if(w.same) {
				_g.push(i == w.index ? "s" : "@" + w.index);
			} else {
				_g.push("@" + w.index + ":" + Std.string(w.to));
			}
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_EnumConvert = function(classPath,ourSchema,schema) {
	this.enumClass = classPath;
	this.reindex = [];
	this.constructs = [];
	var _g_current = 0;
	var _g_array = schema.fieldsNames;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var name = _g1_value;
		var found = false;
		var from = schema.fieldsTypes[index];
		var _g2_current = 0;
		var _g2_array = ourSchema.fieldsNames;
		while(_g2_current < _g2_array.length) {
			var _g3_value = _g2_array[_g2_current];
			var _g3_key = _g2_current++;
			var i = _g3_key;
			var s = _g3_value;
			if(s == name) {
				this.reindex.push(i);
				var to = ourSchema.fieldsTypes[i];
				if(to == null && from == null && i == index) {
					this.constructs.push(null);
				} else {
					this.constructs.push(new hxbit_Convert(classPath + "." + name,this.makeSchema(to),this.makeSchema(from)));
				}
				found = true;
				break;
			}
		}
		if(!found) {
			this.reindex.push(-1);
			this.constructs.push(new hxbit_Convert(classPath + "." + name,this.makeSchema(null),this.makeSchema(from)));
		}
	}
};
$hxClasses["hxbit.EnumConvert"] = hxbit_EnumConvert;
hxbit_EnumConvert.__name__ = "hxbit.EnumConvert";
hxbit_EnumConvert.prototype = {
	enumClass: null
	,constructs: null
	,reindex: null
	,makeSchema: function(t) {
		var s = new hxbit_Schema();
		if(t != null) {
			if(t._hx_index == 9) {
				var fields = t.fields;
				var _g_current = 0;
				var _g_array = fields;
				while(_g_current < _g_array.length) {
					var _g1_value = _g_array[_g_current];
					var _g1_key = _g_current++;
					var i = _g1_key;
					var f = _g1_value;
					s.fieldsTypes.push(f.type);
					s.fieldsNames.push("@" + i);
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		return s;
	}
	,__class__: hxbit_EnumConvert
};
var hxbit_RpcMode = $hxEnums["hxbit.RpcMode"] = { __ename__:"hxbit.RpcMode",__constructs__:null
	,All: {_hx_name:"All",_hx_index:0,__enum__:"hxbit.RpcMode",toString:$estr}
	,Clients: {_hx_name:"Clients",_hx_index:1,__enum__:"hxbit.RpcMode",toString:$estr}
	,Server: {_hx_name:"Server",_hx_index:2,__enum__:"hxbit.RpcMode",toString:$estr}
	,Owner: {_hx_name:"Owner",_hx_index:3,__enum__:"hxbit.RpcMode",toString:$estr}
	,Immediate: {_hx_name:"Immediate",_hx_index:4,__enum__:"hxbit.RpcMode",toString:$estr}
};
hxbit_RpcMode.__constructs__ = [hxbit_RpcMode.All,hxbit_RpcMode.Clients,hxbit_RpcMode.Server,hxbit_RpcMode.Owner,hxbit_RpcMode.Immediate];
var hxbit_PropTypeDesc = $hxEnums["hxbit.PropTypeDesc"] = { __ename__:"hxbit.PropTypeDesc",__constructs__:null
	,PInt: {_hx_name:"PInt",_hx_index:0,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFloat: {_hx_name:"PFloat",_hx_index:1,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBool: {_hx_name:"PBool",_hx_index:2,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PString: {_hx_name:"PString",_hx_index:3,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBytes: {_hx_name:"PBytes",_hx_index:4,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerializable: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PSerializable",$_.__params__ = ["name"],$_)
	,PEnum: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PEnum",$_.__params__ = ["name"],$_)
	,PMap: ($_=function(k,v) { return {_hx_index:7,k:k,v:v,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PMap",$_.__params__ = ["k","v"],$_)
	,PArray: ($_=function(k) { return {_hx_index:8,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PArray",$_.__params__ = ["k"],$_)
	,PObj: ($_=function(fields) { return {_hx_index:9,fields:fields,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PObj",$_.__params__ = ["fields"],$_)
	,PAlias: ($_=function(k) { return {_hx_index:10,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PAlias",$_.__params__ = ["k"],$_)
	,PVector: ($_=function(k) { return {_hx_index:11,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PVector",$_.__params__ = ["k"],$_)
	,PNull: ($_=function(t) { return {_hx_index:12,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PNull",$_.__params__ = ["t"],$_)
	,PUnknown: {_hx_name:"PUnknown",_hx_index:13,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PDynamic: {_hx_name:"PDynamic",_hx_index:14,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PInt64: {_hx_name:"PInt64",_hx_index:15,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFlags: ($_=function(t) { return {_hx_index:16,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PFlags",$_.__params__ = ["t"],$_)
	,PStruct: {_hx_name:"PStruct",_hx_index:17,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerInterface: ($_=function(name) { return {_hx_index:18,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_._hx_name="PSerInterface",$_.__params__ = ["name"],$_)
};
hxbit_PropTypeDesc.__constructs__ = [hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PFloat,hxbit_PropTypeDesc.PBool,hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PBytes,hxbit_PropTypeDesc.PSerializable,hxbit_PropTypeDesc.PEnum,hxbit_PropTypeDesc.PMap,hxbit_PropTypeDesc.PArray,hxbit_PropTypeDesc.PObj,hxbit_PropTypeDesc.PAlias,hxbit_PropTypeDesc.PVector,hxbit_PropTypeDesc.PNull,hxbit_PropTypeDesc.PUnknown,hxbit_PropTypeDesc.PDynamic,hxbit_PropTypeDesc.PInt64,hxbit_PropTypeDesc.PFlags,hxbit_PropTypeDesc.PStruct,hxbit_PropTypeDesc.PSerInterface];
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = "hxbit.Macros";
hxbit_Macros.makeEnumPath = function(name) {
	name = name.split(".").join("_");
	name = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null);
	return "hxbit.enumSer." + name;
};
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = "hxbit.Schema";
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.doSerialize = function(__ctx,__this) {
	__ctx.addBool(__this.isFinal);
	var a = __this.fieldsNames;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		__ctx.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			__ctx.addString(v);
		}
	}
	var a = __this.fieldsTypes;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		__ctx.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			__ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(__ctx,v);
		}
	}
};
hxbit_Schema.doUnserialize = function(__ctx,__this) {
	__this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
	var e0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			e0 = __ctx.getString();
			a[i] = e0;
		}
		tmp = a;
	}
	__this.fieldsNames = tmp;
	var e0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(__ctx);
			e0 = __e;
			a[i] = e0;
		}
		tmp = a;
	}
	__this.fieldsTypes = tmp;
};
hxbit_Schema.prototype = {
	isFinal: null
	,fieldsNames: null
	,fieldsTypes: null
	,get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,__uid: null
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		hxbit_Schema.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		hxbit_Schema.doUnserialize(__ctx,this);
	}
	,__class__: hxbit_Schema
	,__properties__: {get_checkSum:"get_checkSum"}
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = "hxbit.SerializableEnum";
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = "hxbit.StructSerializable";
hxbit_StructSerializable.__isInterface__ = true;
hxbit_StructSerializable.prototype = {
	customSerialize: null
	,customUnserialize: null
	,__class__: hxbit_StructSerializable
};
var hxbit_enumSer_Game_$rules_$AnimationsType = function() { };
$hxClasses["hxbit.enumSer.Game_rules_AnimationsType"] = hxbit_enumSer_Game_$rules_$AnimationsType;
hxbit_enumSer_Game_$rules_$AnimationsType.__name__ = "hxbit.enumSer.Game_rules_AnimationsType";
hxbit_enumSer_Game_$rules_$AnimationsType.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.addByte(1);
			break;
		case 1:
			ctx.addByte(2);
			break;
		}
	}
};
hxbit_enumSer_Game_$rules_$AnimationsType.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	var conv = ctx.enumConvert.h["game.rules.AnimationsType"];
	if(conv != null && conv.constructs[b - 1] != null) {
		return ctx.convertEnum(conv);
	}
	switch(b) {
	case 1:
		return game_rules_AnimationsType.TSU;
	case 2:
		return game_rules_AnimationsType.FEVER;
	default:
		throw haxe_Exception.thrown("Invalid enum index " + b);
	}
};
hxbit_enumSer_Game_$rules_$AnimationsType.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("TSU");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("FEVER");
	return s;
};
var hxbit_enumSer_Game_$rules_$PhysicsType = function() { };
$hxClasses["hxbit.enumSer.Game_rules_PhysicsType"] = hxbit_enumSer_Game_$rules_$PhysicsType;
hxbit_enumSer_Game_$rules_$PhysicsType.__name__ = "hxbit.enumSer.Game_rules_PhysicsType";
hxbit_enumSer_Game_$rules_$PhysicsType.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.addByte(1);
			break;
		case 1:
			ctx.addByte(2);
			break;
		}
	}
};
hxbit_enumSer_Game_$rules_$PhysicsType.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	var conv = ctx.enumConvert.h["game.rules.PhysicsType"];
	if(conv != null && conv.constructs[b - 1] != null) {
		return ctx.convertEnum(conv);
	}
	switch(b) {
	case 1:
		return game_rules_PhysicsType.TSU;
	case 2:
		return game_rules_PhysicsType.FEVER;
	default:
		throw haxe_Exception.thrown("Invalid enum index " + b);
	}
};
hxbit_enumSer_Game_$rules_$PhysicsType.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("TSU");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("FEVER");
	return s;
};
var hxbit_enumSer_Hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.Hxbit_PropTypeDesc"] = hxbit_enumSer_Hxbit_$PropTypeDesc;
hxbit_enumSer_Hxbit_$PropTypeDesc.__name__ = "hxbit.enumSer.Hxbit_PropTypeDesc";
hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.addByte(1);
			break;
		case 1:
			ctx.addByte(2);
			break;
		case 2:
			ctx.addByte(3);
			break;
		case 3:
			ctx.addByte(4);
			break;
		case 4:
			ctx.addByte(5);
			break;
		case 5:
			var _name = v.name;
			ctx.addByte(6);
			ctx.addString(_name);
			break;
		case 6:
			var _name = v.name;
			ctx.addByte(7);
			ctx.addString(_name);
			break;
		case 7:
			var _k = v.k;
			var _v = v.v;
			ctx.addByte(8);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_v);
			break;
		case 8:
			var _k = v.k;
			ctx.addByte(9);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 9:
			var _fields = v.fields;
			ctx.addByte(10);
			if(_fields == null) {
				ctx.addByte(0);
			} else {
				ctx.addInt(_fields.length + 1);
				var _g = 0;
				while(_g < _fields.length) {
					var v1 = _fields[_g];
					++_g;
					var v2 = v1;
					if(v2 == null) {
						ctx.addByte(0);
					} else {
						var fbits = 0;
						if(v2.name != null) {
							fbits |= 1;
						}
						if(v2.type != null) {
							fbits |= 2;
						}
						ctx.addInt(fbits + 1);
						if((fbits & 1) != 0) {
							ctx.addString(v2.name);
						}
						ctx.addBool(v2.opt);
						if((fbits & 2) != 0) {
							ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
							hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v2.type);
						}
					}
				}
			}
			break;
		case 10:
			var _k = v.k;
			ctx.addByte(11);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 11:
			var _k = v.k;
			ctx.addByte(12);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 12:
			var _t = v.t;
			ctx.addByte(13);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_t);
			break;
		case 13:
			ctx.addByte(14);
			break;
		case 14:
			ctx.addByte(15);
			break;
		case 15:
			ctx.addByte(16);
			break;
		case 16:
			var _t = v.t;
			ctx.addByte(17);
			ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_t);
			break;
		case 17:
			ctx.addByte(18);
			break;
		case 18:
			var _name = v.name;
			ctx.addByte(19);
			ctx.addString(_name);
			break;
		}
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	var conv = ctx.enumConvert.h["hxbit.PropTypeDesc"];
	if(conv != null && conv.constructs[b - 1] != null) {
		return ctx.convertEnum(conv);
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PEnum(_name);
	case 8:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PArray(_k);
	case 10:
		var _fields;
		var e0;
		var len = ctx.getInt();
		if(len == 0) {
			_fields = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var fbits = ctx.getInt();
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						name = ctx.getString();
					}
					var opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PAlias(_k);
	case 12:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PVector(_k);
	case 13:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PFlags(_t);
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	case 19:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PSerInterface(_name);
	default:
		throw haxe_Exception.thrown("Invalid enum index " + b);
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PSerializable");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PEnum");
	var v;
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false},{ name : "v", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PMap");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PArray");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "fields", type : hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "opt", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "type", opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}])), opt : false}]));
	s.fieldsNames.push("PObj");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PAlias");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PVector");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "t", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "t", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PSerInterface");
	return s;
};
var input_IInputDevice = function() { };
$hxClasses["input.IInputDevice"] = input_IInputDevice;
input_IInputDevice.__name__ = "input.IInputDevice";
input_IInputDevice.__isInterface__ = true;
input_IInputDevice.prototype = {
	get_inputSettings: null
	,type: null
	,inputSettings: null
	,unbind: null
	,bindDefault: null
	,rebind: null
	,getAction: null
	,getRawAction: null
	,renderBinding: null
	,renderControls: null
	,__class__: input_IInputDevice
	,__properties__: {get_inputSettings:"get_inputSettings"}
};
var input_AnyInputDevice = function() {
	this.devices = new haxe_ds_IntMap();
	this.isRebinding = false;
	this.type = 2;
	var this1 = this.devices;
	var v = new input_KeyboardInputDevice(this.get_inputSettings());
	this1.h[-1] = v;
	if(kha_input_Gamepad.get(0).connected) {
		this.connectListener(0);
	}
	if(kha_input_Gamepad.get(1).connected) {
		this.connectListener(1);
	}
	if(kha_input_Gamepad.get(2).connected) {
		this.connectListener(2);
	}
	if(kha_input_Gamepad.get(3).connected) {
		this.connectListener(3);
	}
	kha_input_Gamepad.notifyOnConnect($bind(this,this.connectListener),$bind(this,this.disconnectListener));
	save_$data_Profile.addOnChangePrimaryCallback($bind(this,this.onChangePrimary));
};
$hxClasses["input.AnyInputDevice"] = input_AnyInputDevice;
input_AnyInputDevice.__name__ = "input.AnyInputDevice";
input_AnyInputDevice.__interfaces__ = [input_IInputDevice];
input_AnyInputDevice.init = function() {
	input_AnyInputDevice.instance = new input_AnyInputDevice();
};
input_AnyInputDevice.prototype = {
	devices: null
	,isRebinding: null
	,type: null
	,inputSettings: null
	,connectListener: function(id) {
		var this1 = this.devices;
		var v = new input_GamepadInputDevice(save_$data_Profile.primary.input,id);
		this1.h[id] = v;
	}
	,disconnectListener: function(id) {
		this.devices.remove(id);
	}
	,onChangePrimary: function() {
		var d = this.devices.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			d1.inputSettings = save_$data_Profile.primary.input;
		}
	}
	,get_inputSettings: function() {
		return save_$data_Profile.primary.input;
	}
	,resetLastDeviceID: function() {
		input_AnyInputDevice.lastDeviceID = -1;
	}
	,unbind: function(action) {
	}
	,bindDefault: function(action) {
	}
	,rebind: function(action) {
		this.isRebinding = false;
	}
	,getAction: function(action) {
		if(input_AnyInputDevice.rebindCounter > 0) {
			return false;
		}
		var d = this.devices.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			if(d1.getAction(action)) {
				return true;
			}
		}
		return false;
	}
	,getRawAction: function(action) {
		if(input_AnyInputDevice.rebindCounter > 0) {
			return false;
		}
		var d = this.devices.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			if(d1.getRawAction(action)) {
				return true;
			}
		}
		return false;
	}
	,getGamepad: function(id) {
		return js_Boot.__cast(this.devices.h[id] , input_GamepadInputDevice);
	}
	,getKeyboard: function() {
		return js_Boot.__cast(this.devices.h[-1] , input_KeyboardInputDevice);
	}
	,renderBinding: function(g,x,y,scale,action) {
	}
	,renderControls: function(g,x,width,padding,controls) {
		var lastDevice = this.devices.h[input_AnyInputDevice.lastDeviceID];
		if(lastDevice == null) {
			return;
		}
		lastDevice.renderControls(g,x,width,padding,controls);
	}
	,__class__: input_AnyInputDevice
	,__properties__: {get_inputSettings:"get_inputSettings"}
};
var input_AxisMapping = function(axis,direction) {
	this.axis = axis;
	this.direction = direction;
};
$hxClasses["input.AxisMapping"] = input_AxisMapping;
input_AxisMapping.__name__ = "input.AxisMapping";
input_AxisMapping.fromString = function(str) {
	var parts = str.split(";");
	return new input_AxisMapping(Std.parseInt(parts[0]),Std.parseInt(parts[1]));
};
input_AxisMapping.prototype = {
	axis: null
	,direction: null
	,hashCode: function() {
		return (this.axis << 4) + this.direction;
	}
	,isNotEqual: function(other) {
		if(this.axis == other.axis) {
			return this.direction != other.direction;
		} else {
			return true;
		}
	}
	,isNull: function() {
		if(this.axis == null) {
			return this.direction == null;
		} else {
			return false;
		}
	}
	,asString: function() {
		return "" + this.axis + ";" + this.direction;
	}
	,__class__: input_AxisMapping
};
var input_InputDevice = function(type,inputSettings) {
	this.isRebinding = false;
	this.scrollT = 0;
	this.type = type;
	this.inputSettings = inputSettings;
	inputSettings.addUpdateListener($bind(this,this.buildActions));
	this.addListeners();
	input_InputDevice.instances.push(this);
};
$hxClasses["input.InputDevice"] = input_InputDevice;
input_InputDevice.__name__ = "input.InputDevice";
input_InputDevice.__interfaces__ = [input_IInputDevice];
input_InputDevice.update = function() {
	var _g = 0;
	var _g1 = input_InputDevice.instances;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		i.updateInstance();
	}
};
input_InputDevice.prototype = {
	counters: null
	,actions: null
	,isRebinding: null
	,latestRebindAction: null
	,scrollT: null
	,type: null
	,inputSettings: null
	,buildActions: function() {
	}
	,addListeners: function() {
	}
	,removeListeners: function() {
	}
	,removeRebindListeners: function() {
	}
	,get_inputSettings: function() {
		return this.inputSettings;
	}
	,updateInstance: function() {
		var h = this.counters.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var tmp = k;
			var v = this.counters.h[tmp] + 1;
			this.counters.h[tmp] = v;
		}
		++this.scrollT;
	}
	,holdActionHandler: function(value) {
		return value > 0;
	}
	,pressActionHandler: function(value) {
		return value == 1;
	}
	,repeatActionHandler: function(value) {
		if(value < 20) {
			return value == 1;
		}
		return value % 4 == 0;
	}
	,finishRebind: function() {
		this.isRebinding = false;
		input_AnyInputDevice.rebindCounter--;
		save_$data_SaveManager.saveProfiles();
		this.removeRebindListeners();
		this.addListeners();
		this.get_inputSettings().notifyListeners();
	}
	,getScrollX: function(width,screenWidth) {
		var diff = width - screenWidth;
		if(diff <= 0) {
			this.scrollT = 375;
			return 0.0;
		}
		var sinCalc = Math.sin(this.scrollT / 75);
		return (Math.min(0.4,Math.max(sinCalc,-0.4)) + 0.4) * diff * 1.25;
	}
	,unbind: function(action) {
		save_$data_SaveManager.saveProfiles();
		this.get_inputSettings().notifyListeners();
	}
	,bindDefault: function(action) {
		save_$data_SaveManager.saveProfiles();
		this.get_inputSettings().notifyListeners();
	}
	,rebind: function(action) {
		this.isRebinding = true;
		input_AnyInputDevice.rebindCounter++;
		this.removeListeners();
	}
	,getAction: function(action) {
		return this.actions.h[action](this.counters.h[action]);
	}
	,getRawAction: function(action) {
		return this.holdActionHandler(this.counters.h[action]);
	}
	,renderBinding: function(g,x,y,scale,action) {
	}
	,renderControls: function(g,x,width,padding,controls) {
	}
	,__class__: input_InputDevice
	,__properties__: {get_inputSettings:"get_inputSettings"}
};
var input_GamepadInputDevice = function(inputSettings,gamepadID) {
	this.id = gamepadID;
	this.gamepad = kha_input_Gamepad.get(gamepadID);
	input_InputDevice.call(this,1,inputSettings);
};
$hxClasses["input.GamepadInputDevice"] = input_GamepadInputDevice;
input_GamepadInputDevice.__name__ = "input.GamepadInputDevice";
input_GamepadInputDevice.renderButton = function(g,x,y,scale,sprite) {
	var w = sprite.width;
	var h = sprite.height;
	g.drawScaledSubImage(kha_Assets.images.Buttons,sprite.x,sprite.y,w,h,x,y,w * scale,h * scale);
};
input_GamepadInputDevice.__super__ = input_InputDevice;
input_GamepadInputDevice.prototype = $extend(input_InputDevice.prototype,{
	id: null
	,gamepad: null
	,separatorWidth: null
	,buttonsToActions: null
	,axesToActions: null
	,axesCache: null
	,latestButtonRebindFunction: null
	,latestAxisRebindFunction: null
	,buttonListener: function(button,value) {
		if(value != 0) {
			input_AnyInputDevice.lastDeviceID = this.id;
		}
		if(!this.buttonsToActions.h.hasOwnProperty(button)) {
			return;
		}
		var actions = this.buttonsToActions.h[button];
		if(value == 0) {
			this.upListener(actions);
		} else {
			this.downListener(actions);
		}
	}
	,downListener: function(actions) {
		var _g = 0;
		while(_g < actions.length) {
			var action = actions[_g];
			++_g;
			this.counters.h[action] = 0;
		}
	}
	,upListener: function(actions) {
		var _g = 0;
		while(_g < actions.length) {
			var action = actions[_g];
			++_g;
			var _this = this.counters;
			var key = action;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,axisListener: function(axis,value) {
		var map = this.axesToActions;
		var _g_map = map;
		var _g_keys = map.keys.iterator();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _this = _g_map.values;
			var key1 = key.hashCode();
			var _g = { value : _this.h[key1], key : key};
			var k = _g.key;
			var v = _g.value;
			if(k.axis == axis && k.direction * value >= 0) {
				var somethingChanged = false;
				if(Math.abs(value) > this.get_inputSettings().deadzone) {
					if(this.axesCache.indexOf(axis) == -1) {
						input_AnyInputDevice.lastDeviceID = this.id;
						this.downListener(v);
						this.axesCache.push(axis);
						somethingChanged = true;
					}
				} else if(this.axesCache.indexOf(axis) != -1) {
					this.upListener(v);
					HxOverrides.remove(this.axesCache,axis);
					somethingChanged = true;
				}
				if(somethingChanged) {
					var oppositeMapping = new input_AxisMapping(axis,k.direction * -1);
					var _this1 = this.axesToActions.values;
					var key2 = oppositeMapping.hashCode();
					if(_this1.h.hasOwnProperty(key2)) {
						var _this2 = this.axesToActions.values;
						var key3 = oppositeMapping.hashCode();
						this.upListener(_this2.h[key3]);
					}
				}
			}
		}
	}
	,buttonRebindListener: function(action,button,value) {
		if(value == 0) {
			return;
		}
		var original = this.get_inputSettings().mappings.h[action];
		var this1 = this.get_inputSettings().mappings;
		var v = new input_InputMapping(original.keyboardInput,button,original.gamepadAxis);
		this1.h[action] = v;
		this.finishRebind();
	}
	,axisRebindListener: function(action,axis,value) {
		if(value <= this.get_inputSettings().deadzone && value >= -this.get_inputSettings().deadzone) {
			return;
		}
		var original = this.get_inputSettings().mappings.h[action];
		var this1 = this.get_inputSettings().mappings;
		var v = new input_InputMapping(original.keyboardInput,original.gamepadButton,new input_AxisMapping(axis,value > 0 ? 1 : -1));
		this1.h[action] = v;
		this.finishRebind();
	}
	,buildActions: function() {
		this.counters = new haxe_ds_StringMap();
		this.actions = new haxe_ds_StringMap();
		this.buttonsToActions = new haxe_ds_IntMap();
		var this1 = new haxe_ds__$HashMap_HashMapData();
		this.axesToActions = this1;
		this.axesCache = [];
		var h = game_actions_ActionData_ACTION_DATA.h;
		var action_h = h;
		var action_keys = Object.keys(h);
		var action_length = action_keys.length;
		var action_current = 0;
		while(action_current < action_length) {
			var action = action_keys[action_current++];
			var mapping = this.get_inputSettings().mappings.h[action];
			var buttonMapping = mapping.gamepadButton;
			if(buttonMapping != null) {
				if(this.buttonsToActions.h[buttonMapping] == null) {
					var v = [];
					this.buttonsToActions.h[buttonMapping] = v;
				}
				this.buttonsToActions.h[buttonMapping].push(action);
			}
			var axisMapping = mapping.gamepadAxis;
			if(!(axisMapping.axis == null && axisMapping.direction == null)) {
				var _this = this.axesToActions.values;
				var key = axisMapping.hashCode();
				if(_this.h[key] == null) {
					var this1 = this.axesToActions;
					var _this1 = this1.keys;
					var key1 = axisMapping.hashCode();
					_this1.h[key1] = axisMapping;
					var _this2 = this1.values;
					var key2 = axisMapping.hashCode();
					_this2.h[key2] = [];
				}
				var _this3 = this.axesToActions.values;
				var key3 = axisMapping.hashCode();
				_this3.h[key3].push(action);
			}
			switch(game_actions_ActionData_ACTION_DATA.h[action].inputType._hx_index) {
			case 0:
				var v1 = $bind(this,this.holdActionHandler);
				this.actions.h[action] = v1;
				break;
			case 1:
				var v2 = $bind(this,this.pressActionHandler);
				this.actions.h[action] = v2;
				break;
			case 2:
				var v3 = $bind(this,this.repeatActionHandler);
				this.actions.h[action] = v3;
				break;
			}
		}
	}
	,addListeners: function() {
		this.gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,removeListeners: function() {
		this.gamepad.remove($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,removeRebindListeners: function() {
		this.gamepad.remove(this.latestAxisRebindFunction,this.latestButtonRebindFunction);
	}
	,unbind: function(action) {
		var old = this.get_inputSettings().mappings.h[action];
		var this1 = this.get_inputSettings().mappings;
		var v = new input_InputMapping(old.keyboardInput,null,new input_AxisMapping(null,null));
		this1.h[action] = v;
		input_InputDevice.prototype.unbind.call(this,action);
	}
	,bindDefault: function(action) {
		var def = save_$data_InputSettings.MAPPINGS_DEFAULTS.h[action];
		var old = this.get_inputSettings().mappings.h[action];
		var this1 = this.get_inputSettings().mappings;
		var v = new input_InputMapping(old.keyboardInput,def.gamepadButton,def.gamepadAxis);
		this1.h[action] = v;
		input_InputDevice.prototype.bindDefault.call(this,action);
	}
	,rebind: function(action) {
		input_InputDevice.prototype.rebind.call(this,action);
		var _g = $bind(this,this.axisRebindListener);
		var action1 = action;
		this.latestAxisRebindFunction = function(axis,value) {
			_g(action1,axis,value);
		};
		var _g1 = $bind(this,this.buttonRebindListener);
		var action2 = action;
		this.latestButtonRebindFunction = function(button,value) {
			_g1(action2,button,value);
		};
		this.latestRebindAction = action;
		this.gamepad.notify(this.latestAxisRebindFunction,this.latestButtonRebindFunction);
	}
	,renderBinding: function(g,x,y,scale,action) {
		var title = game_actions_ActionData_ACTION_DATA.h[action].title;
		if(action == this.latestRebindAction && this.isRebinding) {
			g.drawString("Press any button / stick for [ " + title + " ]",x,y);
			return;
		}
		var mapping = this.get_inputSettings().mappings.h[action];
		var tmp;
		if(mapping.gamepadButton == null) {
			var _this = mapping.gamepadAxis;
			tmp = _this.axis == null && _this.direction == null;
		} else {
			tmp = false;
		}
		if(tmp) {
			g.drawString("" + title + ": [ UNBOUND ]",x,y);
			return;
		}
		var fontHeight = g.get_font().height(g.get_fontSize());
		var str = "" + title + ": ";
		var strW = g.get_font().width(g.get_fontSize(),str);
		g.drawString(str,x,y);
		x += strW;
		g.set_color(-1);
		var buttonMapping = mapping.gamepadButton;
		if(buttonMapping != null) {
			var key = this.get_inputSettings().gamepadBrand;
			var buttonSpr = input_ButtonSpriteCoordinates_BUTTON_SPRITE_COORDINATES.h[key].h[buttonMapping];
			input_GamepadInputDevice.renderButton(g,x,y,fontHeight / buttonSpr.height,buttonSpr);
			x += buttonSpr.width * scale;
		}
		var axisMapping = mapping.gamepadAxis;
		if(!(axisMapping.axis == null && axisMapping.direction == null)) {
			var key = this.get_inputSettings().gamepadBrand;
			var this1 = input_AxisSpriteCoordinates_AXIS_SPRITE_COORDINATES.h[key];
			var key = mapping.gamepadAxis.hashCode();
			var axisSpr = this1.h[key];
			if(axisSpr != null) {
				input_GamepadInputDevice.renderButton(g,x,y,fontHeight / axisSpr.height,axisSpr);
			} else {
				g.drawString("AXIS" + axisMapping.axis,x,y);
			}
		}
	}
	,renderControls: function(g,x,width,padding,controls) {
		var fontHeight = g.get_font().height(g.get_fontSize());
		var y = ScaleManager.screen.height - padding - fontHeight;
		var paddedScreenWidth = width - padding * 2;
		var totalWidth = 0.0;
		var _g = 0;
		var _g1 = controls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = d.actions;
			while(_g2 < _g3.length) {
				var action = _g3[_g2];
				++_g2;
				var mapping = this.get_inputSettings().mappings.h[action];
				var button = mapping.gamepadButton;
				var axis = mapping.gamepadAxis;
				var buttonSpr = this.get_inputSettings().getButtonSprite(action);
				if(buttonSpr != null) {
					totalWidth += buttonSpr.width * (fontHeight / buttonSpr.height) * 1.25;
				}
				if(!(axis.axis == null && axis.direction == null)) {
					var axisSpr = this.get_inputSettings().getAxisSprite(action);
					if(axisSpr != null) {
						totalWidth += axisSpr.width * (fontHeight / axisSpr.height) * 1.25;
					} else {
						totalWidth += g.get_font().width(g.get_fontSize(),"AXIS" + axis.axis) * 1.25;
					}
				}
			}
			totalWidth += g.get_font().width(g.get_fontSize()," : " + d.description + "    ");
		}
		var scrollX = this.getScrollX(totalWidth,paddedScreenWidth);
		var _g = 0;
		var _g1 = controls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var str = "";
			var _g2 = 0;
			var _g3 = d.actions;
			while(_g2 < _g3.length) {
				var action = _g3[_g2];
				++_g2;
				var mapping = this.get_inputSettings().mappings.h[action];
				var axis = mapping.gamepadAxis;
				var buttonSpr = this.get_inputSettings().getButtonSprite(action);
				if(buttonSpr != null) {
					var buttonScale = fontHeight / buttonSpr.height;
					input_GamepadInputDevice.renderButton(g,x - scrollX,y,buttonScale,buttonSpr);
					x += buttonSpr.width * buttonScale * 1.25;
				}
				if(!(axis.axis == null && axis.direction == null)) {
					var axisSpr = this.get_inputSettings().getAxisSprite(action);
					if(axisSpr != null) {
						var axisScale = fontHeight / axisSpr.height;
						input_GamepadInputDevice.renderButton(g,x - scrollX,y,axisScale,axisSpr);
						x += axisSpr.width * axisScale * 1.25;
					} else {
						var str1 = "AXIS" + axis.axis;
						g.drawString(str1,x - scrollX,y);
						x += g.get_font().width(g.get_fontSize(),str1) * 1.25;
					}
				}
			}
			str = str.substring(0,str.length - 1);
			str += " : " + d.description + "    ";
			var strWidth = g.get_font().width(g.get_fontSize(),str);
			utils_Utils.shadowDrawString(g,3,-16777216,-1,str,x - scrollX,y);
			x += strWidth;
		}
	}
	,__class__: input_GamepadInputDevice
});
var input_InputMapping = function(keyboardInput,gamepadButton,gamepadAxis) {
	this.keyboardInput = keyboardInput;
	this.gamepadButton = gamepadButton;
	this.gamepadAxis = gamepadAxis;
};
$hxClasses["input.InputMapping"] = input_InputMapping;
input_InputMapping.__name__ = "input.InputMapping";
input_InputMapping.fromString = function(str) {
	var parts = str.split(";");
	return new input_InputMapping(parts[0] != "" ? js_Boot.__cast(Std.parseInt(parts[0]) , Int) : null,parts[1] != "" ? Std.parseInt(parts[1]) : null,parts[2] != "" ? input_AxisMapping.fromString(parts[2]) : new input_AxisMapping(null,null));
};
input_InputMapping.prototype = {
	keyboardInput: null
	,gamepadButton: null
	,gamepadAxis: null
	,isNotEqual: function(other) {
		if(!(this.keyboardInput != other.keyboardInput || this.gamepadButton != other.gamepadButton)) {
			return this.gamepadAxis.isNotEqual(other.gamepadAxis);
		} else {
			return true;
		}
	}
	,asString: function() {
		var kb = this.keyboardInput == null ? "" : "" + this.keyboardInput;
		var bt = this.gamepadButton == null ? "" : "" + this.gamepadButton;
		var ax = this.gamepadAxis == null ? "" : "" + this.gamepadAxis.asString();
		return "" + kb + ";" + bt + ";" + ax;
	}
	,__class__: input_InputMapping
};
var input_KeyboardInputDevice = function(inputSettings) {
	this.keyboard = kha_input_Keyboard.get();
	this.anyKeyCounter = 0;
	input_InputDevice.call(this,0,inputSettings);
};
$hxClasses["input.KeyboardInputDevice"] = input_KeyboardInputDevice;
input_KeyboardInputDevice.__name__ = "input.KeyboardInputDevice";
input_KeyboardInputDevice.__super__ = input_InputDevice;
input_KeyboardInputDevice.prototype = $extend(input_InputDevice.prototype,{
	keyboard: null
	,anyKeyCounter: null
	,keysToActions: null
	,latestRebindFunction: null
	,isAnyKeyDown: null
	,downListener: function(key) {
		this.anyKeyCounter++;
		this.isAnyKeyDown = true;
		input_AnyInputDevice.lastDeviceID = -1;
		if(!this.keysToActions.h.hasOwnProperty(key)) {
			return;
		}
		var _g = 0;
		var _g1 = this.keysToActions.h[key];
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			this.counters.h[action] = 0;
		}
	}
	,upListener: function(key) {
		if(this.anyKeyCounter > 0) {
			this.anyKeyCounter--;
		}
		if(this.anyKeyCounter == 0) {
			this.isAnyKeyDown = false;
		}
		if(!this.keysToActions.h.hasOwnProperty(key)) {
			return;
		}
		var _g = 0;
		var _g1 = this.keysToActions.h[key];
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			var _this = this.counters;
			var key = action;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,changeKeybind: function(action,key) {
		var original = this.get_inputSettings().mappings.h[action];
		var this1 = this.get_inputSettings().mappings;
		var v = new input_InputMapping(key,original.gamepadButton,original.gamepadAxis);
		this1.h[action] = v;
	}
	,rebindListener: function(action,key) {
		this.changeKeybind(action,key);
		this.finishRebind();
	}
	,buildActions: function() {
		this.counters = new haxe_ds_StringMap();
		this.actions = new haxe_ds_StringMap();
		this.keysToActions = new haxe_ds_IntMap();
		var h = game_actions_ActionData_ACTION_DATA.h;
		var action_h = h;
		var action_keys = Object.keys(h);
		var action_length = action_keys.length;
		var action_current = 0;
		while(action_current < action_length) {
			var action = action_keys[action_current++];
			var kbInput = this.get_inputSettings().mappings.h[action].keyboardInput;
			if(kbInput != null) {
				if(this.keysToActions.h[kbInput] == null) {
					var v = [];
					this.keysToActions.h[kbInput] = v;
				}
				this.keysToActions.h[kbInput].push(action);
			}
			switch(game_actions_ActionData_ACTION_DATA.h[action].inputType._hx_index) {
			case 0:
				var v1 = $bind(this,this.holdActionHandler);
				this.actions.h[action] = v1;
				break;
			case 1:
				var v2 = $bind(this,this.pressActionHandler);
				this.actions.h[action] = v2;
				break;
			case 2:
				var v3 = $bind(this,this.repeatActionHandler);
				this.actions.h[action] = v3;
				break;
			}
		}
	}
	,addListeners: function() {
		this.keyboard.notify($bind(this,this.downListener),$bind(this,this.upListener));
	}
	,removeListeners: function() {
		this.keyboard.remove($bind(this,this.downListener),$bind(this,this.upListener));
	}
	,removeRebindListeners: function() {
		this.keyboard.remove(this.latestRebindFunction);
	}
	,unbind: function(action) {
		this.changeKeybind(action,null);
		input_InputDevice.prototype.unbind.call(this,action);
	}
	,bindDefault: function(action) {
		this.changeKeybind(action,save_$data_InputSettings.MAPPINGS_DEFAULTS.h[action].keyboardInput);
		input_InputDevice.prototype.bindDefault.call(this,action);
	}
	,rebind: function(action) {
		input_InputDevice.prototype.rebind.call(this,action);
		var _g = $bind(this,this.rebindListener);
		var action1 = action;
		this.latestRebindFunction = function(key) {
			_g(action1,key);
		};
		this.latestRebindAction = action;
		this.keyboard.notify(this.latestRebindFunction);
	}
	,renderBinding: function(g,x,y,scale,action) {
		var title = game_actions_ActionData_ACTION_DATA.h[action].title;
		if(action == this.latestRebindAction && this.isRebinding) {
			g.drawString("[ Press any key for " + title + " ]",x,y);
			return;
		}
		var kbInput = this.get_inputSettings().mappings.h[action].keyboardInput;
		var binding = kbInput == null ? "[ UNBOUND ]" : input_KeyCodeToString_KEY_CODE_TO_STRING.h[kbInput];
		g.drawString("" + title + ": " + binding,x,y);
	}
	,renderControls: function(g,x,width,padding,controls) {
		var str = "";
		var _g = 0;
		var _g1 = controls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = d.actions;
			while(_g2 < _g3.length) {
				var action = _g3[_g2];
				++_g2;
				var mapping = this.get_inputSettings().mappings.h[action].keyboardInput;
				if(mapping != null) {
					str += "" + input_KeyCodeToString_KEY_CODE_TO_STRING.h[mapping] + "/";
				}
			}
			str = str.substring(0,str.length - 1);
			str += " : " + d.description + "    ";
		}
		var strWidth = g.get_font().width(g.get_fontSize(),str);
		var paddedScreenWidth = width - padding * 2;
		utils_Utils.shadowDrawString(g,3,-16777216,-1,str,x + padding - this.getScrollX(strWidth,paddedScreenWidth),ScaleManager.screen.height - padding - g.get_font().height(g.get_fontSize()));
	}
	,resetIsAnyKeyDown: function() {
		this.anyKeyCounter = 0;
		this.isAnyKeyDown = false;
	}
	,__class__: input_KeyboardInputDevice
});
var input_NullInputDevice = function() {
	this.type = 3;
};
$hxClasses["input.NullInputDevice"] = input_NullInputDevice;
input_NullInputDevice.__name__ = "input.NullInputDevice";
input_NullInputDevice.__interfaces__ = [input_IInputDevice];
input_NullInputDevice.prototype = {
	type: null
	,inputSettings: null
	,get_inputSettings: function() {
		return save_$data_Profile.primary.input;
	}
	,unbind: function(action) {
	}
	,bindDefault: function(actoin) {
	}
	,rebind: function(action) {
	}
	,getAction: function(action) {
		return false;
	}
	,getRawAction: function(action) {
		return false;
	}
	,renderBinding: function(g,x,y,scale,action) {
	}
	,renderControls: function(g,x,width,padding,controls) {
	}
	,__class__: input_NullInputDevice
	,__properties__: {get_inputSettings:"get_inputSettings"}
};
var io_colyseus_Auth = function(endpoint) {
	this.endpoint = StringTools.replace(endpoint,"ws","http");
};
$hxClasses["io.colyseus.Auth"] = io_colyseus_Auth;
io_colyseus_Auth.__name__ = "io.colyseus.Auth";
io_colyseus_Auth.prototype = {
	token: null
	,endpoint: null
	,hasToken: function() {
		return this.token != null;
	}
	,login: function() {
		var query = new haxe_ds_StringMap();
		this.request("POST","/auth",query);
	}
	,getDeviceId: function() {
		return "";
	}
	,getPlatform: function() {
		return "";
	}
	,request: function(method,segments,query,body) {
		if(query == null) {
			query = new haxe_ds_StringMap();
		}
		var queryString = [];
		var h = query.h;
		var field_h = h;
		var field_keys = Object.keys(h);
		var field_length = field_keys.length;
		var field_current = 0;
		while(field_current < field_length) {
			var field = field_keys[field_current++];
			queryString.push(field + "=" + query.h[field]);
		}
		if(this.hasToken()) {
			var v = this.token;
			query.h["token"] = v;
		}
		var req = new haxe_http_HttpJs(this.endpoint + segments + "?" + queryString.join("&"));
		var responseBytes = new haxe_io_BytesOutput();
		if(this.hasToken()) {
			req.setHeader("authorization","Bearer " + this.token);
		}
		if(body != null) {
			req.setPostData(body);
			req.setHeader("Content-Type","application/json");
		}
		req.setHeader("Accept","application/json");
		req.onData = function(json) {
			haxe_Log.trace("RESPONSE:" + json,{ fileName : "src/io/colyseus/Auth.hx", lineNumber : 64, className : "io.colyseus.Auth", methodName : "request"});
		};
		req.onError = function(err) {
			haxe_Log.trace("onError",{ fileName : "src/io/colyseus/Auth.hx", lineNumber : 68, className : "io.colyseus.Auth", methodName : "request"});
			haxe_Log.trace(err,{ fileName : "src/io/colyseus/Auth.hx", lineNumber : 69, className : "io.colyseus.Auth", methodName : "request"});
		};
		req.setHeader("X-HTTP-Method-Override",method);
		req.request(true);
	}
	,__class__: io_colyseus_Auth
};
var io_colyseus_RoomAvailable = function() { };
$hxClasses["io.colyseus.RoomAvailable"] = io_colyseus_RoomAvailable;
io_colyseus_RoomAvailable.__name__ = "io.colyseus.RoomAvailable";
io_colyseus_RoomAvailable.__isInterface__ = true;
io_colyseus_RoomAvailable.prototype = {
	roomId: null
	,clients: null
	,maxClients: null
	,metadata: null
	,__class__: io_colyseus_RoomAvailable
};
var io_colyseus_DummyState = function() { };
$hxClasses["io.colyseus.DummyState"] = io_colyseus_DummyState;
io_colyseus_DummyState.__name__ = "io.colyseus.DummyState";
var io_colyseus_Client = function(endpoint) {
	this.endpoint = endpoint;
	this.auth = new io_colyseus_Auth(this.endpoint);
};
$hxClasses["io.colyseus.Client"] = io_colyseus_Client;
io_colyseus_Client.__name__ = "io.colyseus.Client";
io_colyseus_Client.prototype = {
	create_lobby_WaitingRoomState: function(roomName,options,stateClass,callback) {
		this.createMatchMakeRequest_create_T("create",roomName,options,stateClass,callback);
	}
	,joinById_lobby_WaitingRoomState: function(roomId,options,stateClass,callback) {
		this.createMatchMakeRequest_joinById_T("joinById",roomId,options,stateClass,callback);
	}
	,createMatchMakeRequest_reconnect_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			options.h["token"] = this.auth.token;
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_joinById_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			options.h["token"] = this.auth.token;
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_join_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			options.h["token"] = this.auth.token;
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_create_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			options.h["token"] = this.auth.token;
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,createMatchMakeRequest_joinOrCreate_T: function(method,roomName,options,stateClass,callback) {
		var _gthis = this;
		if(this.auth.hasToken()) {
			options.h["token"] = this.auth.token;
		}
		this.request("POST","/matchmake/" + method + "/" + roomName,JSON.stringify(options),function(err,response) {
			if(err != null) {
				callback(err,null);
				return;
			} else {
				_gthis.consumeSeatReservation_createMatchMakeRequest_T(response,stateClass,callback);
			}
		});
	}
	,consumeSeatReservation_createMatchMakeRequest_T: function(response,stateClass,callback) {
		var room = new io_colyseus_Room(response.room.name,stateClass);
		room.id = response.room.roomId;
		room.sessionId = response.sessionId;
		var onError = function(code,message) {
			callback(new io_colyseus_error_MatchMakeError(code,message),null);
		};
		var onJoin = function() {
			HxOverrides.remove(room.onError,onError);
			callback(null,room);
		};
		room.onError.push(onError);
		room.onJoin.push(onJoin);
		var room1 = room;
		var tmp = Std.string(response.room.processId) + "/" + room.id;
		var _g = new haxe_ds_StringMap();
		_g.h["sessionId"] = room.sessionId;
		room1.connect(this.createConnection(tmp,_g));
	}
	,endpoint: null
	,auth: null
	,getAvailableRooms: function(roomName,callback) {
		this.request("GET","/matchmake/" + roomName,null,callback);
	}
	,createConnection: function(path,options) {
		if(path == null) {
			path = "";
		}
		var params = [];
		var h = options.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			params.push(name + "=" + Std.string(options.h[name]));
		}
		return new io_colyseus_Connection(this.endpoint + "/" + path + "?" + params.join("&"));
	}
	,request: function(method,segments,body,callback) {
		var req = new haxe_http_HttpJs("http" + this.endpoint.substring(2) + segments);
		if(body != null) {
			req.setPostData(body);
			req.setHeader("Content-Type","application/json");
		}
		req.setHeader("Accept","application/json");
		var responseStatus;
		req.onStatus = function(status) {
			responseStatus = status;
		};
		req.onData = function(json) {
			var response = JSON.parse(json);
			if(response.error) {
				var code = response.code;
				var message = response.error;
				callback(new io_colyseus_error_MatchMakeError(code,message),null);
			} else {
				callback(null,response);
			}
		};
		req.onError = function(err) {
			callback(new io_colyseus_error_MatchMakeError(0,err),null);
		};
		req.request(method == "POST");
	}
	,__class__: io_colyseus_Client
};
var io_colyseus_Connection = function(url) {
	this.reconnectionEnabled = false;
	var _gthis = this;
	this.ws = haxe_net_WebSocket.create(url);
	this.ws.onopen = function() {
		_gthis.onOpen();
	};
	this.ws.onmessageBytes = function(bytes) {
		_gthis.onMessage(bytes);
	};
	this.ws.onclose = function(e) {
		_gthis.onClose();
	};
	this.ws.onerror = function(message) {
		_gthis.onError(message);
	};
};
$hxClasses["io.colyseus.Connection"] = io_colyseus_Connection;
io_colyseus_Connection.__name__ = "io.colyseus.Connection";
io_colyseus_Connection.prototype = {
	reconnectionEnabled: null
	,ws: null
	,onOpen: function() {
	}
	,onMessage: function(bytes) {
	}
	,onClose: function() {
	}
	,onError: function(message) {
	}
	,send: function(data) {
		this.ws.sendBytes(data);
	}
	,close: function() {
		this.ws.close();
	}
	,__class__: io_colyseus_Connection
};
var io_colyseus_Room = function(name,cls) {
	this.serializer = null;
	this.serializerId = null;
	this.onMessageHandlers = new haxe_ds_StringMap();
	var this1 = [];
	this.onLeave = this1;
	var this1 = [];
	this.onError = this1;
	var this1 = [];
	this.onStateChange = this1;
	var this1 = [];
	this.onJoin = this1;
	this.id = null;
	this.name = name;
	this.tmpStateClass = cls;
};
$hxClasses["io.colyseus.Room"] = io_colyseus_Room;
io_colyseus_Room.__name__ = "io.colyseus.Room";
io_colyseus_Room.prototype = {
	id: null
	,sessionId: null
	,name: null
	,onJoin: null
	,onStateChange: null
	,onError: null
	,onLeave: null
	,onMessageHandlers: null
	,connection: null
	,serializerId: null
	,serializer: null
	,tmpStateClass: null
	,connect: function(connection) {
		var _gthis = this;
		this.connection = connection;
		this.connection.reconnectionEnabled = false;
		this.connection.onMessage = function(bytes) {
			_gthis.onMessageCallback(bytes);
		};
		this.connection.onClose = function() {
			_gthis.teardown();
			var _g = 0;
			var _g1 = _gthis.onLeave;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
		};
		this.connection.onError = function(e) {
			var _g = 0;
			var _g1 = _gthis.onError;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn(0,e);
			}
		};
	}
	,leave: function(consented) {
		if(consented == null) {
			consented = true;
		}
		if(this.connection != null) {
			if(consented) {
				var bytes = new haxe_io_BytesOutput();
				bytes.writeByte(12);
				this.connection.send(bytes.getBytes());
			} else {
				this.connection.close();
			}
		} else {
			var _g = 0;
			var _g1 = this.onLeave;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
		}
	}
	,send: function(type,message) {
		var bytesToSend = new haxe_io_BytesOutput();
		bytesToSend.writeByte(13);
		if(typeof(type) == "string") {
			var encodedType = haxe_io_Bytes.ofString(type);
			bytesToSend.writeByte(encodedType.length | 160);
			bytesToSend.writeBytes(encodedType,0,encodedType.length);
		} else {
			bytesToSend.writeByte(type);
		}
		if(message != null) {
			var encodedMessage = new org_msgpack_Encoder(message).o.getBytes();
			bytesToSend.writeBytes(encodedMessage,0,encodedMessage.length);
		}
		this.connection.send(bytesToSend.getBytes());
	}
	,onMessage: function(type,callback) {
		var this1 = this.onMessageHandlers;
		var k = this.getMessageHandlerKey(type);
		this1.h[k] = callback;
		return this;
	}
	,state: null
	,get_state: function() {
		return this.serializer.getState();
	}
	,teardown: function() {
		if(this.serializer != null) {
			this.serializer.teardown();
		}
	}
	,onMessageCallback: function(data) {
		var code = data.b[0];
		var it = { offset : 1};
		if(code == 10) {
			this.serializerId = data.getString(it.offset + 1,data.b[it.offset]);
			it.offset += this.serializerId.length + 1;
			if(this.serializerId == "schema") {
				this.serializer = new io_colyseus_serializer_SchemaSerializer(this.tmpStateClass);
			} else if(this.serializerId == "fossil-delta") {
				this.serializer = new io_colyseus_serializer_FossilDeltaSerializer();
			} else {
				this.serializer = new io_colyseus_serializer_NoneSerializer();
			}
			if(data.length > it.offset) {
				this.serializer.handshake(data,it.offset);
			}
			var _g = 0;
			var _g1 = this.onJoin;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn();
			}
			var bytes = new haxe_io_BytesOutput();
			bytes.writeByte(10);
			this.connection.send(bytes.getBytes());
		} else if(code == 11) {
			var errorCode = io_colyseus_serializer_schema_Schema.decoder.number(data,it);
			var message = io_colyseus_serializer_schema_Schema.decoder.string(data,it);
			haxe_Log.trace("Room error: code => " + errorCode + ", message => " + message,{ fileName : "src/io/colyseus/Room.hx", lineNumber : 154, className : "io.colyseus.Room", methodName : "onMessageCallback"});
			var _g = 0;
			var _g1 = this.onError;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				fn(errorCode,message);
			}
		} else if(code == 12) {
			this.leave();
		} else if(code == 14) {
			this.setState(data.sub(it.offset,data.length - 1));
		} else if(code == 15) {
			this.patch(data.sub(it.offset,data.length - 1));
		} else if(code == 13) {
			var type = io_colyseus_serializer_schema_SPEC.stringCheck(data,it) ? io_colyseus_serializer_schema_Schema.decoder.string(data,it) : io_colyseus_serializer_schema_Schema.decoder.number(data,it);
			var message;
			if(data.length > it.offset) {
				var b = data.sub(it.offset,data.length - it.offset);
				var option = null;
				if(option == null) {
					option = org_msgpack_DecodeOption.AsObject;
				}
				message = new org_msgpack_Decoder(b,option).o;
			} else {
				message = null;
			}
			this.dispatchMessage(type,message);
		}
	}
	,setState: function(encodedState) {
		this.serializer.setState(encodedState);
		var e = this.onStateChange;
		var arg = this.serializer.getState();
		var _g = 0;
		var _g1 = e;
		while(_g < _g1.length) {
			var fn = _g1[_g];
			++_g;
			fn(arg);
		}
	}
	,patch: function(binaryPatch) {
		this.serializer.patch(binaryPatch);
		var e = this.onStateChange;
		var arg = this.serializer.getState();
		var _g = 0;
		var _g1 = e;
		while(_g < _g1.length) {
			var fn = _g1[_g];
			++_g;
			fn(arg);
		}
	}
	,dispatchMessage: function(type,message) {
		var messageType = this.getMessageHandlerKey(type);
		if(this.onMessageHandlers.h[messageType] != null) {
			this.onMessageHandlers.h[messageType](message);
		} else {
			haxe_Log.trace("onMessage not registered for type " + Std.string(type),{ fileName : "src/io/colyseus/Room.hx", lineNumber : 199, className : "io.colyseus.Room", methodName : "dispatchMessage"});
		}
	}
	,getMessageHandlerKey: function(type) {
		if(typeof(type) == "string") {
			return type;
		} else if(typeof(type) == "number" && ((type | 0) === type)) {
			return "i" + Std.string(type);
		} else {
			var c = js_Boot.getClass(type);
			return "$" + c.__name__;
		}
	}
	,__class__: io_colyseus_Room
	,__properties__: {get_state:"get_state"}
};
var io_colyseus_error_MatchMakeError = function(code,message) {
	this.code = code;
	this.message = message;
};
$hxClasses["io.colyseus.error.MatchMakeError"] = io_colyseus_error_MatchMakeError;
io_colyseus_error_MatchMakeError.__name__ = "io.colyseus.error.MatchMakeError";
io_colyseus_error_MatchMakeError.prototype = {
	code: null
	,message: null
	,__class__: io_colyseus_error_MatchMakeError
};
var io_colyseus_events_EventHandler = {};
io_colyseus_events_EventHandler.__properties__ = {get_handlers:"get_handlers"};
io_colyseus_events_EventHandler.get_handlers = function(this1) {
	return this1;
};
io_colyseus_events_EventHandler._new = function() {
	var this1 = [];
	return this1;
};
io_colyseus_events_EventHandler.add = function(this1,fn) {
	this1.push(fn);
};
io_colyseus_events_EventHandler.remove = function(this1,fn) {
	HxOverrides.remove(this1,fn);
};
var io_colyseus_events_EventHandlerDispatcher0 = function() { };
$hxClasses["io.colyseus.events.EventHandlerDispatcher0"] = io_colyseus_events_EventHandlerDispatcher0;
io_colyseus_events_EventHandlerDispatcher0.__name__ = "io.colyseus.events.EventHandlerDispatcher0";
io_colyseus_events_EventHandlerDispatcher0.dispatch = function(e) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn();
	}
};
var io_colyseus_events_EventHandlerDispatcher1 = function() { };
$hxClasses["io.colyseus.events.EventHandlerDispatcher1"] = io_colyseus_events_EventHandlerDispatcher1;
io_colyseus_events_EventHandlerDispatcher1.__name__ = "io.colyseus.events.EventHandlerDispatcher1";
io_colyseus_events_EventHandlerDispatcher1.dispatch = function(e,arg) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn(arg);
	}
};
var io_colyseus_events_EventHandlerDispatcher2 = function() { };
$hxClasses["io.colyseus.events.EventHandlerDispatcher2"] = io_colyseus_events_EventHandlerDispatcher2;
io_colyseus_events_EventHandlerDispatcher2.__name__ = "io.colyseus.events.EventHandlerDispatcher2";
io_colyseus_events_EventHandlerDispatcher2.dispatch = function(e,arg1,arg2) {
	var _g = 0;
	var _g1 = e;
	while(_g < _g1.length) {
		var fn = _g1[_g];
		++_g;
		fn(arg1,arg2);
	}
};
var io_colyseus_serializer_Serializer = function() { };
$hxClasses["io.colyseus.serializer.Serializer"] = io_colyseus_serializer_Serializer;
io_colyseus_serializer_Serializer.__name__ = "io.colyseus.serializer.Serializer";
io_colyseus_serializer_Serializer.__isInterface__ = true;
io_colyseus_serializer_Serializer.prototype = {
	setState: null
	,getState: null
	,patch: null
	,teardown: null
	,handshake: null
	,__class__: io_colyseus_serializer_Serializer
};
var io_colyseus_serializer_FossilDeltaSerializer = function() {
	this.state = new io_colyseus_state_$listener_StateContainer({ });
};
$hxClasses["io.colyseus.serializer.FossilDeltaSerializer"] = io_colyseus_serializer_FossilDeltaSerializer;
io_colyseus_serializer_FossilDeltaSerializer.__name__ = "io.colyseus.serializer.FossilDeltaSerializer";
io_colyseus_serializer_FossilDeltaSerializer.__interfaces__ = [io_colyseus_serializer_Serializer];
io_colyseus_serializer_FossilDeltaSerializer.prototype = {
	state: null
	,_previousState: null
	,setState: function(encodedState) {
		this._previousState = encodedState;
		var option = null;
		if(option == null) {
			option = org_msgpack_DecodeOption.AsObject;
		}
		this.state.set(new org_msgpack_Decoder(encodedState,option).o);
	}
	,getState: function() {
		return this.state.state;
	}
	,patch: function(patches) {
		this._previousState = io_colyseus_serializer_fossil_$delta_FossilDelta.Apply(this._previousState,patches);
		var option = null;
		if(option == null) {
			option = org_msgpack_DecodeOption.AsObject;
		}
		this.state.set(new org_msgpack_Decoder(this._previousState,option).o);
	}
	,teardown: function() {
		this.state.removeAllListeners();
	}
	,handshake: function(bytes,offset) {
	}
	,__class__: io_colyseus_serializer_FossilDeltaSerializer
};
var io_colyseus_serializer_NoneSerializer = function() {
};
$hxClasses["io.colyseus.serializer.NoneSerializer"] = io_colyseus_serializer_NoneSerializer;
io_colyseus_serializer_NoneSerializer.__name__ = "io.colyseus.serializer.NoneSerializer";
io_colyseus_serializer_NoneSerializer.__interfaces__ = [io_colyseus_serializer_Serializer];
io_colyseus_serializer_NoneSerializer.prototype = {
	setState: function(data) {
	}
	,getState: function() {
		return null;
	}
	,patch: function(data) {
	}
	,teardown: function() {
	}
	,handshake: function(bytes,offset) {
	}
	,__class__: io_colyseus_serializer_NoneSerializer
};
var io_colyseus_serializer_SchemaSerializer = function(cl) {
	this.refs = new io_colyseus_serializer_schema_ReferenceTracker();
	this.state = Type.createInstance(cl,[]);
};
$hxClasses["io.colyseus.serializer.SchemaSerializer"] = io_colyseus_serializer_SchemaSerializer;
io_colyseus_serializer_SchemaSerializer.__name__ = "io.colyseus.serializer.SchemaSerializer";
io_colyseus_serializer_SchemaSerializer.__interfaces__ = [io_colyseus_serializer_Serializer];
io_colyseus_serializer_SchemaSerializer.prototype = {
	state: null
	,refs: null
	,setState: function(data) {
		(js_Boot.__cast(this.state , io_colyseus_serializer_schema_Schema)).decode(data,null,this.refs);
	}
	,getState: function() {
		return this.state;
	}
	,patch: function(data) {
		(js_Boot.__cast(this.state , io_colyseus_serializer_schema_Schema)).decode(data,null,this.refs);
	}
	,teardown: function() {
		this.refs.clear();
	}
	,handshake: function(bytes,offset) {
	}
	,__class__: io_colyseus_serializer_SchemaSerializer
};
var io_colyseus_serializer_fossil_$delta_FossilDelta = function() { };
$hxClasses["io.colyseus.serializer.fossil_delta.FossilDelta"] = io_colyseus_serializer_fossil_$delta_FossilDelta;
io_colyseus_serializer_fossil_$delta_FossilDelta.__name__ = "io.colyseus.serializer.fossil_delta.FossilDelta";
io_colyseus_serializer_fossil_$delta_FossilDelta.checksum = function(arr) {
	var sum0 = 0;
	var sum1 = 0;
	var sum2 = 0;
	var sum3 = 0;
	var z = 0;
	var N = arr.length;
	while(N >= 16) {
		sum0 = sum0 + arr.b[z] | 0;
		sum1 = sum1 + arr.b[z + 1] | 0;
		sum2 = sum2 + arr.b[z + 2] | 0;
		sum3 = sum3 + arr.b[z + 3] | 0;
		sum0 = sum0 + arr.b[z + 4] | 0;
		sum1 = sum1 + arr.b[z + 5] | 0;
		sum2 = sum2 + arr.b[z + 6] | 0;
		sum3 = sum3 + arr.b[z + 7] | 0;
		sum0 = sum0 + arr.b[z + 8] | 0;
		sum1 = sum1 + arr.b[z + 9] | 0;
		sum2 = sum2 + arr.b[z + 10] | 0;
		sum3 = sum3 + arr.b[z + 11] | 0;
		sum0 = sum0 + arr.b[z + 12] | 0;
		sum1 = sum1 + arr.b[z + 13] | 0;
		sum2 = sum2 + arr.b[z + 14] | 0;
		sum3 = sum3 + arr.b[z + 15] | 0;
		z += 16;
		N -= 16;
	}
	while(N >= 4) {
		sum0 = sum0 + arr.b[z] | 0;
		sum1 = sum1 + arr.b[z + 1] | 0;
		sum2 = sum2 + arr.b[z + 2] | 0;
		sum3 = sum3 + arr.b[z + 3] | 0;
		z += 4;
		N -= 4;
	}
	sum3 = ((sum3 + (sum2 << 8) | 0) + (sum1 << 16) | 0) + (sum0 << 24) | 0;
	switch(N) {
	case 1:
		sum3 = sum3 + (arr.b[z] << 24) | 0;
		break;
	case 2:
		sum3 = sum3 + (arr.b[z + 1] << 16) | 0;
		break;
	case 3:
		sum3 = sum3 + (arr.b[z + 2] << 8) | 0;
		break;
	}
	return sum3 >>> 0;
};
io_colyseus_serializer_fossil_$delta_FossilDelta.Apply = function(src,delta,verifyChecksum) {
	if(verifyChecksum == null) {
		verifyChecksum = false;
	}
	var total = 0;
	var zDelta = new io_colyseus_serializer_fossil_$delta_Reader(delta);
	var lenSrc = src.length;
	var lenDelta = delta.length;
	var limit = zDelta.getInt();
	if(zDelta.getChar() != "\n") {
		throw haxe_Exception.thrown("size integer not terminated by 'n'");
	}
	var zOut = new io_colyseus_serializer_fossil_$delta_Writer();
	while(zDelta.haveBytes()) {
		var ofst;
		var cnt = zDelta.getInt();
		var char = zDelta.getChar();
		if(char == "@") {
			ofst = zDelta.getInt();
			if(zDelta.haveBytes() && zDelta.getChar() != ",") {
				throw haxe_Exception.thrown("copy command not terminated by ','");
			}
			total += cnt;
			if(total > limit) {
				throw haxe_Exception.thrown("copy exceeds output file size");
			}
			if(ofst + cnt > lenSrc) {
				throw haxe_Exception.thrown("copy extends past end of input");
			}
			zOut.putArray(src,ofst,ofst + cnt);
		} else if(char == ":") {
			total += cnt;
			if(total > limit) {
				throw haxe_Exception.thrown("insert command gives an output larger than predicted");
			}
			if(cnt > lenDelta) {
				throw haxe_Exception.thrown("insert count exceeds size of delta");
			}
			zOut.putArray(zDelta.bytes,zDelta.pos,zDelta.pos + cnt);
			zDelta.pos += cnt;
		} else if(char == ";") {
			var out = zOut.toArray();
			if(verifyChecksum && cnt != io_colyseus_serializer_fossil_$delta_FossilDelta.checksum(out)) {
				throw haxe_Exception.thrown("bad checksum");
			}
			if(total != limit) {
				throw haxe_Exception.thrown("generated size does not match predicted size");
			}
			return out;
		} else {
			throw haxe_Exception.thrown("unknown delta operator");
		}
	}
	throw haxe_Exception.thrown("unterminated delta");
};
var io_colyseus_serializer_fossil_$delta_Reader = function(array) {
	this.bytes = array;
	this.pos = 0;
};
$hxClasses["io.colyseus.serializer.fossil_delta.Reader"] = io_colyseus_serializer_fossil_$delta_Reader;
io_colyseus_serializer_fossil_$delta_Reader.__name__ = "io.colyseus.serializer.fossil_delta.Reader";
io_colyseus_serializer_fossil_$delta_Reader.prototype = {
	bytes: null
	,pos: null
	,haveBytes: function() {
		return this.pos < this.bytes.length;
	}
	,getByte: function() {
		var value = this.bytes.b[this.pos];
		this.pos++;
		if(this.pos > this.bytes.length) {
			throw haxe_Exception.thrown("out of bounds");
		}
		return value;
	}
	,getChar: function() {
		var code = this.getByte();
		return String.fromCodePoint(code);
	}
	,getInt: function() {
		var v = 0;
		var c;
		while(this.haveBytes()) {
			c = io_colyseus_serializer_fossil_$delta_FossilDelta.zValue[127 & this.getByte()];
			if(c < 0) {
				break;
			}
			v = (v << 6) + c;
		}
		this.pos--;
		return v >>> 0;
	}
	,__class__: io_colyseus_serializer_fossil_$delta_Reader
};
var io_colyseus_serializer_fossil_$delta_Writer = function() {
	this.a = new haxe_io_BytesBuffer();
};
$hxClasses["io.colyseus.serializer.fossil_delta.Writer"] = io_colyseus_serializer_fossil_$delta_Writer;
io_colyseus_serializer_fossil_$delta_Writer.__name__ = "io.colyseus.serializer.fossil_delta.Writer";
io_colyseus_serializer_fossil_$delta_Writer.prototype = {
	a: null
	,toArray: function() {
		return this.a.getBytes();
	}
	,putByte: function(b) {
		this.a.addByte(b & 255);
	}
	,putChar: function(s) {
		this.putByte(HxOverrides.cca(s,0));
	}
	,putInt: function(v) {
		var i = 0;
		var zBuf = [];
		if(v == 0) {
			this.putChar("0");
			return;
		}
		while(v > 0) {
			zBuf.push(io_colyseus_serializer_fossil_$delta_FossilDelta.zDigits[v & 63]);
			++i;
			v >>>= 6;
		}
		var j = i - 1;
		while(j >= 0) {
			this.putByte(zBuf[j]);
			--j;
		}
	}
	,putArray: function(a,start,end) {
		var i = start;
		while(i < end) {
			this.a.addByte(a.b[i]);
			++i;
		}
	}
	,__class__: io_colyseus_serializer_fossil_$delta_Writer
};
var io_colyseus_serializer_schema_Context = function() {
	this.schemas = [];
	this.typeIds = new haxe_ds_IntMap();
};
$hxClasses["io.colyseus.serializer.schema.Context"] = io_colyseus_serializer_schema_Context;
io_colyseus_serializer_schema_Context.__name__ = "io.colyseus.serializer.schema.Context";
io_colyseus_serializer_schema_Context.prototype = {
	typeIds: null
	,schemas: null
	,add: function(schema,typeid) {
		if(typeid == null) {
			typeid = this.schemas.length;
		}
		this.typeIds.h[typeid] = schema;
		this.schemas.push(schema);
	}
	,get: function(typeid) {
		return this.typeIds.h[typeid];
	}
	,__class__: io_colyseus_serializer_schema_Context
};
var io_colyseus_serializer_schema_types_IRef = function() { };
$hxClasses["io.colyseus.serializer.schema.types.IRef"] = io_colyseus_serializer_schema_types_IRef;
io_colyseus_serializer_schema_types_IRef.__name__ = "io.colyseus.serializer.schema.types.IRef";
io_colyseus_serializer_schema_types_IRef.__isInterface__ = true;
io_colyseus_serializer_schema_types_IRef.prototype = {
	__refId: null
	,setByIndex: null
	,getByIndex: null
	,deleteByIndex: null
	,moveEventHandlers: null
	,__class__: io_colyseus_serializer_schema_types_IRef
};
var io_colyseus_serializer_schema_types_ISchemaCollection = function() { };
$hxClasses["io.colyseus.serializer.schema.types.ISchemaCollection"] = io_colyseus_serializer_schema_types_ISchemaCollection;
io_colyseus_serializer_schema_types_ISchemaCollection.__name__ = "io.colyseus.serializer.schema.types.ISchemaCollection";
io_colyseus_serializer_schema_types_ISchemaCollection.__isInterface__ = true;
io_colyseus_serializer_schema_types_ISchemaCollection.__interfaces__ = [io_colyseus_serializer_schema_types_IRef];
io_colyseus_serializer_schema_types_ISchemaCollection.prototype = {
	_childType: null
	,invokeOnAdd: null
	,invokeOnChange: null
	,invokeOnRemove: null
	,iterator: null
	,keyValueIterator: null
	,setIndex: null
	,getIndex: null
	,setByIndex: null
	,clear: null
	,clone: null
	,__class__: io_colyseus_serializer_schema_types_ISchemaCollection
};
var io_colyseus_serializer_schema_types_ArraySchemaImpl = function() {
	this.indexes = new io_colyseus_serializer_schema_types_OrderedMap(new haxe_ds_IntMap());
	this.items = new haxe_ds_IntMap();
};
$hxClasses["io.colyseus.serializer.schema.types.ArraySchemaImpl"] = io_colyseus_serializer_schema_types_ArraySchemaImpl;
io_colyseus_serializer_schema_types_ArraySchemaImpl.__name__ = "io.colyseus.serializer.schema.types.ArraySchemaImpl";
io_colyseus_serializer_schema_types_ArraySchemaImpl.__interfaces__ = [io_colyseus_serializer_schema_types_ISchemaCollection,io_colyseus_serializer_schema_types_IRef];
io_colyseus_serializer_schema_types_ArraySchemaImpl.prototype = {
	__refId: null
	,_childType: null
	,getIndex: function(fieldIndex) {
		return this.indexes.get(fieldIndex);
	}
	,setIndex: function(fieldIndex,dynamicIndex) {
		this.indexes.set(fieldIndex,dynamicIndex);
	}
	,getByIndex: function(fieldIndex) {
		var targetIndex = -1;
		var i = 0;
		var _g_current = 0;
		var _g_array = this.indexes._keys;
		while(_g_current < _g_array.length) {
			var key = _g_array[_g_current++];
			if(i == fieldIndex) {
				targetIndex = this.indexes.get(key);
				break;
			}
			++i;
		}
		if(targetIndex == -1) {
			return null;
		} else {
			var this1 = this.items;
			var key = this.indexes.get(targetIndex);
			return this1.h[key];
		}
	}
	,setByIndex: function(index,dynamicIndex,value) {
		this.indexes.set(index,dynamicIndex);
		this.items.h[dynamicIndex] = value;
	}
	,deleteByIndex: function(fieldIndex) {
		var index = this.indexes.get(fieldIndex);
		this.items.remove(index);
		this.indexes.remove(fieldIndex);
	}
	,items: null
	,indexes: null
	,length: null
	,get_length: function() {
		return Lambda.count(this.items);
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,invokeOnAdd: function(item,key) {
		this.onAdd(item,key);
	}
	,invokeOnChange: function(item,key) {
		this.onChange(item,key);
	}
	,invokeOnRemove: function(item,key) {
		this.onRemove(item,key);
	}
	,moveEventHandlers: function(previousInstance) {
		this.onAdd = previousInstance.onAdd;
		this.onChange = previousInstance.onChange;
		this.onRemove = previousInstance.onRemove;
	}
	,clear: function(refs) {
		if(typeof(this._childType) != "string") {
			var item = this.items.iterator();
			while(item.hasNext()) {
				var item1 = item.next();
				refs.remove(Reflect.getProperty(item1,"__refId"));
			}
		}
		this.items.h = { };
		this.indexes.clear();
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_types_ArraySchemaImpl();
		cloned.items = this.items.copy();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return this.items.iterator();
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this.items);
	}
	,toString: function() {
		var data = [];
		var item = this.items.iterator();
		while(item.hasNext()) {
			var item1 = item.next();
			data.push("" + Std.string(item1));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { __refId => " + this.__refId + ", " + data.join(", ") + " } ";
	}
	,__class__: io_colyseus_serializer_schema_types_ArraySchemaImpl
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_types_MapSchema = function() {
	this.indexes = new haxe_ds_IntMap();
	this.items = new io_colyseus_serializer_schema_types_OrderedMap(new haxe_ds_StringMap());
	this.__isMapSchema = true;
};
$hxClasses["io.colyseus.serializer.schema.types.MapSchema"] = io_colyseus_serializer_schema_types_MapSchema;
io_colyseus_serializer_schema_types_MapSchema.__name__ = "io.colyseus.serializer.schema.types.MapSchema";
io_colyseus_serializer_schema_types_MapSchema.__interfaces__ = [io_colyseus_serializer_schema_types_ISchemaCollection,io_colyseus_serializer_schema_types_IRef];
io_colyseus_serializer_schema_types_MapSchema.prototype = {
	__refId: null
	,_childType: null
	,__isMapSchema: null
	,getIndex: function(fieldIndex) {
		return this.indexes.h[fieldIndex];
	}
	,setIndex: function(fieldIndex,dynamicIndex) {
		this.indexes.h[fieldIndex] = dynamicIndex;
	}
	,getByIndex: function(fieldIndex) {
		var index = this.indexes.h[fieldIndex];
		if(index != null) {
			return this.items.get(index);
		} else {
			return null;
		}
	}
	,setByIndex: function(index,dynamicIndex,value) {
		this.indexes.h[index] = dynamicIndex;
		this.items.set(dynamicIndex,value);
	}
	,deleteByIndex: function(fieldIndex) {
		var index = this.indexes.h[fieldIndex];
		this.items.remove(index);
		this.indexes.remove(fieldIndex);
	}
	,items: null
	,indexes: null
	,length: null
	,get_length: function() {
		return Lambda.count(this.items._keys);
	}
	,onAdd: function(item,key) {
	}
	,onChange: function(item,key) {
	}
	,onRemove: function(item,key) {
	}
	,invokeOnAdd: function(item,key) {
		this.onAdd(item,key);
	}
	,invokeOnChange: function(item,key) {
		this.onChange(item,key);
	}
	,invokeOnRemove: function(item,key) {
		this.onRemove(item,key);
	}
	,moveEventHandlers: function(previousInstance) {
		this.onAdd = previousInstance.onAdd;
		this.onChange = previousInstance.onChange;
		this.onRemove = previousInstance.onRemove;
	}
	,clear: function(refs) {
		if(typeof(this._childType) != "string") {
			var item = this.items.iterator();
			while(item.hasNext()) {
				var item1 = item.next();
				refs.remove(Reflect.getProperty(item1,"__refId"));
			}
		}
		this.items.clear();
		this.indexes.h = { };
	}
	,clone: function() {
		var cloned = new io_colyseus_serializer_schema_types_MapSchema();
		var _g = 0;
		var _g1 = this.items._keys;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			cloned.items.set(key,this.items.get(key));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	,iterator: function() {
		return this.items.iterator();
	}
	,keyValueIterator: function() {
		return this.items.keyValueIterator();
	}
	,get: function(key) {
		return this.items.get(key);
	}
	,arrayWrite: function(key,value) {
		this.items.set(key,value);
		return value;
	}
	,toString: function() {
		var data = [];
		var _g = 0;
		var _g1 = this.items._keys;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			data.push(key + " => " + Std.string(this.items.get(key)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ", __refId => " + this.__refId + ") { " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_types_MapSchema
	,__properties__: {get_length:"get_length"}
};
var io_colyseus_serializer_schema_CustomType = function() {
	this.customTypes = new haxe_ds_StringMap();
	this.types = [];
	this.set("array",io_colyseus_serializer_schema_types_ArraySchemaImpl);
	this.set("map",io_colyseus_serializer_schema_types_MapSchema);
};
$hxClasses["io.colyseus.serializer.schema.CustomType"] = io_colyseus_serializer_schema_CustomType;
io_colyseus_serializer_schema_CustomType.__name__ = "io.colyseus.serializer.schema.CustomType";
io_colyseus_serializer_schema_CustomType.getInstance = function() {
	return io_colyseus_serializer_schema_CustomType.instance;
};
io_colyseus_serializer_schema_CustomType.prototype = {
	types: null
	,customTypes: null
	,set: function(id,type) {
		if(!Object.prototype.hasOwnProperty.call(this.customTypes.h,id)) {
			this.customTypes.h[id] = type;
			this.types.push(id);
		}
	}
	,get: function(id) {
		return this.customTypes.h[id];
	}
	,getTypes: function() {
		var customTypes = [];
		var h = this.customTypes.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			customTypes.push(key);
		}
		return customTypes;
	}
	,__class__: io_colyseus_serializer_schema_CustomType
};
var io_colyseus_serializer_schema_ReferenceTracker = function() {
	this.deletedRefs = new haxe_ds_IntMap();
	this.refCounts = new haxe_ds_IntMap();
	this.refs = new haxe_ds_IntMap();
	this.context = new io_colyseus_serializer_schema_Context();
};
$hxClasses["io.colyseus.serializer.schema.ReferenceTracker"] = io_colyseus_serializer_schema_ReferenceTracker;
io_colyseus_serializer_schema_ReferenceTracker.__name__ = "io.colyseus.serializer.schema.ReferenceTracker";
io_colyseus_serializer_schema_ReferenceTracker.prototype = {
	context: null
	,refs: null
	,refCounts: null
	,deletedRefs: null
	,add: function(refId,ref,increment) {
		if(increment == null) {
			increment = true;
		}
		this.refs.h[refId] = ref;
		if(increment) {
			var previousCount = this.refCounts.h.hasOwnProperty(refId) ? this.refCounts.h[refId] : 0;
			this.refCounts.h[refId] = previousCount + 1;
		}
	}
	,has: function(refId) {
		return this.refs.h.hasOwnProperty(refId);
	}
	,get: function(refId) {
		return this.refs.h[refId];
	}
	,remove: function(refId) {
		this.refCounts.h[refId] = this.refCounts.h[refId] - 1;
		var addedToDeletedRefs = this.deletedRefs.h[refId] == null;
		if(addedToDeletedRefs) {
			this.deletedRefs.h[refId] = true;
		}
		return addedToDeletedRefs;
	}
	,count: function() {
		return Lambda.count(this.refs);
	}
	,garbageCollection: function() {
		var deletedRefs = [];
		var refId = this.deletedRefs.keys();
		while(refId.hasNext()) {
			var refId1 = refId.next();
			deletedRefs.push(refId1);
		}
		var _g = 0;
		while(_g < deletedRefs.length) {
			var refId = deletedRefs[_g];
			++_g;
			if(this.refCounts.h[refId] <= 0) {
				var ref = this.refs.h[refId];
				if(((ref) instanceof io_colyseus_serializer_schema_Schema)) {
					var childTypes = ref._childTypes;
					var fieldIndex = childTypes.keys();
					while(fieldIndex.hasNext()) {
						var fieldIndex1 = fieldIndex.next();
						var refId1 = Reflect.getProperty(ref.getByIndex(fieldIndex1),"__refId");
						if(refId1 > 0 && this.remove(refId1)) {
							deletedRefs.push(refId1);
						}
					}
				} else if(typeof(ref._childType) != "string") {
					var item = ref.iterator();
					while(item.hasNext()) {
						var item1 = item.next();
						var childRefId = Reflect.getProperty(item1,"__refId");
						if(childRefId > 0 && this.remove(childRefId)) {
							deletedRefs.push(childRefId);
						}
					}
				}
				this.refs.remove(refId);
				this.refCounts.remove(refId);
			}
		}
		this.deletedRefs.h = { };
	}
	,clear: function() {
		this.refs.h = { };
		this.refCounts.h = { };
		this.deletedRefs.h = { };
	}
	,__class__: io_colyseus_serializer_schema_ReferenceTracker
};
var io_colyseus_serializer_schema_Decoder = function() {
};
$hxClasses["io.colyseus.serializer.schema.Decoder"] = io_colyseus_serializer_schema_Decoder;
io_colyseus_serializer_schema_Decoder.__name__ = "io.colyseus.serializer.schema.Decoder";
io_colyseus_serializer_schema_Decoder.prototype = {
	decodePrimitiveType: function(type,bytes,it) {
		switch(type) {
		case "boolean":
			return this.boolean(bytes,it);
		case "float32":
			return this.float32(bytes,it);
		case "float64":
			return this.float64(bytes,it);
		case "int16":
			return this.int16(bytes,it);
		case "int32":
			return this.int32(bytes,it);
		case "int64":
			return this.int64(bytes,it);
		case "int8":
			return this.int8(bytes,it);
		case "number":
			return this.number(bytes,it);
		case "string":
			return this.string(bytes,it);
		case "uint16":
			return this.uint16(bytes,it);
		case "uint32":
			return this.uint32(bytes,it);
		case "uint64":
			return this.uint64(bytes,it);
		case "uint8":
			return this.uint8(bytes,it);
		default:
			throw haxe_Exception.thrown("can't decode: " + type);
		}
	}
	,string: function(bytes,it) {
		var prefix = bytes.b[it.offset++];
		var length = 0;
		if(prefix < 192) {
			length = prefix & 31;
		} else if(prefix == 217) {
			length = this.uint8(bytes,it);
		} else if(prefix == 218) {
			length = this.uint16(bytes,it);
		} else if(prefix == 219) {
			length = this.uint32(bytes,it);
		}
		var value = bytes.getString(it.offset,length);
		it.offset += length;
		return value;
	}
	,number: function(bytes,it) {
		var prefix = bytes.b[it.offset++];
		if(prefix < 128) {
			return prefix;
		} else if(prefix == 202) {
			return this.float32(bytes,it);
		} else if(prefix == 203) {
			return this.float64(bytes,it);
		} else if(prefix == 204) {
			return this.uint8(bytes,it);
		} else if(prefix == 205) {
			return this.uint16(bytes,it);
		} else if(prefix == 206) {
			return this.uint32(bytes,it);
		} else if(prefix == 207) {
			return this.uint64(bytes,it);
		} else if(prefix == 208) {
			return this.int8(bytes,it);
		} else if(prefix == 209) {
			return this.int16(bytes,it);
		} else if(prefix == 210) {
			return this.int32(bytes,it);
		} else if(prefix == 211) {
			return this.int64(bytes,it);
		} else if(prefix > 223) {
			return (255 - prefix + 1) * -1;
		}
		return 0;
	}
	,boolean: function(bytes,it) {
		return UInt.gt(this.uint8(bytes,it),0);
	}
	,int8: function(bytes,it) {
		return this.uint8(bytes,it) << 24 >> 24;
	}
	,uint8: function(bytes,it) {
		return bytes.b[it.offset++];
	}
	,int16: function(bytes,it) {
		return this.uint16(bytes,it) << 16 >> 16;
	}
	,uint16: function(bytes,it) {
		return bytes.b[it.offset++] | bytes.b[it.offset++] << 8;
	}
	,int32: function(bytes,it) {
		var value = bytes.getInt32(it.offset);
		it.offset += 4;
		return value;
	}
	,uint32: function(bytes,it) {
		return this.int32(bytes,it);
	}
	,int64: function(bytes,it) {
		var value = bytes.getInt64(it.offset);
		it.offset += 8;
		return value;
	}
	,uint64: function(bytes,it) {
		var low = this.uint32(bytes,it);
		var a = this.uint32(bytes,it);
		var b = Math.pow(2,32);
		var high = UInt.toFloat(a) * b;
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,float32: function(bytes,it) {
		var value = bytes.getFloat(it.offset);
		it.offset += 4;
		return value;
	}
	,float64: function(bytes,it) {
		var value = bytes.getDouble(it.offset);
		it.offset += 8;
		return value;
	}
	,__class__: io_colyseus_serializer_schema_Decoder
};
var io_colyseus_serializer_schema_Schema = function() {
	this._refs = null;
	this._childTypes = new haxe_ds_IntMap();
	this._types = new haxe_ds_IntMap();
	this._indexes = new haxe_ds_IntMap();
	this.__refId = 0;
};
$hxClasses["io.colyseus.serializer.schema.Schema"] = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_Schema.__name__ = "io.colyseus.serializer.schema.Schema";
io_colyseus_serializer_schema_Schema.__interfaces__ = [io_colyseus_serializer_schema_types_IRef];
io_colyseus_serializer_schema_Schema.prototype = {
	onChange: function(changes) {
	}
	,onRemove: function() {
	}
	,__refId: null
	,_indexes: null
	,_types: null
	,_childTypes: null
	,_refs: null
	,setByIndex: function(fieldIndex,dynamicIndex,value) {
		this[this._indexes.h[fieldIndex]] = value;
	}
	,getByIndex: function(fieldIndex) {
		return Reflect.getProperty(this,this._indexes.h[fieldIndex]);
	}
	,deleteByIndex: function(fieldIndex) {
		this[this._indexes.h[fieldIndex]] = null;
	}
	,setIndex: function(fieldIndex,dynamicIndex) {
	}
	,getIndex: function(fieldIndex,dynamicIndex) {
	}
	,moveEventHandlers: function(previousInstance) {
		var previousSchemaInstance = previousInstance;
		this.onChange = $bind(previousSchemaInstance,previousSchemaInstance.onChange);
		this.onRemove = $bind(previousSchemaInstance,previousSchemaInstance.onRemove);
		var map = this._childTypes;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var fieldIndex = _g1_key;
			var _ = _g1_value;
			var childType = this.getByIndex(fieldIndex);
			if(js_Boot.__implements(childType,io_colyseus_serializer_schema_types_IRef)) {
				childType.moveEventHandlers(previousSchemaInstance.getByIndex(fieldIndex));
			}
		}
	}
	,decode: function(bytes,it,refs) {
		if(it == null) {
			it = { offset : 0};
		}
		if(refs == null) {
			refs = this._refs != null ? this._refs : new io_colyseus_serializer_schema_ReferenceTracker();
		}
		this._refs = refs;
		var refId = 0;
		var ref = this;
		refs.add(refId,ref);
		var changes = [];
		var allChanges = new io_colyseus_serializer_schema_types_OrderedMap(new haxe_ds_IntMap());
		allChanges.set(refId,changes);
		var totalBytes = bytes.length;
		while(it.offset < totalBytes) {
			var byte = bytes.b[it.offset++];
			if(byte == io_colyseus_serializer_schema_SPEC.SWITCH_TO_STRUCTURE) {
				refId = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
				ref = refs.get(refId);
				if(ref == null) {
					throw haxe_Exception.thrown("refId not found: " + refId);
				}
				changes = [];
				allChanges.set(refId,changes);
				continue;
			}
			var isSchema = ((ref) instanceof io_colyseus_serializer_schema_Schema);
			var operation = isSchema ? byte >> 6 << 6 : byte;
			if(operation == 10) {
				ref.clear(refs);
				continue;
			}
			var fieldIndex = isSchema ? byte % (operation == 0 ? 255 : operation) : io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
			var fieldName = isSchema ? ref._indexes.h[fieldIndex] : "";
			var fieldType = null;
			var childType = null;
			if(isSchema) {
				childType = ref._childTypes.h[fieldIndex];
				fieldType = ref._types.h[fieldIndex];
			} else {
				var collectionChildType = ref._childType;
				var isPrimitiveFieldType = typeof(collectionChildType) == "string";
				fieldType = isPrimitiveFieldType ? collectionChildType : "ref";
				if(!isPrimitiveFieldType) {
					childType = collectionChildType;
				}
			}
			var value = null;
			var previousValue = null;
			var dynamicIndex = null;
			if(!isSchema) {
				previousValue = ref.getByIndex(fieldIndex);
				if((operation & 128) == 128) {
					dynamicIndex = Reflect.getProperty(ref,"__isMapSchema") == true ? io_colyseus_serializer_schema_Schema.decoder.string(bytes,it) : fieldIndex;
					ref.setIndex(fieldIndex,dynamicIndex);
				} else {
					dynamicIndex = ref.getIndex(fieldIndex);
				}
			} else if(fieldName != null) {
				previousValue = Reflect.getProperty(ref,fieldName);
			}
			if((operation & 64) == 64) {
				if(operation != 192) {
					ref.deleteByIndex(fieldIndex);
				}
				if(js_Boot.__implements(previousValue,io_colyseus_serializer_schema_types_IRef) && previousValue.__refId > 0) {
					refs.remove(previousValue.__refId);
				}
				value = null;
			}
			if(fieldName == null) {
				haxe_Log.trace("WARNING: @colyseus/schema definition mismatch?",{ fileName : "src/io/colyseus/serializer/schema/Schema.hx", lineNumber : 514, className : "io.colyseus.serializer.schema.Schema", methodName : "decode"});
				var nextIterator = { offset : it.offset};
				while(it.offset < totalBytes) {
					if(io_colyseus_serializer_schema_SPEC.switchToStructureCheck(bytes,it)) {
						nextIterator.offset = it.offset + 1;
						if(refs.has(io_colyseus_serializer_schema_Schema.decoder.number(bytes,nextIterator))) {
							break;
						}
					}
					it.offset++;
				}
				continue;
			} else if(operation != 64) {
				if(fieldType == "ref") {
					refId = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
					value = refs.get(refId);
					if(operation != 0) {
						var concreteChildType = this.getSchemaType(bytes,it,childType);
						if(value == null) {
							value = Type.createInstance(concreteChildType,[]);
							value.__refId = refId;
							if(previousValue != null) {
								value.moveEventHandlers(previousValue);
								if(previousValue.__refId > 0 && refId != previousValue.__refId) {
									refs.remove(previousValue.__refId);
								}
							}
						}
						refs.add(refId,value,value != previousValue);
					}
				} else if(childType == null) {
					value = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(fieldType,bytes,it);
				} else {
					refId = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
					value = refs.get(refId);
					var collectionClass = fieldType == null ? js_Boot.getClass(ref) : io_colyseus_serializer_schema_CustomType.getInstance().get(fieldType);
					var valueRef = refs.has(refId) ? previousValue : Type.createInstance(collectionClass,[]);
					value = valueRef.clone();
					value.__refId = refId;
					value._childType = childType;
					if(previousValue != null) {
						value.moveEventHandlers(previousValue);
						if(previousValue.__refId > 0 && refId != previousValue.__refId) {
							refs.remove(previousValue.__refId);
							var deletes = [];
							var i = 0;
							var _g = [];
							var x = $getIterator(previousValue.items);
							while(x.hasNext()) {
								var x1 = x.next();
								var index = i++;
								_g.push(deletes.push({ op : 64, field : index, dynamicIndex : index, value : null, previousValue : x1}));
							}
							allChanges.set(previousValue.__refId,deletes);
						}
					}
					refs.add(refId,value,valueRef != previousValue);
				}
			}
			var hasChange = previousValue != value;
			if(value != null) {
				ref.setByIndex(fieldIndex,dynamicIndex,value);
			}
			if(hasChange) {
				changes.push({ op : operation, field : fieldName, dynamicIndex : dynamicIndex, value : value, previousValue : previousValue});
			}
		}
		this.triggerChanges(allChanges);
		refs.garbageCollection();
	}
	,triggerChanges: function(allChanges) {
		var refs = this._refs;
		var it = allChanges.keyValueIterator();
		while(it.hasNext()) {
			var it1 = it.next();
			var changes = it1.value;
			if(changes.length == 0) {
				continue;
			}
			var refId = it1.key;
			var ref = refs.get(refId);
			var isSchema = ((ref) instanceof io_colyseus_serializer_schema_Schema);
			var _g = 0;
			while(_g < changes.length) {
				var change = changes[_g];
				++_g;
				if(!isSchema) {
					var container = ref;
					if(change.op == 128 && change.previousValue == null) {
						container.invokeOnAdd(change.value,change.dynamicIndex == null ? change.field : change.dynamicIndex);
					} else if(change.op == 64) {
						if(change.previousValue != null) {
							container.invokeOnRemove(change.previousValue,change.dynamicIndex == null ? change.field : change.dynamicIndex);
						}
					} else if(change.op == 192) {
						if(change.previousValue != null) {
							container.invokeOnRemove(change.previousValue,change.dynamicIndex);
						}
						container.invokeOnAdd(change.value,change.dynamicIndex);
					} else if(change.op == 0 || change.value != change.previousValue) {
						container.invokeOnChange(change.value,change.dynamicIndex);
					}
				}
				if((change.op & 64) == 64 && ((change.previousValue) instanceof io_colyseus_serializer_schema_Schema)) {
					change.previousValue.onRemove();
				}
			}
			if(isSchema) {
				ref.onChange(changes);
			}
		}
	}
	,triggerAllFillChanges: function(ref,allChanges) {
		if(allChanges.exists(ref.__refId)) {
			return;
		}
		var changes = [];
		allChanges.set(ref.__refId,changes);
		if(((ref) instanceof io_colyseus_serializer_schema_Schema)) {
			var _indexes = Reflect.getProperty(ref,"_indexes");
			var map = _indexes;
			var fieldIndex_map = map;
			var fieldIndex_keys = map.keys();
			while(fieldIndex_keys.hasNext()) {
				var key = fieldIndex_keys.next();
				var fieldIndex_value = fieldIndex_map.get(key);
				var fieldIndex_key = key;
				var value = ref.getByIndex(fieldIndex_key);
				changes.push({ field : fieldIndex_value, op : 128, value : value});
				if(js_Boot.__implements(value,io_colyseus_serializer_schema_types_IRef)) {
					this.triggerAllFillChanges(value,allChanges);
				}
			}
		} else {
			var items = Reflect.getProperty(ref,"items");
			var item = items.keyValueIterator();
			while(item.hasNext()) {
				var item1 = item.next();
				changes.push({ field : item1.key, dynamicIndex : item1.key, op : 128, value : item1.value});
				if(js_Boot.__implements(item1,io_colyseus_serializer_schema_types_IRef)) {
					this.triggerAllFillChanges(item1.value,allChanges);
				}
			}
		}
	}
	,triggerAll: function() {
		if(this._refs == null) {
			return;
		}
		var allChanges = new io_colyseus_serializer_schema_types_OrderedMap(new haxe_ds_IntMap());
		this.triggerAllFillChanges(this,allChanges);
		this.triggerChanges(allChanges);
	}
	,getSchemaType: function(bytes,it,defaultType) {
		var type = defaultType;
		if(bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.TYPE_ID) {
			it.offset++;
			type = this._refs.context.get(io_colyseus_serializer_schema_Schema.decoder.number(bytes,it));
		}
		return type;
	}
	,toString: function() {
		var data = [];
		var field = this._indexes.iterator();
		while(field.hasNext()) {
			var field1 = field.next();
			data.push(field1 + " => " + Std.string(Reflect.getProperty(this,field1)));
		}
		return "{ __refId => " + this.__refId + ", " + data.join(", ") + " }";
	}
	,__class__: io_colyseus_serializer_schema_Schema
};
var io_colyseus_serializer_schema_ReflectionField = function() {
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "name";
	this._types.h[0] = "string";
	this._indexes.h[1] = "type";
	this._types.h[1] = "string";
	this._indexes.h[2] = "referencedType";
	this._types.h[2] = "number";
};
$hxClasses["io.colyseus.serializer.schema.ReflectionField"] = io_colyseus_serializer_schema_ReflectionField;
io_colyseus_serializer_schema_ReflectionField.__name__ = "io.colyseus.serializer.schema.ReflectionField";
io_colyseus_serializer_schema_ReflectionField.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_ReflectionField.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	name: null
	,type: null
	,referencedType: null
	,__class__: io_colyseus_serializer_schema_ReflectionField
});
var io_colyseus_serializer_schema_ReflectionType = function() {
	this.fields = io_colyseus_serializer_schema_types_ArraySchema._new();
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "id";
	this._types.h[0] = "number";
	this._indexes.h[1] = "fields";
	this._types.h[1] = "array";
	this._childTypes.h[1] = io_colyseus_serializer_schema_ReflectionField;
};
$hxClasses["io.colyseus.serializer.schema.ReflectionType"] = io_colyseus_serializer_schema_ReflectionType;
io_colyseus_serializer_schema_ReflectionType.__name__ = "io.colyseus.serializer.schema.ReflectionType";
io_colyseus_serializer_schema_ReflectionType.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_ReflectionType.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	id: null
	,fields: null
	,__class__: io_colyseus_serializer_schema_ReflectionType
});
var io_colyseus_serializer_schema_Reflection = function() {
	this.types = io_colyseus_serializer_schema_types_ArraySchema._new();
	io_colyseus_serializer_schema_Schema.call(this);
	this._indexes.h[0] = "types";
	this._types.h[0] = "array";
	this._childTypes.h[0] = io_colyseus_serializer_schema_ReflectionType;
	this._indexes.h[1] = "rootType";
	this._types.h[1] = "number";
};
$hxClasses["io.colyseus.serializer.schema.Reflection"] = io_colyseus_serializer_schema_Reflection;
io_colyseus_serializer_schema_Reflection.__name__ = "io.colyseus.serializer.schema.Reflection";
io_colyseus_serializer_schema_Reflection.__super__ = io_colyseus_serializer_schema_Schema;
io_colyseus_serializer_schema_Reflection.prototype = $extend(io_colyseus_serializer_schema_Schema.prototype,{
	types: null
	,rootType: null
	,__class__: io_colyseus_serializer_schema_Reflection
});
var io_colyseus_serializer_schema_Decorator = function() { };
$hxClasses["io.colyseus.serializer.schema.Decorator"] = io_colyseus_serializer_schema_Decorator;
io_colyseus_serializer_schema_Decorator.__name__ = "io.colyseus.serializer.schema.Decorator";
var io_colyseus_serializer_schema_SPEC = function() { };
$hxClasses["io.colyseus.serializer.schema.SPEC"] = io_colyseus_serializer_schema_SPEC;
io_colyseus_serializer_schema_SPEC.__name__ = "io.colyseus.serializer.schema.SPEC";
io_colyseus_serializer_schema_SPEC.numberCheck = function(bytes,it) {
	var prefix = bytes.b[it.offset];
	if(prefix >= 128) {
		if(prefix >= 202) {
			return prefix <= 211;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
io_colyseus_serializer_schema_SPEC.arrayCheck = function(bytes,it) {
	return bytes.b[it.offset] < 160;
};
io_colyseus_serializer_schema_SPEC.switchToStructureCheck = function(bytes,it) {
	return bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.SWITCH_TO_STRUCTURE;
};
io_colyseus_serializer_schema_SPEC.stringCheck = function(bytes,it) {
	var prefix = bytes.get(it.offset);
	if(!(prefix < 192 && prefix > 160 || prefix == 217 || prefix == 218)) {
		return prefix == 219;
	} else {
		return true;
	}
};
var io_colyseus_serializer_schema_types_ArraySchema = {};
io_colyseus_serializer_schema_types_ArraySchema._new = function() {
	var this1 = new io_colyseus_serializer_schema_types_ArraySchemaImpl();
	return this1;
};
io_colyseus_serializer_schema_types_ArraySchema.arrayGet = function(this1,_key) {
	return this1.getByIndex(_key);
};
io_colyseus_serializer_schema_types_ArraySchema.arraySet = function(this1,_key,_value) {
	this1.items.h[_key] = _value;
	return _value;
};
var io_colyseus_serializer_schema_types_OrderedMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["io.colyseus.serializer.schema.types.OrderedMapIterator"] = io_colyseus_serializer_schema_types_OrderedMapIterator;
io_colyseus_serializer_schema_types_OrderedMapIterator.__name__ = "io.colyseus.serializer.schema.types.OrderedMapIterator";
io_colyseus_serializer_schema_types_OrderedMapIterator.prototype = {
	map: null
	,index: null
	,hasNext: function() {
		return this.index < this.map._keys.length;
	}
	,next: function() {
		return this.map.get(this.map._keys[this.index++]);
	}
	,__class__: io_colyseus_serializer_schema_types_OrderedMapIterator
};
var io_colyseus_serializer_schema_types_OrderedMap = function(_map) {
	this.idx = 0;
	this._keys = [];
	this.map = _map;
};
$hxClasses["io.colyseus.serializer.schema.types.OrderedMap"] = io_colyseus_serializer_schema_types_OrderedMap;
io_colyseus_serializer_schema_types_OrderedMap.__name__ = "io.colyseus.serializer.schema.types.OrderedMap";
io_colyseus_serializer_schema_types_OrderedMap.prototype = {
	map: null
	,_keys: null
	,idx: null
	,set: function(key,value) {
		if(!this.map.exists(key)) {
			this._keys.push(key);
		}
		this.map.set(key,value);
	}
	,toString: function() {
		var _ret = "";
		var _cnt = 0;
		var _len = this._keys.length;
		var _g = 0;
		var _g1 = this._keys;
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			_ret += "" + Std.string(k) + " => " + Std.string(this.map.get(k)) + (_cnt++ < _len - 1 ? ", " : "");
		}
		return "{" + _ret + "}";
	}
	,clear: function() {
		this.map.clear();
		this._keys = [];
	}
	,iterator: function() {
		return new io_colyseus_serializer_schema_types_OrderedMapIterator(this);
	}
	,keyValueIterator: function() {
		return this.map.keyValueIterator();
	}
	,remove: function(key) {
		if(this.map.remove(key)) {
			return HxOverrides.remove(this._keys,key);
		} else {
			return false;
		}
	}
	,exists: function(key) {
		return this.map.exists(key);
	}
	,get: function(key) {
		return this.map.get(key);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this._keys);
	}
	,__class__: io_colyseus_serializer_schema_types_OrderedMap
};
var io_colyseus_state_$listener_Compare = function() { };
$hxClasses["io.colyseus.state_listener.Compare"] = io_colyseus_state_$listener_Compare;
io_colyseus_state_$listener_Compare.__name__ = "io.colyseus.state_listener.Compare";
io_colyseus_state_$listener_Compare.getPatchList = function(tree1,tree2) {
	var patches = [];
	io_colyseus_state_$listener_Compare.generate(tree1,tree2,patches,[]);
	return patches;
};
io_colyseus_state_$listener_Compare.concat = function(arr,value) {
	var newArr = arr.slice();
	newArr.push("" + value);
	return newArr;
};
io_colyseus_state_$listener_Compare.objectKeys = function(obj) {
	if(((obj) instanceof Array)) {
		var keys = [];
		var length = (js_Boot.__cast(obj , Array)).length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			keys.push(i);
		}
		return keys;
	}
	if(js_Boot.__implements(obj,haxe_IMap)) {
		return obj.keys();
	}
	return Reflect.fields(obj);
};
io_colyseus_state_$listener_Compare.generate = function(mirror,obj,patches,path) {
	var newKeys = io_colyseus_state_$listener_Compare.objectKeys(obj);
	var oldKeys = io_colyseus_state_$listener_Compare.objectKeys(mirror);
	var deleted = false;
	var _g = 0;
	var _g1 = oldKeys.length;
	while(_g < _g1) {
		var t = _g++;
		var key = oldKeys[t];
		var oldVal = io_colyseus_state_$listener_Compare.getField(mirror,key);
		var newVal = io_colyseus_state_$listener_Compare.getField(obj,key);
		if(oldVal == newVal) {
			continue;
		}
		if(newVal != null && !(newVal == null && oldVal != null && !((obj) instanceof Array))) {
			if(oldVal != null && newVal != null && !io_colyseus_state_$listener_Compare.isBasicType(oldVal) && !io_colyseus_state_$listener_Compare.isBasicType(newVal) && (((obj) instanceof Array) && ((mirror) instanceof Array) || Reflect.isObject(obj) && Reflect.isObject(mirror))) {
				io_colyseus_state_$listener_Compare.generate(oldVal,newVal,patches,io_colyseus_state_$listener_Compare.concat(path,key));
			} else if(oldVal != newVal) {
				patches.push({ operation : "replace", path : io_colyseus_state_$listener_Compare.concat(path,key), value : newVal});
			}
		} else {
			patches.push({ operation : "remove", path : io_colyseus_state_$listener_Compare.concat(path,key)});
			deleted = true;
		}
	}
	if(!deleted && newKeys.length == oldKeys.length) {
		return;
	}
	var t = newKeys.length;
	while(--t >= 0) {
		var key = newKeys[t];
		if(!io_colyseus_state_$listener_Compare.hasField(mirror,key) && io_colyseus_state_$listener_Compare.hasField(obj,key)) {
			var newVal = io_colyseus_state_$listener_Compare.getField(obj,key);
			var addPath = io_colyseus_state_$listener_Compare.concat(path,key);
			if(!io_colyseus_state_$listener_Compare.isBasicType(newVal) && Reflect.isObject(newVal) && newVal != null) {
				io_colyseus_state_$listener_Compare.generate({ },newVal,patches,addPath);
			}
			patches.push({ operation : "add", path : addPath, value : newVal});
		}
	}
};
io_colyseus_state_$listener_Compare.isBasicType = function(value) {
	if(!(typeof(value) == "string" || typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number")) {
		return typeof(value) == "boolean";
	} else {
		return true;
	}
};
io_colyseus_state_$listener_Compare.getField = function(obj,field) {
	if(((obj) instanceof Array)) {
		return obj[field];
	} else {
		return Reflect.field(obj,field);
	}
};
io_colyseus_state_$listener_Compare.hasField = function(obj,field) {
	if(((obj) instanceof Array)) {
		return obj[field] != null;
	} else if(Std.string(obj) == "{}") {
		return false;
	} else {
		return Object.prototype.hasOwnProperty.call(obj,field);
	}
};
var io_colyseus_state_$listener_StateContainer = function(state) {
	var _g = new haxe_ds_StringMap();
	var value = new EReg("^([a-zA-Z0-9\\-_]+)$","");
	_g.h[":id"] = value;
	var value = new EReg("^([0-9]+)$","");
	_g.h[":number"] = value;
	var value = new EReg("^(\\w+)$","");
	_g.h[":string"] = value;
	var value = new EReg("^([xyz])$","");
	_g.h[":axis"] = value;
	var value = new EReg("^(.+)$","");
	_g.h[":*"] = value;
	this.matcherPlaceholders = _g;
	this.listeners = [];
	this.state = state;
	this.reset();
};
$hxClasses["io.colyseus.state_listener.StateContainer"] = io_colyseus_state_$listener_StateContainer;
io_colyseus_state_$listener_StateContainer.__name__ = "io.colyseus.state_listener.StateContainer";
io_colyseus_state_$listener_StateContainer.prototype = {
	state: null
	,listeners: null
	,defaultListener: null
	,matcherPlaceholders: null
	,set: function(newState) {
		var patches = io_colyseus_state_$listener_Compare.getPatchList(this.state,newState);
		this.checkPatches(patches,this.listeners,this.defaultListener);
		this.state = newState;
		return patches;
	}
	,registerPlaceholder: function(placeholder,matcher) {
		this.matcherPlaceholders.h[placeholder] = matcher;
	}
	,listen: function(segments,callback,immediate) {
		var _gthis = this;
		var rawRules;
		if(Reflect.isFunction(segments)) {
			rawRules = [];
			callback = segments;
		} else {
			rawRules = segments.split("/");
		}
		var result = new Array(rawRules.length);
		var _g = 0;
		var _g1 = rawRules.length;
		while(_g < _g1) {
			var i = _g++;
			var segment = rawRules[i];
			var listener;
			if(typeof(segment) == "string") {
				if(segment.indexOf(":") == 0) {
					var matcher = _gthis.matcherPlaceholders.h[segment];
					if(matcher == null) {
						matcher = _gthis.matcherPlaceholders.h[":*"];
					}
					listener = matcher;
				} else {
					listener = new EReg("^" + segment + "$","m");
				}
			} else {
				listener = js_Boot.__cast(segment , EReg);
			}
			result[i] = listener;
		}
		var listener = { callback : callback, rawRules : rawRules, rules : result};
		if(rawRules.length == 0) {
			this.defaultListener = listener;
		} else {
			this.listeners.push(listener);
		}
		if(immediate) {
			this.checkPatches(io_colyseus_state_$listener_Compare.getPatchList({ },this.state),[listener]);
		}
		return listener;
	}
	,removeListener: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(this.listeners[i] == listener) {
			this.listeners.splice(i,1);
		}
	}
	,removeAllListeners: function() {
		this.reset();
	}
	,checkPatches: function(patches,listeners,defaultListener) {
		var i = patches.length;
		while(--i >= 0) {
			var matched = false;
			var _g = 0;
			while(_g < listeners.length) {
				var listener = listeners[_g];
				++_g;
				if(listener == null) {
					continue;
				}
				var pathVariables = this.getPathVariables(patches[i],listener);
				if(pathVariables != null) {
					listener.callback({ path : pathVariables, rawPath : patches[i].path, operation : patches[i].operation, value : patches[i].value});
					matched = true;
				}
			}
			if(!matched && defaultListener != null) {
				this.defaultListener.callback({ path : patches[i].path, operation : patches[i].operation, value : patches[i].value});
			}
		}
	}
	,getPathVariables: function(patch,listener) {
		if(patch.path.length != listener.rules.length) {
			return null;
		}
		var i = 0;
		var path = { };
		var _g = 0;
		var _g1 = listener.rules;
		while(_g < _g1.length) {
			var rule = _g1[_g];
			++_g;
			var matches = this.getMatches(rule,patch.path[i]);
			if(matches.length == 0 || matches.length > 2) {
				return null;
			} else if(HxOverrides.substr(listener.rawRules[i],0,1) == ":") {
				Reflect.setProperty(path,HxOverrides.substr(listener.rawRules[i],1,null),matches[0]);
			}
			++i;
		}
		return path;
	}
	,getMatches: function(ereg,input,index) {
		if(index == null) {
			index = 0;
		}
		var matches = [];
		while(ereg.match(input)) {
			matches.push(ereg.matched(index));
			input = ereg.matchedRight();
		}
		return matches;
	}
	,reset: function() {
		this.listeners = [];
	}
	,__class__: io_colyseus_state_$listener_StateContainer
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_supported:"get_supported"};
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = ["Arrows","Border","Buttons","Particles","candy","pixel"];
	this.pixelSize = 37680;
	this.pixelDescription = { name : "pixel", original_height : 1024, file_sizes : [37680], original_width : 1024, files : ["pixel.png"], type : "image"};
	this.pixelName = "pixel";
	this.pixel = null;
	this.candySize = 87171;
	this.candyDescription = { name : "candy", original_height : 1024, file_sizes : [87171], original_width : 1024, files : ["candy.png"], type : "image"};
	this.candyName = "candy";
	this.candy = null;
	this.ParticlesSize = 9253;
	this.ParticlesDescription = { name : "Particles", original_height : 1024, file_sizes : [9253], original_width : 1024, files : ["Particles.png"], type : "image"};
	this.ParticlesName = "Particles";
	this.Particles = null;
	this.ButtonsSize = 15208;
	this.ButtonsDescription = { name : "Buttons", original_height : 832, file_sizes : [15208], original_width : 704, files : ["Buttons.png"], type : "image"};
	this.ButtonsName = "Buttons";
	this.Buttons = null;
	this.BorderSize = 3242;
	this.BorderDescription = { name : "Border", original_height : 792, file_sizes : [3242], original_width : 408, files : ["Border.png"], type : "image"};
	this.BorderName = "Border";
	this.Border = null;
	this.ArrowsSize = 387;
	this.ArrowsDescription = { name : "Arrows", original_height : 64, file_sizes : [387], original_width : 128, files : ["Arrows.png"], type : "image"};
	this.ArrowsName = "Arrows";
	this.Arrows = null;
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,Arrows: null
	,ArrowsName: null
	,ArrowsDescription: null
	,ArrowsSize: null
	,ArrowsLoad: function(done,failure) {
		kha_Assets.loadImage("Arrows",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "ArrowsLoad"});
	}
	,ArrowsUnload: function() {
		this.Arrows.unload();
		this.Arrows = null;
	}
	,Border: null
	,BorderName: null
	,BorderDescription: null
	,BorderSize: null
	,BorderLoad: function(done,failure) {
		kha_Assets.loadImage("Border",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "BorderLoad"});
	}
	,BorderUnload: function() {
		this.Border.unload();
		this.Border = null;
	}
	,Buttons: null
	,ButtonsName: null
	,ButtonsDescription: null
	,ButtonsSize: null
	,ButtonsLoad: function(done,failure) {
		kha_Assets.loadImage("Buttons",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "ButtonsLoad"});
	}
	,ButtonsUnload: function() {
		this.Buttons.unload();
		this.Buttons = null;
	}
	,Particles: null
	,ParticlesName: null
	,ParticlesDescription: null
	,ParticlesSize: null
	,ParticlesLoad: function(done,failure) {
		kha_Assets.loadImage("Particles",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "ParticlesLoad"});
	}
	,ParticlesUnload: function() {
		this.Particles.unload();
		this.Particles = null;
	}
	,candy: null
	,candyName: null
	,candyDescription: null
	,candySize: null
	,candyLoad: function(done,failure) {
		kha_Assets.loadImage("candy",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "candyLoad"});
	}
	,candyUnload: function() {
		this.candy.unload();
		this.candy = null;
	}
	,pixel: null
	,pixelName: null
	,pixelDescription: null
	,pixelSize: null
	,pixelLoad: function(done,failure) {
		kha_Assets.loadImage("pixel",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 143, className : "kha._Assets.ImageList", methodName : "pixelLoad"});
	}
	,pixelUnload: function() {
		this.pixel.unload();
		this.pixel = null;
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = ["index_html"];
	this.index_htmlSize = 660;
	this.index_htmlDescription = { name : "index_html", file_sizes : [660], files : ["index.html"], type : "blob"};
	this.index_htmlName = "index_html";
	this.index_html = null;
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,index_html: null
	,index_htmlName: null
	,index_htmlDescription: null
	,index_htmlSize: null
	,index_htmlLoad: function(done,failure) {
		kha_Assets.loadBlob("index_html",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 151, className : "kha._Assets.BlobList", methodName : "index_htmlLoad"});
	}
	,index_htmlUnload: function() {
		this.index_html.unload();
		this.index_html = null;
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = ["DigitalDisco","Pixellari","ka1","superstar_memesbruh03"];
	this.superstar_memesbruh03Size = 86196;
	this.superstar_memesbruh03Description = { name : "superstar_memesbruh03", file_sizes : [86196], files : ["superstar_memesbruh03.ttf"], type : "font"};
	this.superstar_memesbruh03Name = "superstar_memesbruh03";
	this.superstar_memesbruh03 = null;
	this.ka1Size = 56908;
	this.ka1Description = { name : "ka1", file_sizes : [56908], files : ["ka1.ttf"], type : "font"};
	this.ka1Name = "ka1";
	this.ka1 = null;
	this.PixellariSize = 39908;
	this.PixellariDescription = { name : "Pixellari", file_sizes : [39908], files : ["Pixellari.ttf"], type : "font"};
	this.PixellariName = "Pixellari";
	this.Pixellari = null;
	this.DigitalDiscoSize = 44088;
	this.DigitalDiscoDescription = { name : "DigitalDisco", file_sizes : [44088], files : ["DigitalDisco.ttf"], type : "font"};
	this.DigitalDiscoName = "DigitalDisco";
	this.DigitalDisco = null;
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,DigitalDisco: null
	,DigitalDiscoName: null
	,DigitalDiscoDescription: null
	,DigitalDiscoSize: null
	,DigitalDiscoLoad: function(done,failure) {
		kha_Assets.loadFont("DigitalDisco",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 155, className : "kha._Assets.FontList", methodName : "DigitalDiscoLoad"});
	}
	,DigitalDiscoUnload: function() {
		this.DigitalDisco.unload();
		this.DigitalDisco = null;
	}
	,Pixellari: null
	,PixellariName: null
	,PixellariDescription: null
	,PixellariSize: null
	,PixellariLoad: function(done,failure) {
		kha_Assets.loadFont("Pixellari",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 155, className : "kha._Assets.FontList", methodName : "PixellariLoad"});
	}
	,PixellariUnload: function() {
		this.Pixellari.unload();
		this.Pixellari = null;
	}
	,ka1: null
	,ka1Name: null
	,ka1Description: null
	,ka1Size: null
	,ka1Load: function(done,failure) {
		kha_Assets.loadFont("ka1",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 155, className : "kha._Assets.FontList", methodName : "ka1Load"});
	}
	,ka1Unload: function() {
		this.ka1.unload();
		this.ka1 = null;
	}
	,superstar_memesbruh03: null
	,superstar_memesbruh03Name: null
	,superstar_memesbruh03Description: null
	,superstar_memesbruh03Size: null
	,superstar_memesbruh03Load: function(done,failure) {
		kha_Assets.loadFont("superstar_memesbruh03",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 155, className : "kha._Assets.FontList", methodName : "superstar_memesbruh03Load"});
	}
	,superstar_memesbruh03Unload: function() {
		this.superstar_memesbruh03.unload();
		this.superstar_memesbruh03 = null;
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var byteCount = 0;
	var _g = 0;
	var _g1 = lists.length;
	while(_g < _g1) {
		var i = _g++;
		var list = lists[i];
		var _g2 = 0;
		var _g3 = Type.getInstanceFields(list);
		while(_g2 < _g3.length) {
			var file = _g3[_g2];
			++_g2;
			if(StringTools.endsWith(file,"Description")) {
				++fileCount;
			} else if(StringTools.endsWith(file,"Size")) {
				var size = Reflect.field(listInstances[i],file);
				byteCount += size;
			}
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var bytesLeft = byteCount;
	var onLoaded = function(bytes) {
		filesLeft -= 1;
		bytesLeft -= bytes;
		kha_Assets.progress = 1 - bytesLeft / byteCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err,bytes) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 116, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded(bytes);
	};
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		var size = desc.file_sizes[0];
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 142, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 146, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 125, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(function() {
						done(size);
					});
				} else {
					done(size);
				}
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 129, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 150, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var _g = 0;
	var _g1 = lists.length;
	while(_g < _g1) {
		var i = _g++;
		var list = lists[i];
		var listInstance = listInstances[i];
		var _g2 = 0;
		var _g3 = Type.getInstanceFields(list);
		while(_g2 < _g3.length) {
			var field = _g3[_g2];
			++_g2;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc = Reflect.field(listInstance,field);
			if(filter == null || filter(desc)) {
				loadFunc(desc,onLoaded,onError);
			} else {
				onLoaded(desc.file_sizes[0]);
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var _g = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			_g(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.__isInterface__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromCanvas = function(canvas) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(canvas.width,canvas.height,0,false);
		img.image = canvas;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(canvas.width,canvas.height,0,false,0,1);
		img.image = canvas;
		img.createTexture();
		return img;
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img.image = image;
		img.createTexture();
		return img;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img = new kha_CanvasImage(width,height,format,false);
	var g2 = img.get_g2();
	var canvas = g2.canvas;
	var imageData = new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height);
	canvas.putImageData(imageData,0,0);
	return img;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		doneCallback(kha_Image.fromImage(imageElement,readable));
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	var jsvideo = video;
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(jsvideo.element.videoWidth,jsvideo.element.videoHeight,0,false);
		img.video = jsvideo.element;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(jsvideo.element.videoWidth,jsvideo.element.videoHeight,0,false,0,1);
		img.video = jsvideo.element;
		img.createTexture();
		return img;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_depth: function() {
		return 1;
	}
	,get_format: function() {
		return 0;
	}
	,get_realWidth: function() {
		return 0;
	}
	,get_realHeight: function() {
		return 0;
	}
	,get_stride: function() {
		return 0;
	}
	,get_g1: function() {
		return null;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_stride:"get_stride",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_format:"get_format",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = "kha.CanvasImage";
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_format: function() {
		return this.myFormat;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		if(this.myFormat == 0) {
			return 4 * this.get_width();
		} else {
			return this.get_width();
		}
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * (this.image.width | 0) * 4 + x * 4];
		var g = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 1];
		var b = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 2];
		var a = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3];
		return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.myFormat == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.ie && kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = this.get_width();
					while(_g2 < _g3) {
						var x = _g2++;
						var _this = this.bytes;
						var pos = y * this.get_width() + x;
						var value = _this.b[pos];
						var pos1 = y * this.get_width() * 4 + x * 4;
						rgbaBytes.b[pos1] = value;
						var pos2 = y * this.get_width() * 4 + x * 4 + 1;
						rgbaBytes.b[pos2] = value;
						var pos3 = y * this.get_width() * 4 + x * 4 + 2;
						rgbaBytes.b[pos3] = value;
						var pos4 = y * this.get_width() * 4 + x * 4 + 3;
						rgbaBytes.b[pos4] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,getPixels: function() {
		var context = this.g2canvas.canvas;
		var imageData = context.getImageData(0,0,this.get_width(),this.get_height());
		var bytes = new haxe_io_Bytes(new ArrayBuffer(imageData.data.length));
		var _g = 0;
		var _g1 = imageData.data.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = imageData.data[i];
		}
		return bytes;
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.init = function() {
};
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.get_all = function() {
	return [kha_Display.get_primary()];
};
kha_Display.prototype = {
	get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return window.screen.left;
	}
	,get_y: function() {
		return window.screen.top;
	}
	,get_width: function() {
		return window.screen.width;
	}
	,get_height: function() {
		return window.screen.height;
	}
	,get_frequency: function() {
		return kha_SystemImpl.estimatedRefreshRate;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v;
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
	this.fontIndex = fontIndex;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes),fontIndex);
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,fontIndex: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = this.fontIndex * 10000000 + fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g = 0;
			var _g1 = baked.length;
			while(_g < _g1) {
				var i = _g++;
				baked[i] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,this.fontIndex);
			if(offset == -1) {
				offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,0);
			}
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,offset,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,offset);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,setFontIndex: function(fontIndex) {
		this.fontIndex = fontIndex;
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			done(kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0));
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event) {
			done(kha_Image.fromImage(img,readable));
		};
		img.crossOrigin = "";
		img.src = desc.files[0];
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(element.canPlayType("audio/mp4") != "") {
		formats.push("mp4");
	}
	if(element.canPlayType("audio/mp3") != "") {
		formats.push("mp3");
	}
	if(element.canPlayType("audio/wav") != "") {
		formats.push("wav");
	}
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = desc.files[i];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_WebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else if(kha_SystemImpl.mobile) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = desc.files[i];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_MobileWebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["mp4","webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[i] = data[i];
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_Macros = function() { };
$hxClasses["kha.Macros"] = kha_Macros;
kha_Macros.__name__ = "kha.Macros";
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.__properties__ = {get_onedifhz:"get_onedifhz"};
kha_Scheduler.get_onedifhz = function() {
	return 1.0 / kha_Display.get_primary().get_frequency();
};
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.lastFrameEnd = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasks;
		while(_g < _g1.length) {
			var timeTask = _g1[_g];
			++_g;
			timeTask.paused = false;
		}
		var _g = 0;
		var _g1 = kha_Scheduler.frameTasks;
		while(_g < _g1.length) {
			var frameTask = _g1[_g];
			++_g;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task);
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var real = kha_Scheduler.realTime();
	var now = real - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.lastFrameEnd;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				now = real - kha_Scheduler.startTime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var frames = Math.round(delta / (1.0 / kha_Display.get_primary().get_frequency()));
				if(frames < 1) {
					return;
				}
				var realdif = frames * (1.0 / kha_Display.get_primary().get_frequency());
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 1;
				while(_g < _g1) {
					var i = _g++;
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT;
				while(_g < _g1) {
					var i = _g++;
					next += kha_Scheduler.deltas[i];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = now;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.lastFrameEnd = frameEnd;
		}
		var _g = 0;
		var _g1 = kha_Scheduler.pausedTimeTasks;
		while(_g < _g1.length) {
			var pausedTask = _g1[_g];
			++_g;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g = 0;
			var _g1 = kha_Scheduler.timeTasks;
			while(_g < _g1.length) {
				var timeTask = _g1[_g];
				++_g;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.current = frameEnd;
	kha_Scheduler.sortFrameTasks();
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!frameTask.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.current = kha_Scheduler.activeTimeTask.next;
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
	kha_Scheduler.lastFrameEnd = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.pausedTimeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasksScratchpad;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"fade_to_white_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"fade_to_white_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"fade_to_white_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.fade_to_white_frag = new kha_graphics4_FragmentShader(blobs,["fade-to-white.frag.essl","fade-to-white-webgl2.frag.essl","fade-to-white-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs,["painter-colored.frag.essl","painter-colored-webgl2.frag.essl","painter-colored-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs,["painter-colored.vert.essl","painter-colored-webgl2.vert.essl","painter-colored-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs,["painter-image.frag.essl","painter-image-webgl2.frag.essl","painter-image-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs,["painter-image.vert.essl","painter-image-webgl2.vert.essl","painter-image-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs,["painter-text.frag.essl","painter-text-webgl2.frag.essl","painter-text-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs,["painter-text.vert.essl","painter-text-webgl2.vert.essl","painter-text-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs,["painter-video.frag.essl","painter-video-webgl2.frag.essl","painter-video-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs,["painter-video.vert.essl","painter-video-webgl2.vert.essl","painter-video-relaxed.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = kha_arrays_Float32Array._new(count * 2);
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.uncompressedData;
				var v = soundBytes.getFloat(i * 4);
				this1.setFloat32(i * 2 * 4,v,true);
				var this2 = this.uncompressedData;
				var v1 = soundBytes.getFloat(i * 4);
				this2.setFloat32((i * 2 + 1) * 4,v1,true);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = kha_arrays_Float32Array._new(count);
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.uncompressedData;
				var v = soundBytes.getFloat(i * 4);
				this1.setFloat32(i * 4,v,true);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_StorageFile = function() { };
$hxClasses["kha.StorageFile"] = kha_StorageFile;
kha_StorageFile.__name__ = "kha.StorageFile";
kha_StorageFile.prototype = {
	read: function() {
		return null;
	}
	,write: function(data) {
	}
	,append: function(data) {
	}
	,canAppend: function() {
		return false;
	}
	,maxSize: function() {
		return -1;
	}
	,writeString: function(data) {
		var bytes = haxe_io_Bytes.ofString(data);
		this.write(kha_internal_BytesBlob.fromBytes(bytes));
	}
	,appendString: function(data) {
		var bytes = haxe_io_Bytes.ofString(data);
		this.append(kha_internal_BytesBlob.fromBytes(bytes));
	}
	,readString: function() {
		var blob = this.read();
		if(blob == null) {
			return null;
		} else {
			return blob.toString();
		}
	}
	,writeObject: function(object) {
		this.writeString(haxe_Serializer.run(object));
	}
	,readObject: function() {
		var s = this.readString();
		if(s == null) {
			return null;
		}
		try {
			return haxe_Unserializer.run(s);
		} catch( _g ) {
			return null;
		}
	}
	,__class__: kha_StorageFile
};
var kha_LocalStorageFile = function(name) {
	this.name = name;
};
$hxClasses["kha.LocalStorageFile"] = kha_LocalStorageFile;
kha_LocalStorageFile.__name__ = "kha.LocalStorageFile";
kha_LocalStorageFile.encode = function(source) {
	var reserved = [0,10,13,61];
	var output = "";
	var converted;
	var ele;
	var bytes = new Uint8Array(source);
	var _g = 0;
	var _g1 = bytes.length;
	while(_g < _g1) {
		var i = _g++;
		ele = bytes[i];
		converted = (ele + 42) % 256;
		if(!Lambda.has(reserved,converted)) {
			output += String.fromCodePoint(converted);
		} else {
			converted = (converted + 64) % 256;
			output += "=" + String.fromCodePoint(converted);
		}
	}
	return output;
};
kha_LocalStorageFile.decode = function(source) {
	var output = new haxe_io_BytesBuffer();
	var ck = false;
	var c;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		c = source.charCodeAt(i);
		if(c == 13 || c == 10) {
			continue;
		}
		if(c == 61 && !ck) {
			ck = true;
			continue;
		}
		if(ck) {
			ck = false;
			c -= 64;
		}
		if(c < 42 && c > 0) {
			output.addByte(c + 214);
		} else {
			output.addByte(c - 42);
		}
	}
	return output.getBytes();
};
kha_LocalStorageFile.__super__ = kha_StorageFile;
kha_LocalStorageFile.prototype = $extend(kha_StorageFile.prototype,{
	name: null
	,read: function() {
		var storage = js_Browser.getLocalStorage();
		if(storage == null) {
			return null;
		}
		var value = storage.getItem(kha_System.get_title() + "_" + this.name);
		if(value == null) {
			return null;
		} else {
			return kha_internal_BytesBlob.fromBytes(kha_LocalStorageFile.decode(value));
		}
	}
	,write: function(data) {
		var storage = js_Browser.getLocalStorage();
		if(storage == null) {
			return;
		}
		storage.setItem(kha_System.get_title() + "_" + this.name,kha_LocalStorageFile.encode(data.bytes.b.bufferValue));
	}
	,__class__: kha_LocalStorageFile
});
var kha_Storage = function() { };
$hxClasses["kha.Storage"] = kha_Storage;
kha_Storage.__name__ = "kha.Storage";
kha_Storage.namedFile = function(name) {
	return new kha_LocalStorageFile(name);
};
kha_Storage.defaultFile = function() {
	return kha_Storage.namedFile("default.kha");
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,-1,-1,800,600,-1,true,null,0) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(60,true,32,16,8,1) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features |= 1;
	}
	if(options.maximizable) {
		features |= 4;
	}
	if(options.minimizable) {
		features |= 2;
	}
	var newOptions = new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,-1,-1,800,600,-1,true,features,options.windowMode),new kha_FramebufferOptions(60,options.vSync,32,16,8,options.samplesPerPixel));
	kha_System.start(newOptions,function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.removeApplicationStateListeners = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		HxOverrides.remove(kha_System.foregroundListeners,foregroundListener);
	}
	if(resumeListener != null) {
		HxOverrides.remove(kha_System.resumeListeners,resumeListener);
	}
	if(pauseListener != null) {
		HxOverrides.remove(kha_System.pauseListeners,pauseListener);
	}
	if(backgroundListener != null) {
		HxOverrides.remove(kha_System.backgroundListeners,backgroundListener);
	}
	if(shutdownListener != null) {
		HxOverrides.remove(kha_System.shutdownListeners,shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListener = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
	kha_SystemImpl.login();
};
kha_System.waitingForLogin = function() {
	return kha_SystemImpl.waitingForLogin();
};
kha_System.allowUserChange = function() {
	kha_SystemImpl.allowUserChange();
};
kha_System.disallowUserChange = function() {
	kha_SystemImpl.disallowUserChange();
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_screenRotation = function() {
	return 0;
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
	kha_SystemImpl.setSafeZone(value);
};
kha_System.unlockAchievement = function(id) {
	kha_SystemImpl.unlockAchievement(id);
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = "kha.GamepadStates";
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	$global.console.error("Error: " + message);
	if(error != null) {
		if(((error) instanceof haxe_Exception)) {
			var err = error;
			if(err.get_stack() != null) {
				var tmp = $global.console;
				var tmp1 = err.get_stack();
				tmp.error("Stack:\n" + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1)));
			}
		} else if(((error) instanceof Error)) {
			var err = error;
			if(err.stack != null) {
				$global.console.error("Stack:\n" + err.stack);
			}
		}
	}
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.safari = kha_SystemImpl.isSafari();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	kha_SystemImpl.mobileAudioPlaying = !kha_SystemImpl.mobile && !kha_SystemImpl.chrome && !kha_SystemImpl.firefox;
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	kha_SystemImpl.initAnimate(callback);
};
kha_SystemImpl.initSensor = function() {
	if(kha_SystemImpl.ios) {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,-event.accelerationIncludingGravity.x,-event.accelerationIncludingGravity.y,-event.accelerationIncludingGravity.z);
		};
	} else {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
		};
	}
	window.ondeviceorientation = function(event) {
		kha_input_Sensor._changed(1,event.beta,event.gamma,event.alpha);
	};
};
kha_SystemImpl.isMobile = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Android") != -1 || agent.indexOf("webOS") != -1 || agent.indexOf("BlackBerry") != -1 || agent.indexOf("Windows Phone") != -1) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("iPhone") != -1 || agent.indexOf("iPad") != -1 || agent.indexOf("iPod") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Chrome") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Firefox") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isSafari = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Safari") != -1 && agent.indexOf("Chrome") == -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("MSIE ") != -1 || agent.indexOf("Trident/") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return 0;
};
kha_SystemImpl.getTime = function() {
	var now = window.performance != null ? window.performance.now() : Date.now();
	return now / 1000;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.vibrate = function(ms) {
	$global.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	var lang = $global.navigator.language;
	return HxOverrides.substr(lang,0,2).toLowerCase();
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		var pad = e.gamepad;
		kha_input_Gamepad.sendConnectEvent(pad.index);
		var _g = 0;
		var _g1 = pad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gamepadStates[pad.index].buttons[i] = 0;
		}
	});
	window.addEventListener("gamepaddisconnected",function(e) {
		kha_input_Gamepad.sendDisconnectEvent(e.gamepad.index);
	});
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null) {
		var _g = 0;
		var _g1 = sysGamepads.length;
		while(_g < _g1) {
			var i = _g++;
			var pad = sysGamepads[i];
			if(pad != null) {
				kha_SystemImpl.gamepads[pad.index].connected = true;
			}
		}
	}
	var onCopy = function(e) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onCut = function(e) {
		if(kha_System.cutListener != null) {
			var data = kha_System.cutListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onPaste = function(e) {
		if(kha_System.pasteListener != null) {
			var onPaste = e.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste);
			e.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.copyToClipboard = function(text) {
	var textArea = window.document.createElement("textarea");
	textArea.value = text;
	textArea.style.top = "0";
	textArea.style.left = "0";
	textArea.style.position = "fixed";
	window.document.body.appendChild(textArea);
	textArea.focus();
	textArea.select();
	try {
		window.document.execCommand("copy");
	} catch( _g ) {
	}
	window.document.body.removeChild(textArea);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g = 0;
	var _g1 = pad.buttons.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.buttons[i] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i] != pad.buttons[i].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i] = pad.buttons[i].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i,pad.buttons[i].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( _g ) {
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 408, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( _g ) {
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 436, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(0,defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	canvas.focus();
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.document.addEventListener("dragover",function(event) {
		event.preventDefault();
	});
	window.document.addEventListener("drop",function(event) {
		event.preventDefault();
		if(event.dataTransfer != null && event.dataTransfer.files != null) {
			var _g = 0;
			var _g1 = event.dataTransfer.files;
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				kha_LoaderImpl.dropFiles.h[file.name] = file;
				kha_System.dropFiles("drop://" + file.name);
			}
		}
	});
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.initAnimate = function(callback) {
	var canvas = kha_SystemImpl.getCanvasElement();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var isRefreshRateDetectionActive = false;
	var lastTimestamp = 0.0;
	var possibleRefreshRates = [30,60,75,90,120,144,240,340,360];
	var _g = [];
	var _g1 = 0;
	var _g2 = possibleRefreshRates.length;
	while(_g1 < _g2) {
		var _ = _g1++;
		_g.push(0);
	}
	var refreshRatesCounts = _g;
	var animate = null;
	animate = function(timestamp) {
		if(requestAnimationFrame == null) {
			window.setTimeout(animate,16.6666666666666679);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			if(kha_SystemImpl.lastCanvasClientWidth != canvas.clientWidth || kha_SystemImpl.lastCanvasClientHeight != canvas.clientHeight) {
				var scale = window.devicePixelRatio;
				var clientWidth = canvas.clientWidth;
				var clientHeight = canvas.clientHeight;
				canvas.width = clientWidth;
				canvas.height = clientHeight;
				if(scale != 1) {
					canvas.style.width = (clientWidth / scale | 0) + "px";
					canvas.style.height = (clientHeight / scale | 0) + "px";
				}
				kha_SystemImpl.lastCanvasClientWidth = canvas.clientWidth;
				kha_SystemImpl.lastCanvasClientHeight = canvas.clientHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.ie && kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
		if(!isRefreshRateDetectionActive) {
			return;
		}
		if(lastTimestamp == 0) {
			lastTimestamp = timestamp;
			return;
		}
		var fps = Math.floor(1000 / (timestamp - lastTimestamp));
		if(kha_SystemImpl.estimatedRefreshRate < fps) {
			kha_SystemImpl.estimatedRefreshRate = fps;
		}
		lastTimestamp = timestamp;
		var _g3_current = 0;
		var _g3_array = possibleRefreshRates;
		while(_g3_current < _g3_array.length) {
			var _g4_value = _g3_array[_g3_current];
			var _g4_key = _g3_current++;
			var i = _g4_key;
			var rate = _g4_value;
			if(fps > rate - 3 && fps < rate + 3) {
				refreshRatesCounts[i]++;
			}
		}
	};
	window.setTimeout(function() {
		isRefreshRateDetectionActive = true;
		return window.setTimeout(function() {
			isRefreshRateDetectionActive = false;
			var index = possibleRefreshRates.indexOf(60);
			var max = 0;
			var _g3_current = 0;
			var _g3_array = refreshRatesCounts;
			while(_g3_current < _g3_array.length) {
				var _g4_value = _g3_array[_g3_current];
				var _g4_key = _g3_current++;
				var i = _g4_key;
				var count = _g4_value;
				if(count > max) {
					max = count;
					index = i;
				}
			}
			return kha_SystemImpl.estimatedRefreshRate = possibleRefreshRates[index];
		},1000);
	},500);
	kha_Scheduler.start();
	requestAnimationFrame(animate);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 730, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	var _g = kha_input_Mouse.wheelEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		var func = _g.func;
		if(func(event)) {
			event.preventDefault();
		}
		break;
	}
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	} else if(event.which == 4) {
		kha_SystemImpl.mouse.sendDownEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	} else if(event.which == 5) {
		kha_SystemImpl.mouse.sendDownEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseBackUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 4) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	kha_SystemImpl.mouse.sendUpEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseForwardUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 5) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	kha_SystemImpl.mouse.sendUpEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	var _g = kha_input_Surface.touchDownEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		var func = _g.func;
		if(func(event)) {
			event.preventDefault();
		}
		break;
	}
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ß";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCodePoint((-48 + keycode));
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCodePoint(keycode);
		} else {
			return String.fromCodePoint((keycode - 65 + 97));
		}
	}
	return String.fromCodePoint(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	if(event.repeat) {
		event.preventDefault();
		return;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendDownEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.preventDefaultKeyBehavior = function(event) {
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		var func = _g.func;
		if(func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		if(e.metaKey && e.keyCode == 81) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendUpEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unknown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.setGamepadRumble = function(index,leftAmount,rightAmount) {
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance != null && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return $global.navigator.getGamepads();
	} else {
		return null;
	}
};
kha_SystemImpl.getPen = function(num) {
	return null;
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
kha_SystemImpl.waitingForLogin = function() {
	return false;
};
kha_SystemImpl.disallowUserChange = function() {
};
kha_SystemImpl.allowUserChange = function() {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,update: function(dt) {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.pixels = null;
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = "kha.WebGLImage";
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_format: function() {
		return this.myFormat;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		return kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width();
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * this.get_width() * 4 + x * 4];
		var g = this.data.data[y * this.get_width() * 4 + x * 4 + 1];
		var b = this.data.data[y * this.get_width() * 4 + x * 4 + 2];
		var a = this.data.data[y * this.get_width() * 4 + x * 4 + 3];
		return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		if(((this.image) instanceof Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			if(this.get_width() > kha_WebGLImage.canvas.width || this.get_height() > kha_WebGLImage.canvas.height) {
				var cw = kha_WebGLImage.canvas.width;
				var ch = kha_WebGLImage.canvas.height;
				while(this.get_width() > cw || this.get_height() > ch) {
					cw *= 2;
					ch *= 2;
				}
				kha_WebGLImage.canvas.width = cw;
				kha_WebGLImage.canvas.height = ch;
			}
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.myFormat == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.myFormat) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 270, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.myFormat) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		this.depthTexture = (js_Boot.__cast(image , kha_WebGLImage)).depthTexture;
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
		if(this.samples > 1 && kha_SystemImpl.gl2) {
			this.MSAADepthBuffer = (js_Boot.__cast(image , kha_WebGLImage)).MSAADepthBuffer;
			kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
		}
	}
	,bytesToArray: function(bytes) {
		switch(this.myFormat) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.ie && kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g3 = this.get_width();
						while(_g2 < _g3) {
							var x = _g2++;
							var _this = this.bytes;
							var pos = y * this.get_width() + x;
							var value = _this.b[pos];
							var pos1 = y * this.get_width() * 4 + x * 4;
							rgbaBytes.b[pos1] = value;
							var pos2 = y * this.get_width() * 4 + x * 4 + 1;
							rgbaBytes.b[pos2] = value;
							var pos3 = y * this.get_width() * 4 + x * 4 + 2;
							rgbaBytes.b[pos3] = value;
							var pos4 = y * this.get_width() * 4 + x * 4 + 3;
							rgbaBytes.b[pos4] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			switch(this.myFormat) {
			case 0:case 1:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height());
				break;
			case 2:case 5:
				this.pixels = new Float32Array((kha_WebGLImage.formatByteSize(this.myFormat) / 4 | 0) * this.get_width() * this.get_height());
				break;
			case 4:case 6:
				this.pixels = new Uint16Array((kha_WebGLImage.formatByteSize(this.myFormat) / 2 | 0) * this.get_width() * this.get_height());
				break;
			default:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height());
			}
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		switch(this.myFormat) {
		case 0:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
			break;
		case 1:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5121,this.pixels);
			break;
		case 2:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5126,this.pixels);
			break;
		case 4:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		case 5:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.pixels);
			break;
		case 6:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		default:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		}
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
		if(this.MSAAFrameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.MSAAFrameBuffer);
		}
		if(this.MSAAColorBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAAColorBuffer);
		}
		if(this.MSAADepthBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAADepthBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.myFormat == 2) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.myFormat == 4) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(num,defaultWidth,defaultHeight,canvas) {
	var _gthis = this;
	this.num = num;
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
	kha_Window.resizeCallbacks[num] = [];
	kha_Window.windows.push(this);
	var observer = new MutationObserver(function(mutations,observer) {
		var isResize = false;
		var _g = 0;
		while(_g < mutations.length) {
			var mutation = mutations[_g];
			++_g;
			if(mutation.attributeName == "width" || mutation.attributeName == "height") {
				isResize = true;
				break;
			}
		}
		if(isResize) {
			_gthis.resize(canvas.width,canvas.height);
		}
	});
	observer.observe(canvas,{ attributes : true});
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	num: null
	,canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
		var _g = 0;
		var _g1 = kha_Window.resizeCallbacks[this.num];
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(width,height);
		}
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		if(this.canvas.width == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.width;
		}
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		if(this.canvas.height == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.height;
		}
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		if(this.isFullscreen()) {
			return 1;
		} else {
			return 0;
		}
	}
	,set_mode: function(mode) {
		if(mode == 1 || mode == 2) {
			if(!this.isFullscreen()) {
				this.requestFullscreen();
			}
		} else if(this.isFullscreen()) {
			this.exitFullscreen();
		}
		return mode;
	}
	,isFullscreen: function() {
		return document.fullscreenElement === this.canvas ||
			document.mozFullScreenElement === this.canvas ||
			document.webkitFullscreenElement === this.canvas ||
			document.msFullscreenElement === this.canvas ;
	}
	,requestFullscreen: function() {
		if(($_=this.canvas,$bind($_,$_.requestFullscreen))) {
			var c = this.canvas;
			c.requestFullscreen({ navigationUI : "hide"});
		} else if(this.canvas.msRequestFullscreen) {
			this.canvas.msRequestFullscreen();
		} else if(this.canvas.mozRequestFullScreen) {
			this.canvas.mozRequestFullScreen();
		} else if(this.canvas.webkitRequestFullscreen) {
			this.canvas.webkitRequestFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(document.exitFullscreen) {
			document.exitFullscreen();
		} else if(document.msExitFullscreen) {
			document.msExitFullscreen();
		} else if(document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if(document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return "Kha";
	}
	,set_title: function(value) {
		return "Kha";
	}
	,notifyOnResize: function(callback) {
		kha_Window.resizeCallbacks[this.num].push(callback);
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_WindowFeatures = {};
kha_WindowFeatures._new = function(value) {
	var this1 = value;
	return this1;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays_ByteArray = {};
kha_arrays_ByteArray.__properties__ = {get_buffer:"get_buffer"};
kha_arrays_ByteArray.get_buffer = function(this1) {
	return this1.buffer;
};
kha_arrays_ByteArray._new = function(buffer,byteOffset,byteLength) {
	var this1 = new DataView(buffer,byteOffset,byteLength);
	return this1;
};
kha_arrays_ByteArray.make = function(byteLength) {
	return kha_arrays_ByteArray._new(kha_arrays_ByteBuffer.create(byteLength));
};
kha_arrays_ByteArray.getInt8 = function(this1,byteOffset) {
	return this1.getInt8(byteOffset);
};
kha_arrays_ByteArray.getUint8 = function(this1,byteOffset) {
	return this1.getUint8(byteOffset);
};
kha_arrays_ByteArray.getInt16 = function(this1,byteOffset) {
	return this1.getInt16(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getUint16 = function(this1,byteOffset) {
	return this1.getUint16(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getInt32 = function(this1,byteOffset) {
	return this1.getInt32(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getUint32 = function(this1,byteOffset) {
	return this1.getUint32(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getFloat32 = function(this1,byteOffset) {
	return this1.getFloat32(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getFloat64 = function(this1,byteOffset) {
	return this1.getFloat64(byteOffset,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.setInt8 = function(this1,byteOffset,value) {
	this1.setInt8(byteOffset,value);
};
kha_arrays_ByteArray.setUint8 = function(this1,byteOffset,value) {
	this1.setUint8(byteOffset,value);
};
kha_arrays_ByteArray.setInt16 = function(this1,byteOffset,value) {
	this1.setInt16(byteOffset,value,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.setUint16 = function(this1,byteOffset,value) {
	this1.setUint16(byteOffset,value,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.setInt32 = function(this1,byteOffset,value) {
	this1.setInt32(byteOffset,value,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.setUint32 = function(this1,byteOffset,value) {
	this1.setUint32(byteOffset,value,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.setFloat32 = function(this1,byteOffset,value) {
	this1.setFloat32(byteOffset,value,true);
};
kha_arrays_ByteArray.setFloat64 = function(this1,byteOffset,value) {
	this1.setFloat64(byteOffset,value,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_ByteArray.getInt16LE = function(this1,byteOffset) {
	return this1.getInt16(byteOffset,true);
};
kha_arrays_ByteArray.getUint16LE = function(this1,byteOffset) {
	return this1.getUint16(byteOffset,true);
};
kha_arrays_ByteArray.getInt32LE = function(this1,byteOffset) {
	return this1.getInt32(byteOffset,true);
};
kha_arrays_ByteArray.getUint32LE = function(this1,byteOffset) {
	return this1.getUint32(byteOffset,true);
};
kha_arrays_ByteArray.getFloat32LE = function(this1,byteOffset) {
	return this1.getFloat32(byteOffset,true);
};
kha_arrays_ByteArray.getFloat64LE = function(this1,byteOffset) {
	return this1.getFloat64(byteOffset,true);
};
kha_arrays_ByteArray.setInt16LE = function(this1,byteOffset,value) {
	this1.setInt16(byteOffset,value,true);
};
kha_arrays_ByteArray.setUint16LE = function(this1,byteOffset,value) {
	this1.setUint16(byteOffset,value,true);
};
kha_arrays_ByteArray.setInt32LE = function(this1,byteOffset,value) {
	this1.setInt32(byteOffset,value,true);
};
kha_arrays_ByteArray.setUint32LE = function(this1,byteOffset,value) {
	this1.setUint32(byteOffset,value,true);
};
kha_arrays_ByteArray.setFloat32LE = function(this1,byteOffset,value) {
	this1.setFloat32(byteOffset,value,true);
};
kha_arrays_ByteArray.setFloat64LE = function(this1,byteOffset,value) {
	this1.setFloat64(byteOffset,value,true);
};
kha_arrays_ByteArray.getInt16BE = function(this1,byteOffset) {
	return this1.getInt16(byteOffset);
};
kha_arrays_ByteArray.getUint16BE = function(this1,byteOffset) {
	return this1.getUint16(byteOffset);
};
kha_arrays_ByteArray.getInt32BE = function(this1,byteOffset) {
	return this1.getInt32(byteOffset);
};
kha_arrays_ByteArray.getUint32BE = function(this1,byteOffset) {
	return this1.getUint32(byteOffset);
};
kha_arrays_ByteArray.getFloat32BE = function(this1,byteOffset) {
	return this1.getFloat32(byteOffset);
};
kha_arrays_ByteArray.getFloat64BE = function(this1,byteOffset) {
	return this1.getFloat64(byteOffset);
};
kha_arrays_ByteArray.setInt16BE = function(this1,byteOffset,value) {
	this1.setInt16(byteOffset,value);
};
kha_arrays_ByteArray.setUint16BE = function(this1,byteOffset,value) {
	this1.setUint16(byteOffset,value);
};
kha_arrays_ByteArray.setInt32BE = function(this1,byteOffset,value) {
	this1.setInt32(byteOffset,value);
};
kha_arrays_ByteArray.setUint32BE = function(this1,byteOffset,value) {
	this1.setUint32(byteOffset,value);
};
kha_arrays_ByteArray.setFloat32BE = function(this1,byteOffset,value) {
	this1.setFloat32(byteOffset,value);
};
kha_arrays_ByteArray.setFloat64BE = function(this1,byteOffset,value) {
	this1.setFloat64(byteOffset,value);
};
kha_arrays_ByteArray.subarray = function(this1,start,end) {
	return kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null);
};
var kha_arrays_ByteBuffer = {};
kha_arrays_ByteBuffer.create = function(length) {
	return kha_arrays_ByteBuffer._new(length);
};
kha_arrays_ByteBuffer._new = function(length) {
	var this1 = new ArrayBuffer(length);
	return this1;
};
var kha_arrays_Float32Array = {};
kha_arrays_Float32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Float32Array.get_length = function(this1) {
	return this1.byteLength >> 2;
};
kha_arrays_Float32Array._new = function(elements) {
	var this1 = kha_arrays_ByteArray.make(elements * 4);
	return this1;
};
kha_arrays_Float32Array.get = function(this1,k) {
	return this1.getFloat32(k * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_Float32Array.set = function(this1,k,v) {
	this1.setFloat32(k * 4,v,true);
	return v;
};
kha_arrays_Float32Array.subarray = function(this1,start,end) {
	var start1 = start * 4;
	var end1 = end != null ? end * 4 : end;
	return kha_arrays_ByteArray._new(this1.buffer,start1,end1 != null ? end1 - start1 : null);
};
var kha_arrays_Int32Array = {};
kha_arrays_Int32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Int32Array.get_length = function(this1) {
	return this1.byteLength >> 2;
};
kha_arrays_Int32Array._new = function(elements) {
	var this1 = kha_arrays_ByteArray.make(elements * 4);
	return this1;
};
kha_arrays_Int32Array.get = function(this1,k) {
	return this1.getInt32(k * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_Int32Array.set = function(this1,k,v) {
	this1.setInt32(k * 4,v,kha_arrays_ByteArray.LITTLE_ENDIAN);
	return this1.getInt32(k * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_Int32Array.subarray = function(this1,start,end) {
	var start1 = start * 4;
	var end1 = end != null ? end * 4 : null;
	return kha_arrays_ByteArray._new(this1.buffer,start1,end1 != null ? end1 - start1 : null);
};
var kha_arrays_Uint32Array = {};
kha_arrays_Uint32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Uint32Array.get_length = function(this1) {
	return this1.byteLength >> 2;
};
kha_arrays_Uint32Array._new = function(elements) {
	var this1 = kha_arrays_ByteArray.make(elements * 4);
	return this1;
};
kha_arrays_Uint32Array.get = function(this1,k) {
	return this1.getUint32(k * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_Uint32Array.set = function(this1,k,v) {
	this1.setUint32(k * 4,v,kha_arrays_ByteArray.LITTLE_ENDIAN);
	return this1.getUint32(k * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
};
kha_arrays_Uint32Array.subarray = function(this1,start,end) {
	var start1 = start * 4;
	var end1 = end != null ? end * 4 : null;
	return kha_arrays_ByteArray._new(this1.buffer,start1,end1 != null ? end1 - start1 : null);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(bufferSize,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data.getFloat32(kha_audio2_Audio.buffer.readLocation * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data.getFloat32(kha_audio2_Audio.buffer.readLocation * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = 0;
				output2[i] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.wake();
	}
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	var blob = new Blob([sound.compressedData.b.bufferValue],{ type : "audio/mp4"});
	element.src = URL.createObjectURL(blob);
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	var this1 = new Array(32);
	kha_audio2_Audio1.soundChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.streamChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = this1;
	kha_audio2_Audio1.sampleCache1 = kha_arrays_Float32Array._new(512);
	kha_audio2_Audio1.sampleCache2 = kha_arrays_Float32Array._new(512);
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.byteLength >> 2 < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				buffer.data.setFloat32(buffer.writeLocation * 4,0,true);
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		kha_audio2_Audio1.sampleCache1 = kha_arrays_Float32Array._new(samples * 2);
		kha_audio2_Audio1.sampleCache2 = kha_arrays_Float32Array._new(samples * 2);
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g = 0;
	var _g1 = samples;
	while(_g < _g1) {
		var i = _g++;
		kha_audio2_Audio1.sampleCache2.setFloat32(i * 4,0,true);
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalSoundChannels[i] = kha_audio2_Audio1.soundChannels[i];
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalStreamChannels[i] = kha_audio2_Audio1.streamChannels[i];
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalSoundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		var _g3 = samples;
		while(_g2 < _g3) {
			var i = _g2++;
			var _g4 = i;
			var _g5 = kha_audio2_Audio1.sampleCache2;
			var v = _g5.getFloat32(_g4 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) + kha_audio2_Audio1.sampleCache1.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) * channel.get_volume();
			_g5.setFloat32(_g4 * 4,v,true);
		}
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalStreamChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		var _g3 = samples;
		while(_g2 < _g3) {
			var i = _g2++;
			var _g4 = i;
			var _g5 = kha_audio2_Audio1.sampleCache2;
			var v = _g5.getFloat32(_g4 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) + kha_audio2_Audio1.sampleCache1.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) * channel.get_volume();
			_g5.setFloat32(_g4 * 4,v,true);
		}
	}
	var _g = 0;
	var _g1 = samples;
	while(_g < _g1) {
		var i = _g++;
		var a = kha_audio2_Audio1.sampleCache2.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
		var a1 = a < 1.0 ? a : 1.0;
		var v = a1 > -1.0 ? a1 : -1.0;
		buffer.data.setFloat32(buffer.writeLocation * 4,v,true);
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished() || kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.data = null;
	this.looping = looping;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples.setFloat32(i * 4,0,true);
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var a = (this.data.byteLength >> 2) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				var i = _g++;
				var v = this.data.getFloat32(this.myPosition++ * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				requestedSamples.setFloat32(requestedSamplesIndex++ * 4,v,true);
			}
			if(this.myPosition >= this.data.byteLength >> 2) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples.setFloat32(requestedSamplesIndex++ * 4,0,true);
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return (this.data.byteLength >> 2) / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.byteLength >> 2;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	this.data = kha_arrays_Float32Array._new(size);
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples.setFloat32(i * 4,0,true);
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var value = Math.ceil((this.data.byteLength >> 2) * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				var i = _g++;
				var k = requestedSamplesIndex++;
				var position = this.myPosition++;
				var even = position % 2 == 0;
				var factor = this.sampleRate / sampleRate;
				var v;
				if(even) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var minimum = 0;
					var maximum = (this.data.byteLength >> 2) - 1;
					if(maximum % 2 != 0) {
						--maximum;
					}
					var a1 = pos1 < minimum || pos1 > maximum ? 0 : this.data.getFloat32(pos1 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
					var b1 = pos2 < minimum || pos2 > maximum ? 0 : this.data.getFloat32(pos2 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
					var t = pos - Math.floor(pos);
					v = (1 - t) * a1 + t * b1;
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var minimum1 = 1;
					var maximum1 = (this.data.byteLength >> 2) - 1;
					if(maximum1 % 2 == 0) {
						--maximum1;
					}
					var a2 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data.getFloat32(pos11 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
					var b2 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data.getFloat32(pos21 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
					var t1 = pos3 - Math.floor(pos3);
					v = (1 - t1) * a2 + t1 * b2;
				}
				requestedSamples.setFloat32(k * 4,v,true);
			}
			var value1 = Math.ceil((this.data.byteLength >> 2) * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value1 % 2 == 0 ? value1 : value1 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples.setFloat32(requestedSamplesIndex++ * 4,0,true);
	}
	,sample: function(position,sampleRate) {
		var even = position % 2 == 0;
		var factor = this.sampleRate / sampleRate;
		if(even) {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var minimum = 0;
			var maximum = (this.data.byteLength >> 2) - 1;
			if(maximum % 2 != 0) {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data.getFloat32(pos1 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data.getFloat32(pos2 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		} else {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 = pos1 * 2 + 1;
			pos2 = pos2 * 2 + 1;
			var minimum = 1;
			var maximum = (this.data.byteLength >> 2) - 1;
			if(maximum % 2 == 0) {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data.getFloat32(pos1 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data.getFloat32(pos2 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil((this.data.byteLength >> 2) * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return (this.data.byteLength >> 2) / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 != 0) {
			++pos;
		}
		var value1 = Math.ceil((this.data.byteLength >> 2) * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples.setFloat32(i * 4,0,true);
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g = count;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples.setFloat32(i * 4,0,true);
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = "kha.audio2.VirtualStreamChannel";
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != 0) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = "kha.audio2.ogg.tools.MathTools";
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = "kha.audio2.ogg.tools.Mdct";
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset + 4] - v40_20 * a[aaOffset + 5];
		u[dOffset1] = v40_20 * a[aaOffset + 4] + v41_21 * a[aaOffset + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset] - v40_20 * a[aaOffset + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset] + v41_21 * a[aaOffset + 1];
		aaOffset -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		u[eeOffset0] += u[eeOffset2];
		u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
		u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
		u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
		u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off = n2 - 1 - n4;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		u[eeOffset0] += u[eeOffset2];
		u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
		u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
		u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
		u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8 * 2;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8 * 3;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var _g = 2;
	var _g1 = ld - 3 >> 1;
	while(_g < _g1) {
		var l = _g++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g2 = 0;
		var _g3 = lim;
		while(_g2 < _g3) {
			var i = _g2++;
			var d0 = n2 - 1 - k0 * i;
			var k1 = 1 << l + 3;
			var aOffset = 0;
			var eOffset0 = d0;
			var eOffset2 = d0 + -k0_2;
			var i1 = (n >> l + 4 >> 2) + 1;
			while(--i1 > 0) {
				var k00_20 = u[eOffset0] - u[eOffset2];
				var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
				u[eOffset0] += u[eOffset2];
				u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
				u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
				k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
				u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
				u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
				u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
				k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
				u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
				u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
				u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
				k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
				u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
				u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
				u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				eOffset0 -= 8;
				eOffset2 -= 8;
				aOffset += k1;
			}
		}
	}
	var _g = ld - 3 >> 1;
	var _g1 = ld - 6;
	while(_g < _g1) {
		var l = _g++;
		var k0 = n >> l + 2;
		var k1 = 1 << l + 3;
		var k0_2 = k0 >> 1;
		var rlim = n >> l + 6;
		var lim = 1 << l + 1;
		var aOffset = 0;
		var i_off = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset];
			var A1 = a[aOffset + 1];
			var A2 = a[aOffset + k1];
			var A3 = a[aOffset + k1 + 1];
			var A4 = a[aOffset + k1 * 2];
			var A5 = a[aOffset + k1 * 2 + 1];
			var A6 = a[aOffset + k1 * 3];
			var A7 = a[aOffset + k1 * 3 + 1];
			var eeOffset0 = i_off;
			var eeOffset2 = i_off + -k0_2;
			var i = lim + 1;
			while(--i > 0) {
				var k00 = u[eeOffset0] - u[eeOffset2];
				var k11 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
				u[eeOffset0] += u[eeOffset2];
				u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
				u[eeOffset2] = k00 * A0 - k11 * A1;
				u[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
				k00 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
				k11 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
				u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
				u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
				u[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
				u[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
				k00 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
				k11 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
				u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
				u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
				u[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
				u[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
				k00 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
				k11 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
				u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
				u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
				u[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
				u[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
				eeOffset0 -= k0;
				eeOffset2 -= k0;
			}
			aOffset += k1 * 4;
			i_off -= 8;
		}
	}
	var i_off = n2 - 1;
	var A2 = a[n >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + (-8)];
		u[zOffset + (-8)] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + (-1)];
		t1 = u[zOffset + (-9)];
		u[zOffset + (-9)] = t0 - t1;
		u[zOffset + (-1)] = t0 + t1;
		t0 = u[zOffset + (-2)];
		t1 = u[zOffset + (-10)];
		var k00 = t0 - t1;
		u[zOffset + (-2)] = t0 + t1;
		t0 = u[zOffset + (-3)];
		t1 = u[zOffset + (-11)];
		var k11 = t0 - t1;
		u[zOffset + (-3)] = t0 + t1;
		u[zOffset + (-10)] = (k00 + k11) * A2;
		u[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = u[zOffset + (-4)];
		t1 = u[zOffset + (-12)];
		k00 = t1 - t0;
		u[zOffset + (-4)] = t0 + t1;
		t0 = u[zOffset + (-5)];
		t1 = u[zOffset + (-13)];
		k11 = t0 - t1;
		u[zOffset + (-5)] = t0 + t1;
		u[zOffset + (-12)] = k11;
		u[zOffset + (-13)] = k00;
		t0 = u[zOffset + (-6)];
		t1 = u[zOffset + (-14)];
		k00 = t1 - t0;
		u[zOffset + (-6)] = t0 + t1;
		t0 = u[zOffset + (-7)];
		t1 = u[zOffset + (-15)];
		k11 = t0 - t1;
		u[zOffset + (-7)] = t0 + t1;
		u[zOffset + (-14)] = (k00 + k11) * A2;
		u[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = u[zOffset];
		var t11 = u[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + (-2)];
		t11 = u[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + (-2)] = y0 - y2;
		var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
		u[zOffset + (-4)] = k001 + k33;
		u[zOffset + (-6)] = k001 - k33;
		t01 = u[zOffset + (-1)];
		t11 = u[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
		u[zOffset + (-1)] = y1 + y3;
		u[zOffset + (-3)] = y1 - y3;
		u[zOffset + (-5)] = k111 - k22;
		u[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + (-2)];
		t12 = u[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + (-2)] = y01 - y21;
		var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
		u[zOffset1 + (-4)] = k002 + k331;
		u[zOffset1 + (-6)] = k002 - k331;
		t02 = u[zOffset1 + (-1)];
		t12 = u[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
		u[zOffset1 + (-1)] = y11 + y31;
		u[zOffset1 + (-3)] = y11 - y31;
		u[zOffset1 + (-5)] = k112 - k221;
		u[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset0 = n4 - 4;
	var dOffset1 = n2 - 4;
	while(dOffset0 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset1 + 3] = u[k4];
		v[dOffset1 + 2] = u[k4 + 1];
		v[dOffset0 + 3] = u[k4 + 2];
		v[dOffset0 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset1 + 1] = u[k4];
		v[dOffset1] = u[k4 + 1];
		v[dOffset0 + 1] = u[k4 + 2];
		v[dOffset0] = u[k4 + 3];
		dOffset0 -= 4;
		dOffset1 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset = 0;
	var eOffset = n2 - 4;
	while(dOffset < eOffset) {
		var a02 = v[dOffset] - v[eOffset + 2];
		var a11 = v[dOffset + 1] + v[eOffset + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset] + v[eOffset + 2];
		var b3 = v[dOffset + 1] - v[eOffset + 3];
		v[dOffset] = b2 + b0;
		v[dOffset + 1] = b3 + b1;
		v[eOffset + 2] = b2 - b0;
		v[eOffset + 3] = b1 - b3;
		a02 = v[dOffset + 2] - v[eOffset];
		a11 = v[dOffset + 3] + v[eOffset + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset + 2] + v[eOffset];
		b3 = v[dOffset + 3] - v[eOffset + 1];
		v[dOffset + 2] = b2 + b0;
		v[dOffset + 3] = b3 + b1;
		v[eOffset] = b2 - b0;
		v[eOffset + 1] = b1 - b3;
		cOffset += 4;
		dOffset += 4;
		eOffset -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset = n2 - 8;
	var dOffset0 = 0;
	var dOffset1 = n2 - 4;
	var dOffset2 = n2;
	var dOffset3 = n - 4;
	while(eOffset >= 0) {
		var p3 = buf2[eOffset + 6] * b[bOffset + 7] - buf2[eOffset + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset + 6] * b[bOffset + 6] - buf2[eOffset + 7] * b[bOffset + 7];
		buffer[dOffset0] = p3;
		buffer[dOffset1 + 3] = -p3;
		buffer[dOffset2] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset + 4] * b[bOffset + 5] - buf2[eOffset + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset + 4] * b[bOffset + 4] - buf2[eOffset + 5] * b[bOffset + 5];
		buffer[dOffset0 + 1] = p1;
		buffer[dOffset1 + 2] = -p1;
		buffer[dOffset2 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset + 2] * b[bOffset + 3] - buf2[eOffset + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset + 2] * b[bOffset + 2] - buf2[eOffset + 3] * b[bOffset + 3];
		buffer[dOffset0 + 2] = p3;
		buffer[dOffset1 + 1] = -p3;
		buffer[dOffset2 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset] * b[bOffset + 1] - buf2[eOffset + 1] * b[bOffset];
		p0 = -buf2[eOffset] * b[bOffset] - buf2[eOffset + 1] * b[bOffset + 1];
		buffer[dOffset0 + 3] = p1;
		buffer[dOffset1] = -p1;
		buffer[dOffset2 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset -= 8;
		dOffset0 += 4;
		dOffset2 += 4;
		dOffset1 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] += e[eeOffset2];
		e[eeOffset0 + (-1)] += e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] += e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] += e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] += e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] += e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] += e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] += e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		e[eOffset0] += e[eOffset2];
		e[eOffset0 + (-1)] += e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		e[eOffset0 + (-2)] += e[eOffset2 + (-2)];
		e[eOffset0 + (-3)] += e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		e[eOffset0 + (-4)] += e[eOffset2 + (-4)];
		e[eOffset0 + (-5)] += e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		e[eOffset0 + (-6)] += e[eOffset2 + (-6)];
		e[eOffset0 + (-7)] += e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] += e[eeOffset2];
		e[eeOffset0 + (-1)] += e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] += e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] += e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] += e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] += e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] += e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] += e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + (-2)];
		t11 = e[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + (-2)] = y0 - y2;
		var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
		e[zOffset + (-4)] = k001 + k33;
		e[zOffset + (-6)] = k001 - k33;
		t01 = e[zOffset + (-1)];
		t11 = e[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
		e[zOffset + (-1)] = y1 + y3;
		e[zOffset + (-3)] = y1 - y3;
		e[zOffset + (-5)] = k111 - k22;
		e[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + (-2)];
		t12 = e[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + (-2)] = y01 - y21;
		var k331 = e[zOffset1 + (-3)] - e[zOffset1 + (-7)];
		e[zOffset1 + (-4)] = k002 + k331;
		e[zOffset1 + (-6)] = k002 - k331;
		t02 = e[zOffset1 + (-1)];
		t12 = e[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + (-3)] + e[zOffset1 + (-7)];
		e[zOffset1 + (-1)] = y11 + y31;
		e[zOffset1 + (-3)] = y11 - y31;
		e[zOffset1 + (-5)] = k112 - k221;
		e[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var buffer = kha_arrays_Float32Array._new(bufferSize * header.channel);
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) {
			var i = _g++;
			output.writeFloat(buffer.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN));
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(UInt.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Object.create(kha_audio2_ogg_vorbis_Reader.prototype);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(UInt.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g = 0;
		var _g1 = segmentCount;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i = segmentCount - 1;
			while(i >= 0) {
				if(this.segments[i] < 255) {
					break;
				}
				if(i >= 0) {
					this.endSegWithKnownLoc = i;
					this.knownLocForPacket = loc0;
				}
				--i;
			}
		}
		if(this.firstDecode) {
			var i = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g = 0;
			var _g1 = segmentCount;
			while(_g < _g1) {
				var i = _g++;
				len += this.segments[i];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					var e = _g1;
					this.lastSeg = true;
					this.error = e;
					return 0;
				} else {
					throw _g;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( _g ) {
				if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
					eof = true;
					x = 0;
				} else {
					throw _g;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[0] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[1] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[2] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[3] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[4] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[5] = x;
		if(header.toString() != "vorbis") {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = UInt.gte(inputLength,65536) && UInt.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var e = _g.end;
			var l = _g.last;
			end = e;
			last = l;
			break;
		case 1:
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g = this.findPage(seekFunc,inputLength);
			switch(_g._hx_index) {
			case 0:
				var e = _g.end;
				var l = _g.last;
				end = e;
				last = l;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g = 0;
		var _g1 = 6;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( _g5 ) {
						if(((haxe_Exception.caught(_g5).unwrap()) instanceof haxe_io_Eof)) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw _g5;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw _g;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this1 = new Array(27);
		var vec = this1;
		var _g = 0;
		var _g1 = 27;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		var n = pageHeader[26];
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var lacing = vec;
		var len = 0;
		var _g = 0;
		var _g1 = pageHeader[26];
		while(_g < _g1) {
			var i = _g++;
			len += lacing[i];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g = 0;
		var _g1 = pageHeader[26];
		while(_g < _g1) {
			var i = _g++;
			if(packetStart) {
				if(lacing[i] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n = this.input.readByte();
				if((n & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n >>= 1;
				var n1 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n1 < 16384 ? n1 < 16 ? log2_4[n1] : n1 < 512 ? 5 + log2_4[n1 >> 5] : 10 + log2_4[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_4[n1 >> 15] : 20 + log2_4[n1 >> 20] : n1 < 536870912 ? 25 + log2_4[n1 >> 25] : n1 < -2147483648 ? 30 + log2_4[n1 >> 30] : 0;
				n &= (1 << b) - 1;
				if(n >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n].blockflag;
				var len = lacing[i] - 1;
				this.inputPosition += len;
				var this1 = new Array(len);
				var vec = this1;
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var i1 = _g2++;
					vec[i1] = this.input.readByte();
				}
			} else {
				var len1 = lacing[i];
				this.inputPosition += len1;
				var this2 = new Array(len1);
				var vec1 = this2;
				var _g4 = 0;
				var _g5 = len1;
				while(_g4 < _g5) {
					var i2 = _g4++;
					vec1[i2] = this.input.readByte();
				}
			}
			packetStart = lacing[i] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i = numPacket - 2;
		while(i >= 1) {
			--i;
			if(packetType[i]) {
				if(packetType[i + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n = c.sortedEntries;
			while(n > 1) {
				var m = x + (n >> 1);
				if(UInt.gte(code,sortedCodewords[m])) {
					x = m;
					n -= n >> 1;
				} else {
					n >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",__constructs__:null
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_name:"NotFound",_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.__constructs__ = [kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found,kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound];
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this1 = new Array(header.channel);
	this.previousWindow = this1;
	var this1 = new Array(header.channel);
	this.finalY = this1;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		var this1 = this.channelBuffers;
		var this2 = new Array(header.blocksize1);
		var vec = this2;
		this1[i] = vec;
		var this3 = this.previousWindow;
		var this4 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this4;
		this3[i] = vec1;
		this.finalY[i] = [];
	}
	var this1 = new Array(2);
	this.a = this1;
	var this1 = new Array(2);
	this.b = this1;
	var this1 = new Array(2);
	this.c = this1;
	var this1 = new Array(2);
	this.window = this1;
	var this1 = new Array(2);
	this.bitReverseData = this1;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((UInt.toFloat(sampleRate) % UInt.toFloat(b) | 0) != 0) {
			throw haxe_Exception.thrown("Unsupported sampleRate : can't convert " + (this.header.sampleRate == null ? "null" : Std.string(UInt.toFloat(this.header.sampleRate))) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw haxe_Exception.thrown("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b = this.header.sampleRate;
		var sampleRepeat = UInt.toFloat(sampleRate) / UInt.toFloat(b) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g3 = sampleRepeat;
				while(_g2 < _g3) {
					var sr = _g2++;
					var _g4 = 0;
					var _g5 = this.header.channel;
					while(_g4 < _g5) {
						var i = _g4++;
						var _g6 = 0;
						var _g7 = channelRepeat;
						while(_g6 < _g7) {
							var cr = _g6++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output.setFloat32(index * 4,value,true);
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g = n;
		var _g1 = len;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g3 = sampleRepeat;
			while(_g2 < _g3) {
				var sr = _g2++;
				var _g4 = 0;
				var _g5 = this.header.channel;
				while(_g4 < _g5) {
					var i = _g4++;
					var _g6 = 0;
					var _g7 = channelRepeat;
					while(_g6 < _g7) {
						var cr = _g6++;
						if(useFloat) {
							output.setFloat32(index * 4,0,true);
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(UInt.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(UInt.toFloat(endOffset - startOffset) / UInt.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : UInt.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g1 = _g.end;
					var _g2 = _g.last;
					break;
				case 1:
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Object.create(kha_audio2_ogg_vorbis_VorbisDecoder.prototype);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var this1 = new Array(this.header.channel);
		decoder.channelBuffers = this1;
		var this1 = new Array(this.header.channel);
		decoder.previousWindow = this1;
		var this1 = new Array(this.header.channel);
		decoder.finalY = this1;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g3 = n;
				while(_g2 < _g3) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var pw = this.previousWindow[i];
			var cb = this.channelBuffers[i];
			var _g2 = 0;
			var _g3 = len - right;
			while(_g2 < _g3) {
				var j = _g2++;
				pw[j] = cb[right + j];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.b;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.c;
		var this2 = new Array(n4);
		this1[bs] = this2;
		var this1 = this.window;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.bitReverseData;
		var this2 = new Array(n8);
		this1[bs] = this2;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset + 4] - v40_20 * a[aaOffset + 5];
			u[dOffset1] = v40_20 * a[aaOffset + 4] + v41_21 * a[aaOffset + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset] - v40_20 * a[aaOffset + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset] + v41_21 * a[aaOffset + 1];
			aaOffset -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			u[eeOffset0] += u[eeOffset2];
			u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
			u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
			u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
			u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off = n2 - 1 - n4;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			u[eeOffset0] += u[eeOffset2];
			u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
			u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
			u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
			u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8 * 2;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8 * 3;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var _g = 2;
		var _g1 = ld - 3 >> 1;
		while(_g < _g1) {
			var l = _g++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g2 = 0;
			var _g3 = lim;
			while(_g2 < _g3) {
				var i = _g2++;
				var d0 = n2 - 1 - k0 * i;
				var k1 = 1 << l + 3;
				var aOffset = 0;
				var eOffset0 = d0;
				var eOffset2 = d0 + -k0_2;
				var i1 = (n >> l + 4 >> 2) + 1;
				while(--i1 > 0) {
					var k00_20 = u[eOffset0] - u[eOffset2];
					var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
					u[eOffset0] += u[eOffset2];
					u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
					u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
					k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
					u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
					u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
					u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
					k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
					u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
					u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
					u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
					k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
					u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
					u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
					u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					eOffset0 -= 8;
					eOffset2 -= 8;
					aOffset += k1;
				}
			}
		}
		var _g = ld - 3 >> 1;
		var _g1 = ld - 6;
		while(_g < _g1) {
			var l = _g++;
			var k0 = n >> l + 2;
			var k1 = 1 << l + 3;
			var k0_2 = k0 >> 1;
			var rlim = n >> l + 6;
			var lim = 1 << l + 1;
			var aOffset = 0;
			var i_off = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset];
				var A1 = a[aOffset + 1];
				var A2 = a[aOffset + k1];
				var A3 = a[aOffset + k1 + 1];
				var A4 = a[aOffset + k1 * 2];
				var A5 = a[aOffset + k1 * 2 + 1];
				var A6 = a[aOffset + k1 * 3];
				var A7 = a[aOffset + k1 * 3 + 1];
				var eeOffset0 = i_off;
				var eeOffset2 = i_off + -k0_2;
				var i = lim + 1;
				while(--i > 0) {
					var k00 = u[eeOffset0] - u[eeOffset2];
					var k11 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
					u[eeOffset0] += u[eeOffset2];
					u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
					u[eeOffset2] = k00 * A0 - k11 * A1;
					u[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
					k00 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
					k11 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
					u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
					u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
					u[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
					u[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
					k00 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
					k11 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
					u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
					u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
					u[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
					u[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
					k00 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
					k11 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
					u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
					u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
					u[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
					u[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
					eeOffset0 -= k0;
					eeOffset2 -= k0;
				}
				aOffset += k1 * 4;
				i_off -= 8;
			}
		}
		var i_off = n2 - 1;
		var A2 = a[n >> 3];
		var zOffset = i_off;
		var baseOffset = i_off - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + (-8)];
			u[zOffset + (-8)] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + (-1)];
			t1 = u[zOffset + (-9)];
			u[zOffset + (-9)] = t0 - t1;
			u[zOffset + (-1)] = t0 + t1;
			t0 = u[zOffset + (-2)];
			t1 = u[zOffset + (-10)];
			var k00 = t0 - t1;
			u[zOffset + (-2)] = t0 + t1;
			t0 = u[zOffset + (-3)];
			t1 = u[zOffset + (-11)];
			var k11 = t0 - t1;
			u[zOffset + (-3)] = t0 + t1;
			u[zOffset + (-10)] = (k00 + k11) * A2;
			u[zOffset + (-11)] = (k11 - k00) * A2;
			t0 = u[zOffset + (-4)];
			t1 = u[zOffset + (-12)];
			k00 = t1 - t0;
			u[zOffset + (-4)] = t0 + t1;
			t0 = u[zOffset + (-5)];
			t1 = u[zOffset + (-13)];
			k11 = t0 - t1;
			u[zOffset + (-5)] = t0 + t1;
			u[zOffset + (-12)] = k11;
			u[zOffset + (-13)] = k00;
			t0 = u[zOffset + (-6)];
			t1 = u[zOffset + (-14)];
			k00 = t1 - t0;
			u[zOffset + (-6)] = t0 + t1;
			t0 = u[zOffset + (-7)];
			t1 = u[zOffset + (-15)];
			k11 = t0 - t1;
			u[zOffset + (-7)] = t0 + t1;
			u[zOffset + (-14)] = (k00 + k11) * A2;
			u[zOffset + (-15)] = (k00 - k11) * A2;
			var t01 = u[zOffset];
			var t11 = u[zOffset + (-4)];
			var k001 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + (-2)];
			t11 = u[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + (-2)] = y0 - y2;
			var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
			u[zOffset + (-4)] = k001 + k33;
			u[zOffset + (-6)] = k001 - k33;
			t01 = u[zOffset + (-1)];
			t11 = u[zOffset + (-5)];
			var k111 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
			u[zOffset + (-1)] = y1 + y3;
			u[zOffset + (-3)] = y1 - y3;
			u[zOffset + (-5)] = k111 - k22;
			u[zOffset + (-7)] = k111 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + (-4)];
			var k002 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + (-2)];
			t12 = u[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + (-2)] = y01 - y21;
			var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
			u[zOffset1 + (-4)] = k002 + k331;
			u[zOffset1 + (-6)] = k002 - k331;
			t02 = u[zOffset1 + (-1)];
			t12 = u[zOffset1 + (-5)];
			var k112 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
			u[zOffset1 + (-1)] = y11 + y31;
			u[zOffset1 + (-3)] = y11 - y31;
			u[zOffset1 + (-5)] = k112 - k221;
			u[zOffset1 + (-7)] = k112 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset0 = n4 - 4;
		var dOffset1 = n2 - 4;
		while(dOffset0 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset1 + 3] = u[k4];
			v[dOffset1 + 2] = u[k4 + 1];
			v[dOffset0 + 3] = u[k4 + 2];
			v[dOffset0 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset1 + 1] = u[k4];
			v[dOffset1] = u[k4 + 1];
			v[dOffset0 + 1] = u[k4 + 2];
			v[dOffset0] = u[k4 + 3];
			dOffset0 -= 4;
			dOffset1 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset = 0;
		var eOffset = n2 - 4;
		while(dOffset < eOffset) {
			var a02 = v[dOffset] - v[eOffset + 2];
			var a11 = v[dOffset + 1] + v[eOffset + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset] + v[eOffset + 2];
			var b3 = v[dOffset + 1] - v[eOffset + 3];
			v[dOffset] = b2 + b0;
			v[dOffset + 1] = b3 + b1;
			v[eOffset + 2] = b2 - b0;
			v[eOffset + 3] = b1 - b3;
			a02 = v[dOffset + 2] - v[eOffset];
			a11 = v[dOffset + 3] + v[eOffset + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset + 2] + v[eOffset];
			b3 = v[dOffset + 3] - v[eOffset + 1];
			v[dOffset + 2] = b2 + b0;
			v[dOffset + 3] = b3 + b1;
			v[eOffset] = b2 - b0;
			v[eOffset + 1] = b1 - b3;
			cOffset += 4;
			dOffset += 4;
			eOffset -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset = n2 - 8;
		var dOffset0 = 0;
		var dOffset1 = n2 - 4;
		var dOffset2 = n2;
		var dOffset3 = n - 4;
		while(eOffset >= 0) {
			var p3 = buf2[eOffset + 6] * b[bOffset + 7] - buf2[eOffset + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset + 6] * b[bOffset + 6] - buf2[eOffset + 7] * b[bOffset + 7];
			buffer[dOffset0] = p3;
			buffer[dOffset1 + 3] = -p3;
			buffer[dOffset2] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset + 4] * b[bOffset + 5] - buf2[eOffset + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset + 4] * b[bOffset + 4] - buf2[eOffset + 5] * b[bOffset + 5];
			buffer[dOffset0 + 1] = p1;
			buffer[dOffset1 + 2] = -p1;
			buffer[dOffset2 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset + 2] * b[bOffset + 3] - buf2[eOffset + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset + 2] * b[bOffset + 2] - buf2[eOffset + 3] * b[bOffset + 3];
			buffer[dOffset0 + 2] = p3;
			buffer[dOffset1 + 1] = -p3;
			buffer[dOffset2 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset] * b[bOffset + 1] - buf2[eOffset + 1] * b[bOffset];
			p0 = -buf2[eOffset] * b[bOffset] - buf2[eOffset + 1] * b[bOffset + 1];
			buffer[dOffset0 + 3] = p1;
			buffer[dOffset1] = -p1;
			buffer[dOffset2 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset -= 8;
			dOffset0 += 4;
			dOffset2 += 4;
			dOffset1 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n;
		var prev;
		var next;
		if(m.blockflag) {
			n = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = next;
			n = this.header.blocksize0;
		}
		var windowCenter = n >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n - this.header.blocksize0 >> 2, end : n + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n * 3 - this.header.blocksize0 >> 2, end : n * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this1 = new Array(256);
		var reallyZeroChannel = this1;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var this1 = new Array(256);
					var step2Flag = this1;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g3 = g.partitions;
					while(_g2 < _g3) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g4 = 0;
						var _g5 = cdim;
						while(_g4 < _g5) {
							var k = _g4++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g6 = 2;
					var _g7 = g.values;
					while(_g6 < _g7) {
						var j1 = _g6++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g8 = 0;
					var _g9 = g.values;
					while(_g8 < _g9) {
						var j2 = _g8++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			reallyZeroChannel[i] = zeroChannel[i];
		}
		var _g = 0;
		var _g1 = map.couplingSteps;
		while(_g < _g1) {
			var i = _g++;
			if(!zeroChannel[map.chan[i].magnitude] || !zeroChannel[map.chan[i].angle]) {
				zeroChannel[map.chan[i].magnitude] = zeroChannel[map.chan[i].angle] = false;
			}
		}
		var _g = 0;
		var _g1 = map.submaps;
		while(_g < _g1) {
			var i = _g++;
			var this1 = new Array(this.header.channel);
			var residueBuffers = this1;
			var this2 = new Array(256);
			var doNotDecode = this2;
			var ch = 0;
			var _g2 = 0;
			var _g3 = this.header.channel;
			while(_g2 < _g3) {
				var j = _g2++;
				if(map.chan[j].mux == i) {
					if(zeroChannel[j]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i = map.couplingSteps;
		var n2 = n >> 1;
		while(--i >= 0) {
			var m1 = this.channelBuffers[map.chan[i].magnitude];
			var a = this.channelBuffers[map.chan[i].angle];
			var _g = 0;
			var _g1 = n2;
			while(_g < _g1) {
				var j = _g++;
				var a2;
				var m2;
				if(m1[j] > 0) {
					if(a[j] > 0) {
						m2 = m1[j];
						a2 = m1[j] - a[j];
					} else {
						a2 = m1[j];
						m2 = m1[j] + a[j];
					}
				} else if(a[j] > 0) {
					m2 = m1[j];
					a2 = m1[j] + a[j];
				} else {
					a2 = m1[j];
					m2 = m1[j] - a[j];
				}
				m1[j] = m2;
				a[j] = a2;
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			if(reallyZeroChannel[i]) {
				var _g2 = 0;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j = _g2++;
					this.channelBuffers[i][j] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i,n,this.channelBuffers[i],this.finalY[i],null);
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			this.inverseMdct(this.channelBuffers[i],n,m.blockflag);
		}
		var _this = this.decodeState;
		while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
			_this.bytesInSeg--;
			_this.inputPosition += 1;
			_this.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = UInt.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(UInt.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.57079632679489656 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		var n = i;
		n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
		n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
		n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
		n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
		rev[i] = (n >>> 16 | n << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k2 = 0;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var k = _g++;
		cf[k2] = Math.cos(2 * (k2 + 1) * 3.14159265358979323846264 / n);
		cf[k2 + 1] = -Math.sin(2 * (k2 + 1) * 3.14159265358979323846264 / n);
		k2 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this1 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this2 = new Array(64);
			this1[i] = this2;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	output[x] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g = x + 1;
	var _g1 = x1;
	while(_g < _g1) {
		var i = _g++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		output[i] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var this1 = new Array(source.length);
	var dest = this1;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength;
			}
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var j = _g++;
			var present = c.sparse ? decodeState.readBits(1) : 1;
			if(present != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var j = _g++;
			var l = lengths[j];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		var this1 = new Array(c.entries);
		c.codewords = this1;
	} else {
		if(c.sortedEntries != 0) {
			var this1 = new Array(c.sortedEntries);
			c.codewordLengths = this1;
			var this1 = new Array(c.entries);
			c.codewords = this1;
			var this1 = new Array(c.entries);
			values = this1;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this1 = new Array(c.sortedEntries);
		c.sortedValues = this1;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x = decodeState.readBits(32);
		var mantissa = UInt.toFloat(x & 2097151);
		var sign = x & -2147483648;
		var exp = (x & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x = decodeState.readBits(32);
		var mantissa = UInt.toFloat(x & 2097151);
		var sign = x & -2147483648;
		var exp = (x & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.deltaValue = res * Math.pow(2,exp - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this1 = new Array(c.lookupValues);
		var mults = this1;
		var _g = 0;
		var _g1 = c.lookupValues;
		while(_g < _g1) {
			var j = _g++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j] = q;
		}
		var this1 = new Array(c.lookupValues);
		c.multiplicands = this1;
		var _g = 0;
		var _g1 = c.lookupValues;
		while(_g < _g1) {
			var j = _g++;
			c.multiplicands[j] = mults[j] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g = 1;
			var _g1 = c.lookupValues;
			while(_g < _g1) {
				var j = _g++;
				c.multiplicands[j] = c.multiplicands[j - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count] = huffCode;
				this.codewordLengths[count] = len[i];
				values[count] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.sortedEntries;
			while(_g < _g1) {
				var i = _g++;
				var n = this.codewords[i];
				n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
				n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
				n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
				n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
				this.sortedCodewords[i] = n >>> 16 | n << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var huffLen = this.sparse ? lengths[values[i]] : lengths[i];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n = this.codewords[i];
				n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
				n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
				n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
				n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
				var code = n >>> 16 | n << 16;
				var x = 0;
				var n1 = this.sortedEntries;
				while(n1 > 1) {
					var m = x + (n1 >> 1);
					if(UInt.gte(code,this.sortedCodewords[m])) {
						x = m;
						n1 -= n1 >> 1;
					} else {
						n1 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(this.codewordLengths[i] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i;
					z += 1 << this.codewordLengths[i];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
				var val = multiplicands[off] + last;
				output[offset + i] += val;
				if(sequenceP) {
					last = val + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var val = multiplicands[z + i] + last;
				output[offset + i] += val;
				last = val + minimumValue;
			}
		} else {
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				output[offset + i] += multiplicands[z + i] + last;
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
				var val = multiplicands[off] + last;
				output[offset + i * step] += val;
				if(sequenceP) {
					last = val;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var val = multiplicands[z + i] + last;
			output[offset + i * step] += val;
			if(sequenceP) {
				last = val;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i1 = _g++;
						var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						residueBuffers[cInter][pInter] += val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g2 = 0;
					var _g3 = effective;
					while(_g2 < _g3) {
						var i2 = _g2++;
						var off1 = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						residueBuffers[cInter][pInter] += val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g4 = 0;
					var _g5 = effective;
					while(_g4 < _g5) {
						var i3 = _g4++;
						var val3 = multiplicands[z + i3] + last;
						residueBuffers[cInter][pInter] += val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g6 = 0;
					var _g7 = effective;
					while(_g6 < _g7) {
						var i4 = _g6++;
						var val4 = multiplicands[z + i4] + last;
						residueBuffers[cInter][pInter] += val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k = 0;
			while(k < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k)) {
					return false;
				}
				k += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			this.data.h[key].push(value);
		} else {
			var v = [value];
			this.data.h[key] = v;
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			return this.data.h[key][0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			return this.data.h[key];
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			g.bookList[j] = decodeState.readBits(8);
		}
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g.partitions = decodeState.readBits(5);
		var this1 = new Array(g.partitions);
		g.partitionClassList = this1;
		var _g = 0;
		var _g1 = g.partitions;
		while(_g < _g1) {
			var j = _g++;
			g.partitionClassList[j] = decodeState.readBits(4);
			if(g.partitionClassList[j] > maxClass) {
				maxClass = g.partitionClassList[j];
			}
		}
		var this1 = new Array(maxClass + 1);
		g.classDimensions = this1;
		var this1 = new Array(maxClass + 1);
		g.classMasterbooks = this1;
		var this1 = new Array(maxClass + 1);
		g.classSubclasses = this1;
		var this1 = new Array(maxClass + 1);
		g.subclassBooks = this1;
		var _g = 0;
		var _g1 = maxClass + 1;
		while(_g < _g1) {
			var j = _g++;
			g.classDimensions[j] = decodeState.readBits(3) + 1;
			g.classSubclasses[j] = decodeState.readBits(2);
			if(g.classSubclasses[j] != 0) {
				g.classMasterbooks[j] = decodeState.readBits(8);
				if(g.classMasterbooks[j] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g.classSubclasses[j];
			var this1 = g.subclassBooks;
			var this2 = new Array(kl);
			this1[j] = this2;
			var _g2 = 0;
			var _g3 = kl;
			while(_g2 < _g3) {
				var k = _g2++;
				g.subclassBooks[j][k] = decodeState.readBits(8) - 1;
				if(g.subclassBooks[j][k] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g.floor1Multiplier = decodeState.readBits(2) + 1;
		g.rangebits = decodeState.readBits(4);
		var this1 = new Array(250);
		g.xlist = this1;
		g.xlist[0] = 0;
		g.xlist[1] = 1 << g.rangebits;
		g.values = 2;
		var _g = 0;
		var _g1 = g.partitions;
		while(_g < _g1) {
			var j = _g++;
			var c = g.partitionClassList[j];
			var _g2 = 0;
			var _g3 = g.classDimensions[c];
			while(_g2 < _g3) {
				var k = _g2++;
				g.xlist[g.values] = decodeState.readBits(g.rangebits);
				g.values++;
			}
		}
		var _g = 0;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j].x = g.xlist[j];
			p[j].y = j;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var this1 = new Array(g.values);
		g.sortedOrder = this1;
		var _g = 0;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			g.sortedOrder[j] = p[j].y;
		}
		var this1 = new Array(g.values);
		g.neighbors = this1;
		var _g = 2;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			var x = g.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g2 = 0;
			var _g3 = j;
			while(_g2 < _g3) {
				var i = _g2++;
				if(x[i] > low && x[i] < x[j]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this1 = g.neighbors;
			var this2 = new Array(g.values);
			this1[j] = this2;
			g.neighbors[j][0] = ne_low;
			g.neighbors[j][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x;
	if(header.toString() != "vorbis") {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header.channel = decodeState.input.readByte();
	if(header.channel == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header.channel > 16) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header.sampleRate = decodeState.input.readInt32();
	if(header.sampleRate == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x = decodeState.input.readByte();
	var log0 = x & 15;
	var log1 = x >> 4;
	header.blocksize0 = 1 << log0;
	header.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x = decodeState.input.readByte();
	if((x & 1) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header.vendor = packetInput.readString(vendorLength);
	header.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x1 = packetInput.readByte();
	if((x1 & 1) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x1 != 5) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[0] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[1] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[2] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[3] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[4] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[5] = x1;
	if(header1.toString() != "vorbis") {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	var this1 = new Array(codebookCount);
	header.codebooks = this1;
	var _g = 0;
	var _g1 = codebookCount;
	while(_g < _g1) {
		var i = _g++;
		header.codebooks[i] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	x = decodeState.readBits(6) + 1;
	var _g = 0;
	var _g1 = x;
	while(_g < _g1) {
		var i = _g++;
		if(decodeState.readBits(16) != 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	var this1 = new Array(floorCount);
	header.floorConfig = this1;
	var _g = 0;
	var _g1 = floorCount;
	while(_g < _g1) {
		var i = _g++;
		header.floorConfig[i] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header.codebooks);
	}
	var residueCount = decodeState.readBits(6) + 1;
	var this1 = new Array(residueCount);
	header.residueConfig = this1;
	var _g = 0;
	var _g1 = residueCount;
	while(_g < _g1) {
		var i = _g++;
		header.residueConfig[i] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header.codebooks);
	}
	var mappingCount = decodeState.readBits(6) + 1;
	var this1 = new Array(mappingCount);
	header.mapping = this1;
	var _g = 0;
	var _g1 = mappingCount;
	while(_g < _g1) {
		var i = _g++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header.channel);
		header.mapping[i] = map;
		var _g2 = 0;
		var _g3 = map.submaps;
		while(_g2 < _g3) {
			var j = _g2++;
			if(map.submapFloor[j] >= header.floorConfig.length) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header.residueConfig.length) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	var this1 = new Array(modeCount);
	header.modes = this1;
	var _g = 0;
	var _g1 = modeCount;
	while(_g < _g1) {
		var i = _g++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header.modes[i] = mode;
		if(mode.mapping >= header.mapping.length) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g = 0;
		var _g1 = m.couplingSteps;
		while(_g < _g1) {
			var k = _g++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g = 0;
		var _g1 = channels;
		while(_g < _g1) {
			var j = _g++;
			m.chan[j].mux = decodeState.readBits(4);
			if(m.chan[j].mux >= m.submaps) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g = 0;
		var _g1 = channels;
		while(_g < _g1) {
			var j = _g++;
			m.chan[j].mux = 0;
		}
	}
	var this1 = new Array(m.submaps);
	m.submapFloor = this1;
	var this1 = new Array(m.submaps);
	m.submapResidue = this1;
	var _g = 0;
	var _g1 = m.submaps;
	while(_g < _g1) {
		var j = _g++;
		decodeState.readBits(8);
		m.submapFloor[j] = decodeState.readBits(8);
		m.submapResidue[j] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor = floors[this.submapFloor[s]];
		if(floor.type == 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g = lx;
				var _g1 = n2;
				while(_g < _g1) {
					var j = _g++;
					target[j] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = "kha.audio2.ogg.vorbis.data.PageFlag";
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",__constructs__:null
	,NEED_MORE_DATA: {_hx_name:"NEED_MORE_DATA",_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_name:"INVALID_API_MIXING",_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_name:"OUTOFMEM",_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_name:"FEATURE_NOT_SUPPORTED",_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_name:"TOO_MANY_CHANNELS",_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_name:"FILE_OPEN_FAILURE",_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_name:"SEEK_WITHOUT_LENGTH",_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_name:"UNEXPECTED_EOF",_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_name:"SEEK_INVALID",_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_name:"INVALID_SETUP",_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_name:"INVALID_STREAM",_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_name:"MISSING_CAPTURE_PATTERN",_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_name:"INVALID_STREAM_STRUCTURE_VERSION",_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_name:"CONTINUED_PACKET_FLAG_INVALID",_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_name:"INCORRECT_STREAM_SERIAL_NUMBER",_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_name:"INVALID_FIRST_PAGE",_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_name:"BAD_PACKET_TYPE",_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_name:"CANT_FIND_LAST_PAGE",_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_name:"SEEK_FAILED",_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_name:"OTHER",_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
kha_audio2_ogg_vorbis_data_ReaderErrorType.__constructs__ = [kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING,kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM,kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH,kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE,kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER];
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this1 = new Array(r.classifications);
	r.residueBooks = this1;
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var this1 = r.residueBooks;
		var this2 = new Array(8);
		this1[j] = this2;
		var _g2 = 0;
		while(_g2 < 8) {
			var k = _g2++;
			if((residueCascade[j] & 1 << k) != 0) {
				r.residueBooks[j][k] = decodeState.readBits(8);
				if(r.residueBooks[j][k] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this1 = new Array(el);
	r.classdata = this1;
	var _g = 0;
	var _g1 = el;
	while(_g < _g1) {
		var j = _g++;
		var temp = j;
		var k = classwords;
		var this1 = r.classdata;
		var this2 = new Array(classwords);
		var cd = this1[j] = this2;
		while(--k >= 0) {
			cd[k] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = UInt.toFloat(nRead) / UInt.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead + 1);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g3 = buffer.length;
				while(_g2 < _g3) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g = 0;
			var _g1 = ch;
			while(_g < _g1) {
				var j = _g++;
				if(!doNotDecode[j]) {
					break;
				} else if(j == ch - 1) {
					return;
				}
			}
			var _g = 0;
			while(_g < 8) {
				var pass = _g++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i >= 0) {
								var l = c.codewordLengths[i];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i1 = classwords;
							while(--i1 >= 0) {
								classifications[i1 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g1 = 0;
						var _g2 = classwords;
						while(_g1 < _g2) {
							var i2 = _g1++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i3 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i3 >= 0) {
								var l1 = c2.codewordLengths[i3];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i3;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i4 = classwords;
							while(--i4 >= 0) {
								classifications[i4 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g3 = 0;
						var _g4 = classwords;
						while(_g3 < _g4) {
							var i5 = _g3++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = UInt.toFloat(z4) % UInt.toFloat(ch) | 0;
						var pInter2 = UInt.toFloat(z4) / UInt.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i6 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i6 >= 0) {
								var l2 = c3.codewordLengths[i6];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i6;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i7 = classwords;
							while(--i7 >= 0) {
								classifications[i7 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g5 = 0;
						var _g6 = classwords;
						while(_g5 < _g6) {
							var i8 = _g5++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = UInt.toFloat(z5) % UInt.toFloat(ch) | 0;
								pInter2 = UInt.toFloat(z5) / UInt.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g = 0;
		while(_g < 8) {
			var pass = _g++;
			var pcount = 0;
			var classSet = 0;
			while(pcount < partRead) {
				if(pass == 0) {
					var _g1 = 0;
					var _g2 = ch;
					while(_g1 < _g2) {
						var j = _g1++;
						if(!doNotDecode[j]) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i >= 0) {
								var l = c.codewordLengths[i];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var temp = val;
							if(temp == -1) {
								return;
							}
							var i1 = classwords;
							while(--i1 >= 0) {
								classifications[j * partRead + i1 + pcount] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g3 = 0;
				var _g4 = classwords;
				while(_g3 < _g4) {
					var i2 = _g3++;
					if(pcount >= partRead) {
						break;
					}
					var _g5 = 0;
					var _g6 = ch;
					while(_g5 < _g6) {
						var j1 = _g5++;
						if(!doNotDecode[j1]) {
							var c1 = classifications[j1 * partRead + pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var target = residueBuffers[j1];
								var offset = this.begin + pcount * partSize;
								var n = partSize;
								var book = codebooks[b];
								if(!book.residueDecode(decodeState,target,offset,n,this.type)) {
									return;
								}
							}
						}
					}
					++pcount;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = "kha.audio2.ogg.vorbis.data.Setting";
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.__isInterface__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return 0;
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_mipmapScaleQuality: function() {
		return 0;
	}
	,set_mipmapScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,popTransformation: function() {
		this.transformationIndex--;
		if(this.transformationIndex == -1) {
			throw haxe_Exception.thrown("There is no transformation matrix to remove, check your push/popTransformation code");
		}
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = x;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = y;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushScale: function(x,y) {
		var _this__00 = x;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = y;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var mat__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var mat__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var mat__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var mat__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var mat__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var mat__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var mat__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var mat__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var mat__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = mat__00;
		_this._10 = mat__10;
		_this._20 = mat__20;
		_this._01 = mat__01;
		_this._11 = mat__11;
		_this._21 = mat__21;
		_this._02 = mat__02;
		_this._12 = mat__12;
		_this._22 = mat__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,translation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,rotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin(false);
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_stride() + x * 4,kha_Color.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = "kha.graphics2.GraphicsExtension";
kha_graphics2_GraphicsExtension.drawArc = function(g2,cx,cy,radius,sAngle,eAngle,strength,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawArc(cx,cy,radius,sAngle,eAngle,strength,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.fillArc = function(g2,cx,cy,radius,sAngle,eAngle,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillArc(cx,cy,radius,sAngle,eAngle,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var sx = x + cx;
	var sy = y + cy;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,sx,sy);
	}
};
kha_graphics2_GraphicsExtension.drawCircle = function(g2,cx,cy,radius,strength,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawCircle(cx,cy,radius,strength);
		return;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.drawInnerLine = function(g2,x1,y1,x2,y2,strength) {
	var side = y2 > y1 ? 1 : 0;
	if(y2 == y1) {
		side = x2 - x1 > 0 ? 1 : 0;
	}
	var vec_x = 0;
	var vec_y = 0;
	if(y2 == y1) {
		var x = 0;
		var y = -1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v_x = x;
		var v_y = y;
		vec_x = v_x;
		vec_y = v_y;
	} else {
		var x = 1;
		var y = -(x2 - x1) / (y2 - y1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v_x = x;
		var v_y = y;
		vec_x = v_x;
		vec_y = v_y;
	}
	var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
	if(currentLength != 0) {
		var mul = strength / currentLength;
		vec_x *= mul;
		vec_y *= mul;
	}
	var x = x1 + side * vec_x;
	var y = y1 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p1_x = x;
	var p1_y = y;
	var x = x2 + side * vec_x;
	var y = y2 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p2_x = x;
	var p2_y = y;
	var x = p1_x - vec_x;
	var y = p1_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p3_x = x;
	var p3_y = y;
	var x = p2_x - vec_x;
	var y = p2_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p4_x = x;
	var p4_y = y;
	g2.fillTriangle(p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	g2.fillTriangle(p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
};
kha_graphics2_GraphicsExtension.fillCircle = function(g2,cx,cy,radius,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillCircle(cx,cy,radius);
		return;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,cx,cy);
	}
};
kha_graphics2_GraphicsExtension.drawPolygon = function(g2,x,y,vertices,strength) {
	if(strength == null) {
		strength = 1;
	}
	var iterator_current = 0;
	var iterator_array = vertices;
	var v0 = iterator_array[iterator_current++];
	var v1 = v0;
	while(iterator_current < iterator_array.length) {
		var v2 = iterator_array[iterator_current++];
		g2.drawLine(v1.x + x,v1.y + y,v2.x + x,v2.y + y,strength);
		v1 = v2;
	}
	g2.drawLine(v1.x + x,v1.y + y,v0.x + x,v0.y + y,strength);
};
kha_graphics2_GraphicsExtension.fillPolygon = function(g2,x,y,vertices) {
	var iterator_current = 0;
	var iterator_array = vertices;
	if(iterator_current >= iterator_array.length) {
		return;
	}
	var v0 = iterator_array[iterator_current++];
	if(iterator_current >= iterator_array.length) {
		return;
	}
	var v1 = iterator_array[iterator_current++];
	while(iterator_current < iterator_array.length) {
		var v2 = iterator_array[iterator_current++];
		g2.fillTriangle(v0.x + x,v0.y + y,v1.x + x,v1.y + y,v2.x + x,v2.y + y);
		v1 = v2;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezier = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var t;
	var q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,x,y);
	var q1;
	var _g = 1;
	var _g1 = segments + 1;
	while(_g < _g1) {
		var i = _g++;
		t = i / segments;
		q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,x,y);
		g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
		q0 = q1;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezierPath = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var i = 0;
	var t;
	var q0 = null;
	var q1 = null;
	while(i < x.length - 3) {
		if(i == 0) {
			q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
		}
		var _g = 1;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var j = _g++;
			t = j / segments;
			q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
			g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
			q0 = q1;
		}
		i += 3;
	}
};
kha_graphics2_GraphicsExtension.calculateCubicBezierPoint = function(t,x,y) {
	var u = 1 - t;
	var tt = t * t;
	var uu = u * u;
	var uuu = uu * u;
	var ttt = tt * t;
	var p = [uuu * x[0],uuu * y[0]];
	p[0] += 3 * uu * t * x[1];
	p[1] += 3 * uu * t * y[1];
	p[0] += 3 * u * tt * x[2];
	p[1] += 3 * u * tt * y[2];
	p[0] += ttt * x[3];
	p[1] += ttt * y[3];
	return p;
};
kha_graphics2_GraphicsExtension.drawAlignedString = function(g2,text,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().width(g2.get_fontSize(),text);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawString(text,x + xoffset,y + yoffset);
};
kha_graphics2_GraphicsExtension.drawAlignedCharacters = function(g2,text,start,length,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().widthOfCharacters(g2.get_fontSize(),text,start,length);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawCharacters(text,start,length,x + xoffset,y + yoffset);
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = "kha.graphics2.truetype.Stbtt_temp_region";
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$_$buf = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__buf"] = kha_graphics2_truetype_Stbtt_$_$buf;
kha_graphics2_truetype_Stbtt_$_$buf.__name__ = "kha.graphics2.truetype.Stbtt__buf";
kha_graphics2_truetype_Stbtt_$_$buf.prototype = {
	data: null
	,cursor: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$buf
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = "kha.graphics2.truetype.Stbtt_aligned_quad";
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = "kha.graphics2.truetype.Stbtt_packedchar";
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = "kha.graphics2.truetype.Stbtt_pack_range";
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = "kha.graphics2.truetype.Stbtt_pack_context";
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,gpos: null
	,index_map: null
	,indexToLocFormat: null
	,cff: null
	,charstrings: null
	,gsubrs: null
	,subrs: null
	,fontdicts: null
	,fdselect: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,cx1: null
	,cy1: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_Stbtt_$_$csctx = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__csctx"] = kha_graphics2_truetype_Stbtt_$_$csctx;
kha_graphics2_truetype_Stbtt_$_$csctx.__name__ = "kha.graphics2.truetype.Stbtt__csctx";
kha_graphics2_truetype_Stbtt_$_$csctx.prototype = {
	bounds: null
	,started: null
	,first_x: null
	,first_y: null
	,x: null
	,y: null
	,min_x: null
	,min_y: null
	,max_x: null
	,max_y: null
	,pvertices: null
	,num_vertices: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$csctx
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw haxe_Exception.thrown("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor++;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_peek8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_seek = function(b,o) {
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_skip = function(b,o) {
	var o1 = b.cursor + o;
	if(o1 > b.data.get_length() || o1 < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get = function(b,n) {
	var v = 0;
	if(!(n >= 1 && n <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__new_buf = function(p,size) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	if(size >= 1073741824) {
		throw haxe_Exception.thrown("Error");
	}
	r.data = p;
	r.cursor = 0;
	return r;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get16 = function(b) {
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get32 = function(b) {
	var v = 0;
	var _g = 0;
	var _g1 = 4;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_range = function(b,o,s) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		return r1;
	}
	r1.data = b.data.sub(o,s);
	return r1;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_get_index = function(b) {
	var start = b.cursor;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	if(count > 0) {
		var offsize;
		if(b.cursor >= b.data.get_length()) {
			offsize = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = b.data.readU8(pos);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = b.cursor + offsize * count;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var o = b.cursor + (v - 1);
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var s = b.cursor - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
			return r1;
		} else {
			r1.data = b.data.sub(start,s);
			return r1;
		}
	}
	return b;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_int = function(b) {
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 >= 32 && b0 <= 246) {
		return b0 - 139;
	} else if(b0 >= 247 && b0 <= 250) {
		var tmp;
		if(b.cursor >= b.data.get_length()) {
			tmp = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			tmp = b.data.readU8(pos);
		}
		return (b0 - 247) * 256 + tmp + 108;
	} else if(b0 >= 251 && b0 <= 254) {
		var tmp;
		if(b.cursor >= b.data.get_length()) {
			tmp = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			tmp = b.data.readU8(pos);
		}
		return -(b0 - 251) * 256 - tmp - 108;
	} else if(b0 == 28) {
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		return v;
	} else if(b0 == 29) {
		var v = 0;
		var _g = 0;
		var _g1 = 4;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		return v;
	} else {
		throw haxe_Exception.thrown("Error");
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_skip_operand = function(b) {
	var v;
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 < 28) {
		throw haxe_Exception.thrown("Error");
	}
	if(b0 == 30) {
		var o = b.cursor + 1;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		while(b.cursor < b.data.get_length()) {
			if(b.cursor >= b.data.get_length()) {
				v = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v = b.data.readU8(pos);
			}
			if((v & 15) == 15 || v >> 4 == 15) {
				break;
			}
		}
	} else {
		var b0;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = b.data.readU8(pos);
		}
		if(!(b0 >= 32 && b0 <= 246)) {
			if(b0 >= 247 && b0 <= 250) {
				if(b.cursor < b.data.get_length()) {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b.data.readU8(pos);
				}
			} else if(b0 >= 251 && b0 <= 254) {
				if(b.cursor < b.data.get_length()) {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b.data.readU8(pos);
				}
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
			} else if(b0 == 29) {
				var v = 0;
				var _g = 0;
				var _g1 = 4;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
			} else {
				throw haxe_Exception.thrown("Error");
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get = function(b,key) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							b.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							b.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i = _g++;
							var v2;
							if(b.cursor >= b.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = b.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var v4;
							if(b.cursor >= b.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = b.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = b.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	if(ret != null) {
		return ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			return r1;
		} else {
			r1.data = b.data.sub(0,0);
			return r1;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get_ints = function(b,key,outcount,out) {
	var i = 0;
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							b.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							b.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(b.cursor >= b.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = b.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(b.cursor >= b.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = b.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = b.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			operands = r1;
		} else {
			r1.data = b.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < outcount && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		out[i] = tmp;
		++i;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_count = function(b) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_get = function(b,i) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i1 = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b.data.readU8(pos);
	}
	if(!(i >= 0 && i < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b.cursor + i * offsize;
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		return r1;
	} else {
		r1.data = b.data.sub(o,s);
		return r1;
	}
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.to_stbtt_uint16 = function(value) {
	return value & 65535;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c0 = HxOverrides.cca("OTTO",0);
	var c1 = HxOverrides.cca("OTTO",1);
	var c2 = HxOverrides.cca("OTTO",2);
	var c3 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("true",0);
	var c1 = HxOverrides.cca("true",1);
	var c2 = HxOverrides.cca("true",2);
	var c3 = HxOverrides.cca("true",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos = loc + 8;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var pos = 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = font_collection.readU8(pos1);
		var ch2 = font_collection.readU8(pos1 + 1);
		var ch3 = font_collection.readU8(pos1 + 2);
		var ch4 = font_collection.readU8(pos1 + 3);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var pos = 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			tmp = (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var pos = 8;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = font_collection.readU8(pos);
			var ch2 = font_collection.readU8(pos + 1);
			var ch3 = font_collection.readU8(pos + 2);
			var ch4 = font_collection.readU8(pos + 3);
			var n = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
			if(index >= n) {
				return -1;
			}
			var pos = 12 + index * 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetNumberOfFonts = function(font_collection) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		return 1;
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var pos = 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = font_collection.readU8(pos1);
		var ch2 = font_collection.readU8(pos1 + 1);
		var ch3 = font_collection.readU8(pos1 + 2);
		var ch4 = font_collection.readU8(pos1 + 3);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var pos = 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			tmp = (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var pos = 8;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = font_collection.readU8(pos);
			var ch2 = font_collection.readU8(pos + 1);
			var ch3 = font_collection.readU8(pos + 2);
			var ch4 = font_collection.readU8(pos + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subrs = function(cff,fontdict) {
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = fontdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = fontdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = fontdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = fontdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = fontdict.cursor + 1;
				if(o > fontdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				fontdict.cursor = o > fontdict.data.get_length() || o < 0 ? fontdict.data.get_length() : o;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = fontdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = fontdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = fontdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = fontdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos4 = fontdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							fontdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos5 = fontdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							fontdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = fontdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = fontdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = fontdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = fontdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = fontdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = fontdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = fontdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = fontdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > fontdict.data.get_length() || s > fontdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = fontdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = fontdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		private_loc[i] = tmp;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	var o = private_loc[1];
	var s = private_loc[0];
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	var pdict;
	if(o < 0 || s < 0 || o > cff.data.get_length() || s > cff.data.get_length() - o) {
		pdict = r1;
	} else {
		r1.data = cff.data.sub(o,s);
		pdict = r1;
	}
	var i = 0;
	if(0 > pdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
	var ret = null;
	while(pdict.cursor < pdict.data.get_length()) {
		var start = pdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(pdict.cursor >= pdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = pdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = pdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(pdict.cursor >= pdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = pdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = pdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = pdict.cursor + 1;
				if(o > pdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
				while(pdict.cursor < pdict.data.get_length()) {
					if(pdict.cursor >= pdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = pdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = pdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(pdict.cursor >= pdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = pdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = pdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos4 = pdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							pdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos5 = pdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							pdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(pdict.cursor >= pdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = pdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = pdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(pdict.cursor >= pdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = pdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = pdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = pdict.cursor;
		if(pdict.cursor >= pdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = pdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = pdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(pdict.cursor >= pdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = pdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = pdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 19) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = pdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = pdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 1 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		subrsoff[i] = tmp;
		++i;
	}
	if(subrsoff[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	var o = private_loc[1] + subrsoff[0];
	if(o > cff.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
	var start = cff.cursor;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(cff.cursor >= cff.data.get_length()) {
			v1 = 0;
		} else {
			var pos = cff.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = cff.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	if(count > 0) {
		var offsize;
		if(cff.cursor >= cff.data.get_length()) {
			offsize = 0;
		} else {
			var pos = cff.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = cff.data.readU8(pos);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = cff.cursor + offsize * count;
		if(o > cff.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(cff.cursor >= cff.data.get_length()) {
				v1 = 0;
			} else {
				var pos = cff.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = cff.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var o = cff.cursor + (v - 1);
		if(o > cff.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
		var s = cff.cursor - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(start < 0 || s < 0 || start > cff.data.get_length() || s > cff.data.get_length() - start) {
			return r1;
		} else {
			r1.data = cff.data.sub(start,s);
			return r1;
		}
	} else {
		return cff;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	info.cff = r;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	info.gpos = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"GPOS");
	if(cmap == 0 || info.head == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	if(info.glyf != 0) {
		if(info.loca == 0) {
			return false;
		}
	} else {
		var topdict;
		var topdictidx;
		var cstype = [2];
		var charstrings = [0];
		var fdarrayoff = [0];
		var fdselectoff = [0];
		var cff = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"CFF ");
		if(cff == 0) {
			return false;
		}
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fontdicts = r;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fdselect = r;
		var cff_data = data.sub(cff,data.get_length() - cff);
		var size = cff_data.get_length();
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		if(size >= 1073741824) {
			throw haxe_Exception.thrown("Error");
		}
		r.data = cff_data;
		r.cursor = 0;
		info.cff = r;
		var b = info.cff;
		var o = b.cursor + 2;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var o;
		if(b.cursor >= b.data.get_length()) {
			o = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			o = b.data.readU8(pos);
		}
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r1.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				topdictidx = r1;
			} else {
				r1.data = b.data.sub(start,s);
				topdictidx = r1;
			}
		} else {
			topdictidx = b;
		}
		if(0 > topdictidx.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = 0 > topdictidx.data.get_length() ? topdictidx.data.get_length() : 0;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var offsize;
		if(topdictidx.cursor >= topdictidx.data.get_length()) {
			offsize = 0;
		} else {
			var pos = topdictidx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = topdictidx.data.readU8(pos);
		}
		if(0 >= count) {
			throw haxe_Exception.thrown("Error");
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = topdictidx.cursor + 0 * offsize;
		if(o > topdictidx.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = o > topdictidx.data.get_length() || o < 0 ? topdictidx.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var start = v;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var end = v;
		var o = 2 + (count + 1) * offsize + start;
		var s = end - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(o < 0 || s < 0 || o > topdictidx.data.get_length() || s > topdictidx.data.get_length() - o) {
			topdict = r1;
		} else {
			r1.data = topdictidx.data.sub(o,s);
			topdict = r1;
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r1.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(start,s);
				tmp = r1;
			}
		} else {
			tmp = b;
		}
		info.gsubrs = tmp;
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 17) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			charstrings[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 262) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			cstype[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 292) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdarrayoff[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 293) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdselectoff[i] = tmp;
			++i;
		}
		var subrsoff = [0];
		var private_loc = [0,0];
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 18) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 2 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			private_loc[i] = tmp;
			++i;
		}
		var tmp;
		if(private_loc[1] == 0 || private_loc[0] == 0) {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			tmp = r;
		} else {
			var o = private_loc[1];
			var s = private_loc[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			var pdict;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				pdict = r1;
			} else {
				r1.data = b.data.sub(o,s);
				pdict = r1;
			}
			var i = 0;
			if(0 > pdict.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
			var ret = null;
			while(pdict.cursor < pdict.data.get_length()) {
				var start = pdict.cursor;
				var op;
				while(true) {
					var tmp1;
					if(pdict.cursor >= pdict.data.get_length()) {
						tmp1 = 0;
					} else {
						var pos = pdict.cursor;
						if(pos == null) {
							pos = 0;
						}
						tmp1 = pdict.data.readU8(pos);
					}
					if(!(tmp1 >= 28)) {
						break;
					}
					var v;
					var b0;
					if(pdict.cursor >= pdict.data.get_length()) {
						b0 = 0;
					} else {
						var pos1 = pdict.cursor;
						if(pos1 == null) {
							pos1 = 0;
						}
						b0 = pdict.data.readU8(pos1);
					}
					if(b0 < 28) {
						throw haxe_Exception.thrown("Error");
					}
					if(b0 == 30) {
						var o = pdict.cursor + 1;
						if(o > pdict.data.get_length() || o < 0) {
							throw haxe_Exception.thrown("Error");
						}
						pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
						while(pdict.cursor < pdict.data.get_length()) {
							if(pdict.cursor >= pdict.data.get_length()) {
								v = 0;
							} else {
								var pos2 = pdict.cursor++;
								if(pos2 == null) {
									pos2 = 0;
								}
								v = pdict.data.readU8(pos2);
							}
							if((v & 15) == 15 || v >> 4 == 15) {
								break;
							}
						}
					} else {
						var b01;
						if(pdict.cursor >= pdict.data.get_length()) {
							b01 = 0;
						} else {
							var pos3 = pdict.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							b01 = pdict.data.readU8(pos3);
						}
						if(!(b01 >= 32 && b01 <= 246)) {
							if(b01 >= 247 && b01 <= 250) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos4 = pdict.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									pdict.data.readU8(pos4);
								}
							} else if(b01 >= 251 && b01 <= 254) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos5 = pdict.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									pdict.data.readU8(pos5);
								}
							} else if(b01 == 28) {
								var v1 = 0;
								var _g = 0;
								var _g1 = 2;
								while(_g < _g1) {
									var i1 = _g++;
									var v2;
									if(pdict.cursor >= pdict.data.get_length()) {
										v2 = 0;
									} else {
										var pos6 = pdict.cursor++;
										if(pos6 == null) {
											pos6 = 0;
										}
										v2 = pdict.data.readU8(pos6);
									}
									v1 = v1 << 8 | v2;
								}
							} else if(b01 == 29) {
								var v3 = 0;
								var _g2 = 0;
								var _g3 = 4;
								while(_g2 < _g3) {
									var i2 = _g2++;
									var v4;
									if(pdict.cursor >= pdict.data.get_length()) {
										v4 = 0;
									} else {
										var pos7 = pdict.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										v4 = pdict.data.readU8(pos7);
									}
									v3 = v3 << 8 | v4;
								}
							} else {
								throw haxe_Exception.thrown("Error");
							}
						}
					}
				}
				var end = pdict.cursor;
				if(pdict.cursor >= pdict.data.get_length()) {
					op = 0;
				} else {
					var pos8 = pdict.cursor++;
					if(pos8 == null) {
						pos8 = 0;
					}
					op = pdict.data.readU8(pos8);
				}
				if(op == 12) {
					var op1;
					if(pdict.cursor >= pdict.data.get_length()) {
						op1 = 0;
					} else {
						var pos9 = pdict.cursor++;
						if(pos9 == null) {
							pos9 = 0;
						}
						op1 = pdict.data.readU8(pos9);
					}
					op = op1 | 256;
				}
				if(op == 19) {
					var s = end - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					var r1 = r;
					if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
						ret = r1;
					} else {
						r1.data = pdict.data.sub(start,s);
						ret = r1;
					}
					break;
				}
			}
			var operands;
			if(ret != null) {
				operands = ret;
			} else {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
					operands = r1;
				} else {
					r1.data = pdict.data.sub(0,0);
					operands = r1;
				}
			}
			while(i < 1 && operands.cursor < operands.data.get_length()) {
				var b0;
				if(operands.cursor >= operands.data.get_length()) {
					b0 = 0;
				} else {
					var pos = operands.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b0 = operands.data.readU8(pos);
				}
				var tmp1;
				if(b0 >= 32 && b0 <= 246) {
					tmp1 = b0 - 139;
				} else if(b0 >= 247 && b0 <= 250) {
					var tmp2;
					if(operands.cursor >= operands.data.get_length()) {
						tmp2 = 0;
					} else {
						var pos1 = operands.cursor++;
						if(pos1 == null) {
							pos1 = 0;
						}
						tmp2 = operands.data.readU8(pos1);
					}
					tmp1 = (b0 - 247) * 256 + tmp2 + 108;
				} else if(b0 >= 251 && b0 <= 254) {
					var tmp3;
					if(operands.cursor >= operands.data.get_length()) {
						tmp3 = 0;
					} else {
						var pos2 = operands.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						tmp3 = operands.data.readU8(pos2);
					}
					tmp1 = -(b0 - 251) * 256 - tmp3 - 108;
				} else if(b0 == 28) {
					var v = 0;
					var _g = 0;
					var _g1 = 2;
					while(_g < _g1) {
						var i1 = _g++;
						var v1;
						if(operands.cursor >= operands.data.get_length()) {
							v1 = 0;
						} else {
							var pos3 = operands.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							v1 = operands.data.readU8(pos3);
						}
						v = v << 8 | v1;
					}
					tmp1 = v;
				} else if(b0 == 29) {
					var v2 = 0;
					var _g2 = 0;
					var _g3 = 4;
					while(_g2 < _g3) {
						var i2 = _g2++;
						var v3;
						if(operands.cursor >= operands.data.get_length()) {
							v3 = 0;
						} else {
							var pos4 = operands.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							v3 = operands.data.readU8(pos4);
						}
						v2 = v2 << 8 | v3;
					}
					tmp1 = v2;
				} else {
					throw haxe_Exception.thrown("Error");
				}
				subrsoff[i] = tmp1;
				++i;
			}
			if(subrsoff[0] == 0) {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				tmp = r;
			} else {
				var o = private_loc[1] + subrsoff[0];
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var start = b.cursor;
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var count = v;
				if(count > 0) {
					var offsize;
					if(b.cursor >= b.data.get_length()) {
						offsize = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						offsize = b.data.readU8(pos);
					}
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var o = b.cursor + offsize * count;
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var v = 0;
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var _g = 0;
					var _g1 = offsize;
					while(_g < _g1) {
						var i = _g++;
						var v1;
						if(b.cursor >= b.data.get_length()) {
							v1 = 0;
						} else {
							var pos = b.cursor++;
							if(pos == null) {
								pos = 0;
							}
							v1 = b.data.readU8(pos);
						}
						v = v << 8 | v1;
					}
					var o = b.cursor + (v - 1);
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var s = b.cursor - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					var r1 = r;
					if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
						tmp = r1;
					} else {
						r1.data = b.data.sub(start,s);
						tmp = r1;
					}
				} else {
					tmp = b;
				}
			}
		}
		info.subrs = tmp;
		if(cstype[0] != 2) {
			return false;
		}
		if(charstrings[0] == 0) {
			return false;
		}
		if(fdarrayoff[0] != 0) {
			if(fdselectoff[0] == 0) {
				return false;
			}
			var o = fdarrayoff[0];
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var start = b.cursor;
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var count = v;
			var tmp;
			if(count > 0) {
				var offsize;
				if(b.cursor >= b.data.get_length()) {
					offsize = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					offsize = b.data.readU8(pos);
				}
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o = b.cursor + offsize * count;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var v = 0;
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g = 0;
				var _g1 = offsize;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var o = b.cursor + (v - 1);
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var s = b.cursor - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
					tmp = r1;
				} else {
					r1.data = b.data.sub(start,s);
					tmp = r1;
				}
			} else {
				tmp = b;
			}
			info.fontdicts = tmp;
			var o = fdselectoff[0];
			var s = b.data.get_length() - fdselectoff[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			var tmp;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(o,s);
				tmp = r1;
			}
			info.fdselect = tmp;
		}
		var o = charstrings[0];
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(start,s);
				tmp = r1;
			}
		} else {
			tmp = b;
		}
		info.charstrings = tmp;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos = cmap + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var numTables = ch2 | ch1 << 8;
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		var pos = encoding_record;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		switch(ch2 | ch1 << 8) {
		case 0:
			var pos1 = encoding_record + 4;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch12 = data.readU8(pos3);
			var ch22 = data.readU8(pos3 + 1);
			switch(ch22 | ch12 << 8) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch13 = data.readU8(pos5);
				var ch23 = data.readU8(pos5 + 1);
				var ch31 = data.readU8(pos5 + 2);
				var ch41 = data.readU8(pos5 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos = info.head + 50;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	info.indexToLocFormat = ch2 | ch1 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var bytes = ch2 | ch1 << 8;
		if(unicode_codepoint < bytes - 6) {
			var pos = index_map + 6 + unicode_codepoint;
			if(pos == null) {
				pos = 0;
			}
			return data.readU8(pos);
		}
		return 0;
	} else if(format == 6) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var first = ch2 | ch1 << 8;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var count = ch2 | ch1 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			return ch2 | ch1 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw haxe_Exception.thrown("Error");
	} else if(format == 4) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var segcount = (ch2 | ch1 << 8) >> 1;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var searchRange = (ch2 | ch1 << 8) >> 1;
		var pos = index_map + 10;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var entrySelector = ch2 | ch1 << 8;
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var rangeShift = (ch2 | ch1 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos = search + rangeShift * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		if(unicode_codepoint >= (ch2 | ch1 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos = search + searchRange * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var end = ch2 | ch1 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos = endCount + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		if(unicode_codepoint > (ch2 | ch1 << 8)) {
			throw haxe_Exception.thrown("Error");
		}
		var pos = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var start = ch2 | ch1 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var offset = ch2 | ch1 << 8;
		if(offset == 0) {
			var pos = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var n = ch2 | ch1 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		return ch2 | ch1 << 8;
	} else if(format == 12 || format == 13) {
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = data.readU8(pos1);
		var ch2 = data.readU8(pos1 + 1);
		var ch3 = data.readU8(pos1 + 2);
		var ch4 = data.readU8(pos1 + 3);
		var ngroups = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos = index_map + 16 + mid * 12;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			var start_char = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
			var pos2 = index_map + 16 + mid * 12 + 4;
			if(pos2 == null) {
				pos2 = 0;
			}
			var pos3 = pos2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch11 = data.readU8(pos3);
			var ch21 = data.readU8(pos3 + 1);
			var ch31 = data.readU8(pos3 + 2);
			var ch41 = data.readU8(pos3 + 3);
			var end_char = ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos4 = index_map + 16 + mid * 12 + 8;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch12 = data.readU8(pos5);
				var ch22 = data.readU8(pos5 + 1);
				var ch32 = data.readU8(pos5 + 2);
				var ch42 = data.readU8(pos5 + 3);
				var start_glyph = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw haxe_Exception.thrown("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(!(info.cff.data == null || info.cff.data.get_length() == 0)) {
		throw haxe_Exception.thrown("Error");
	}
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2 + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g2 = info1 + (ch2 | ch1 << 8) * 2;
	} else {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		var ch4 = p.readU8(pos1 + 3);
		g1 = info1 + (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24);
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4 + 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		var ch4 = p.readU8(pos1 + 3);
		g2 = info1 + (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,rect);
	} else {
		var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
		if(g < 0) {
			return false;
		}
		var p = info.data;
		var pos = g + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.y0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.x1 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.y1 = (n & 32768) != 0 ? n - 65536 : n;
	}
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,null) == 0;
	}
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var ins = ch2 | ch1 << 8;
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var pos = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var n = 1 + (ch2 | ch1 << 8);
		var m = n + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i].type = flags;
		}
		var x = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var ch2 = data.readU8(pointsIndex + 1);
				var n1 = ch2 | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i].x = x;
		}
		var y = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var ch2 = data.readU8(pointsIndex + 1);
				var n1 = ch2 | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				y += value;
				pointsIndex += 2;
			}
			vertices[off + i].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i = 0;
		while(i < n) {
			flags = vertices[off + i].type;
			x = vertices[off + i].x;
			y = vertices[off + i].y;
			if(next_move == i) {
				if(i != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i + 1].type & 1) == 0) {
						sx = x + vertices[off + i + 1].x >> 1;
						sy = y + vertices[off + i + 1].y >> 1;
					} else {
						sx = vertices[off + i + 1].x;
						sy = vertices[off + i + 1].y;
						++i;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos = endPtsOfContoursOffset + j * 2;
				if(pos == null) {
					pos = 0;
				}
				var ch1 = data.readU8(pos);
				var ch2 = data.readU8(pos + 1);
				next_move = 1 + (ch2 | ch1 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours < 0) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos = compIndex;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var n = ch2 | ch1 << 8;
			var flags = (n & 32768) != 0 ? n - 65536 : n;
			var pos1 = compIndex += 2;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch11 = data.readU8(pos1);
			var ch21 = data.readU8(pos1 + 1);
			var n1 = ch21 | ch11 << 8;
			var gidx = (n1 & 32768) != 0 ? n1 - 65536 : n1;
			compIndex += 2;
			if((flags & 2) != 0) {
				if((flags & 1) != 0) {
					var pos2 = compIndex;
					if(pos2 == null) {
						pos2 = 0;
					}
					var ch12 = data.readU8(pos2);
					var ch22 = data.readU8(pos2 + 1);
					var n2 = ch22 | ch12 << 8;
					mtx4 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
					var pos3 = compIndex += 2;
					if(pos3 == null) {
						pos3 = 0;
					}
					var ch13 = data.readU8(pos3);
					var ch23 = data.readU8(pos3 + 1);
					var n3 = ch23 | ch13 << 8;
					mtx5 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
					compIndex += 2;
				} else {
					var pos4 = compIndex;
					if(pos4 == null) {
						pos4 = 0;
					}
					var n4 = data.readU8(pos4);
					mtx4 = n4 >= 128 ? n4 - 256 : n4;
					var pos5 = ++compIndex;
					if(pos5 == null) {
						pos5 = 0;
					}
					var n5 = data.readU8(pos5);
					mtx5 = n5 >= 128 ? n5 - 256 : n5;
					++compIndex;
				}
			} else {
				throw haxe_Exception.thrown("Error");
			}
			if((flags & 8) != 0) {
				var pos6 = compIndex;
				if(pos6 == null) {
					pos6 = 0;
				}
				var ch14 = data.readU8(pos6);
				var ch24 = data.readU8(pos6 + 1);
				var n6 = ch24 | ch14 << 8;
				mtx3 = ((n6 & 32768) != 0 ? n6 - 65536 : n6) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags & 64) != 0) {
				var pos7 = compIndex;
				if(pos7 == null) {
					pos7 = 0;
				}
				var ch15 = data.readU8(pos7);
				var ch25 = data.readU8(pos7 + 1);
				var n7 = ch25 | ch15 << 8;
				mtx0 = ((n7 & 32768) != 0 ? n7 - 65536 : n7) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos8 = compIndex;
				if(pos8 == null) {
					pos8 = 0;
				}
				var ch16 = data.readU8(pos8);
				var ch26 = data.readU8(pos8 + 1);
				var n8 = ch26 | ch16 << 8;
				mtx3 = ((n8 & 32768) != 0 ? n8 - 65536 : n8) / 16384.0;
				compIndex += 2;
			} else if((flags & 128) != 0) {
				var pos9 = compIndex;
				if(pos9 == null) {
					pos9 = 0;
				}
				var ch17 = data.readU8(pos9);
				var ch27 = data.readU8(pos9 + 1);
				var n9 = ch27 | ch17 << 8;
				mtx0 = ((n9 & 32768) != 0 ? n9 - 65536 : n9) / 16384.0;
				var pos10 = compIndex += 2;
				if(pos10 == null) {
					pos10 = 0;
				}
				var ch18 = data.readU8(pos10);
				var ch28 = data.readU8(pos10 + 1);
				var n10 = ch28 | ch18 << 8;
				mtx1 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				var pos11 = compIndex += 2;
				if(pos11 == null) {
					pos11 = 0;
				}
				var ch19 = data.readU8(pos11);
				var ch29 = data.readU8(pos11 + 1);
				var n11 = ch29 | ch19 << 8;
				mtx2 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				var pos12 = compIndex += 2;
				if(pos12 == null) {
					pos12 = 0;
				}
				var ch110 = data.readU8(pos12);
				var ch210 = data.readU8(pos12 + 1);
				var n12 = ch210 | ch110 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			}
			var m = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n13 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g = 0;
				var _g1 = comp_num_verts;
				while(_g < _g1) {
					var i1 = _g++;
					var v = comp_verts[i1];
					var x = v.x;
					var y = v.y;
					v.x = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.y = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
					x = v.cx;
					y = v.cy;
					v.cx = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.cy = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
				}
				var this1 = new Array(num_vertices + comp_num_verts);
				tmp = this1;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags & 32;
		}
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw haxe_Exception.thrown("Error");
	}
	if(num_vertices < vertices.length) {
		var this1 = new Array(num_vertices);
		var tmp = this1;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
		return tmp;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSCTX_INIT = function(bounds) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = bounds;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	return tmp;
};
kha_graphics2_truetype_StbTruetype.stbtt__track_vertex = function(c,x,y) {
	if(x > c.max_x || !c.started) {
		c.max_x = x;
	}
	if(y > c.max_y || !c.started) {
		c.max_y = y;
	}
	if(x < c.min_x || !c.started) {
		c.min_x = x;
	}
	if(y < c.min_y || !c.started) {
		c.min_y = y;
	}
	c.started = true;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_v = function(c,type,x,y,cx,cy,cx1,cy1) {
	if(c.bounds) {
		if(x > c.max_x || !c.started) {
			c.max_x = x;
		}
		if(y > c.max_y || !c.started) {
			c.max_y = y;
		}
		if(x < c.min_x || !c.started) {
			c.min_x = x;
		}
		if(y < c.min_y || !c.started) {
			c.min_y = y;
		}
		c.started = true;
		if(type == 4) {
			if(cx > c.max_x || !c.started) {
				c.max_x = cx;
			}
			if(cy > c.max_y || !c.started) {
				c.max_y = cy;
			}
			if(cx < c.min_x || !c.started) {
				c.min_x = cx;
			}
			if(cy < c.min_y || !c.started) {
				c.min_y = cy;
			}
			c.started = true;
			if(cx1 > c.max_x || !c.started) {
				c.max_x = cx1;
			}
			if(cy1 > c.max_y || !c.started) {
				c.max_y = cy1;
			}
			if(cx1 < c.min_x || !c.started) {
				c.min_x = cx1;
			}
			if(cy1 < c.min_y || !c.started) {
				c.min_y = cy1;
			}
			c.started = true;
		}
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],type,x,y,cx,cy);
		c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx1 , Int);
		c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy1 , Int);
	}
	c.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_close_shape = function(ctx) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rmove_to = function(ctx,dx,dy) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
	ctx.first_x = ctx.x = ctx.x + dx;
	ctx.first_y = ctx.y = ctx.y + dy;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],1,x,y,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rline_to = function(ctx,dx,dy) {
	ctx.x += dx;
	ctx.y += dy;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rccurve_to = function(ctx,dx1,dy1,dx2,dy2,dx3,dy3) {
	var cx1 = ctx.x + dx1;
	var cy1 = ctx.y + dy1;
	var cx2 = cx1 + dx2;
	var cy2 = cy1 + dy2;
	ctx.x = cx2 + dx3;
	ctx.y = cy2 + dy3;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	var cx = cx1 | 0;
	var cy = cy1 | 0;
	var cx1 = cx2 | 0;
	var cy1 = cy2 | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
		if(cx > ctx.max_x || !ctx.started) {
			ctx.max_x = cx;
		}
		if(cy > ctx.max_y || !ctx.started) {
			ctx.max_y = cy;
		}
		if(cx < ctx.min_x || !ctx.started) {
			ctx.min_x = cx;
		}
		if(cy < ctx.min_y || !ctx.started) {
			ctx.min_y = cy;
		}
		ctx.started = true;
		if(cx1 > ctx.max_x || !ctx.started) {
			ctx.max_x = cx1;
		}
		if(cy1 > ctx.max_y || !ctx.started) {
			ctx.max_y = cy1;
		}
		if(cx1 < ctx.min_x || !ctx.started) {
			ctx.min_x = cx1;
		}
		if(cy1 < ctx.min_y || !ctx.started) {
			ctx.min_y = cy1;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],4,x,y,cx,cy);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(cx1 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(cy1 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subr = function(idx,n) {
	if(0 > idx.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var bias = 107;
	if(count >= 33900) {
		bias = 32768;
	} else if(count >= 1240) {
		bias = 1131;
	}
	n += bias;
	if(n < 0 || n >= count) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	if(0 > idx.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(idx.cursor >= idx.data.get_length()) {
		offsize = 0;
	} else {
		var pos = idx.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = idx.data.readU8(pos);
	}
	if(!(n >= 0 && n < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = idx.cursor + n * offsize;
	if(o > idx.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = o > idx.data.get_length() || o < 0 ? idx.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > idx.data.get_length() || s > idx.data.get_length() - o) {
		return r1;
	} else {
		r1.data = idx.data.sub(o,s);
		return r1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cid_get_glyph_subrs = function(info,glyph_index) {
	var fdselect = info.fdselect;
	var nranges;
	var start;
	var end;
	var v;
	var fmt;
	var fdselector = -1;
	var i;
	if(0 > fdselect.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
	if(fdselect.cursor >= fdselect.data.get_length()) {
		fmt = 0;
	} else {
		var pos = fdselect.cursor++;
		if(pos == null) {
			pos = 0;
		}
		fmt = fdselect.data.readU8(pos);
	}
	if(fmt == 0) {
		var o = fdselect.cursor + glyph_index;
		if(o > fdselect.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		fdselect.cursor = o > fdselect.data.get_length() || o < 0 ? fdselect.data.get_length() : o;
		if(fdselect.cursor >= fdselect.data.get_length()) {
			fdselector = 0;
		} else {
			var pos = fdselect.cursor++;
			if(pos == null) {
				pos = 0;
			}
			fdselector = fdselect.data.readU8(pos);
		}
	} else if(fmt == 3) {
		var v1 = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v2 = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v2 = fdselect.data.readU8(pos);
			}
			v1 = v1 << 8 | v2;
		}
		nranges = v1;
		var v1 = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v2 = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v2 = fdselect.data.readU8(pos);
			}
			v1 = v1 << 8 | v2;
		}
		start = v1;
		var _g = 0;
		var _g1 = nranges;
		while(_g < _g1) {
			var i = _g++;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v = fdselect.data.readU8(pos);
			}
			var v1 = 0;
			var _g2 = 0;
			var _g3 = 2;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var v2;
				if(fdselect.cursor >= fdselect.data.get_length()) {
					v2 = 0;
				} else {
					var pos1 = fdselect.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					v2 = fdselect.data.readU8(pos1);
				}
				v1 = v1 << 8 | v2;
			}
			end = v1;
			if(glyph_index >= start && glyph_index < end) {
				fdselector = v;
				break;
			}
			start = end;
		}
	}
	if(fdselector == -1) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
	}
	var cff = info.cff;
	var b = info.fontdicts;
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b.data.readU8(pos);
	}
	if(!(fdselector >= 0 && fdselector < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b.cursor + fdselector * offsize;
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	var fontdict;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		fontdict = r1;
	} else {
		r1.data = b.data.sub(o,s);
		fontdict = r1;
	}
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = fontdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = fontdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = fontdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = fontdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = fontdict.cursor + 1;
				if(o > fontdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				fontdict.cursor = o > fontdict.data.get_length() || o < 0 ? fontdict.data.get_length() : o;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = fontdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = fontdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = fontdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = fontdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos4 = fontdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							fontdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos5 = fontdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							fontdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = fontdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = fontdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = fontdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = fontdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = fontdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = fontdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = fontdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = fontdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > fontdict.data.get_length() || s > fontdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = fontdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = fontdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		private_loc[i] = tmp;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	} else {
		var o = private_loc[1];
		var s = private_loc[0];
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		var pdict;
		if(o < 0 || s < 0 || o > cff.data.get_length() || s > cff.data.get_length() - o) {
			pdict = r1;
		} else {
			r1.data = cff.data.sub(o,s);
			pdict = r1;
		}
		var i = 0;
		if(0 > pdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
		var ret = null;
		while(pdict.cursor < pdict.data.get_length()) {
			var start = pdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(pdict.cursor >= pdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = pdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = pdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(pdict.cursor >= pdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = pdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = pdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = pdict.cursor + 1;
					if(o > pdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
					while(pdict.cursor < pdict.data.get_length()) {
						if(pdict.cursor >= pdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = pdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = pdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(pdict.cursor >= pdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = pdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = pdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos4 = pdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								pdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos5 = pdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								pdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(pdict.cursor >= pdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = pdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = pdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(pdict.cursor >= pdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = pdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = pdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = pdict.cursor;
			if(pdict.cursor >= pdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = pdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = pdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(pdict.cursor >= pdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = pdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = pdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 19) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = pdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = pdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			subrsoff[i] = tmp;
			++i;
		}
		if(subrsoff[0] == 0) {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			return r;
		} else {
			var o = private_loc[1] + subrsoff[0];
			if(o > cff.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
			var start = cff.cursor;
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(cff.cursor >= cff.data.get_length()) {
					v1 = 0;
				} else {
					var pos = cff.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = cff.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var count = v;
			if(count > 0) {
				var offsize;
				if(cff.cursor >= cff.data.get_length()) {
					offsize = 0;
				} else {
					var pos = cff.cursor++;
					if(pos == null) {
						pos = 0;
					}
					offsize = cff.data.readU8(pos);
				}
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o = cff.cursor + offsize * count;
				if(o > cff.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
				var v = 0;
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g = 0;
				var _g1 = offsize;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(cff.cursor >= cff.data.get_length()) {
						v1 = 0;
					} else {
						var pos = cff.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = cff.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var o = cff.cursor + (v - 1);
				if(o > cff.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
				var s = cff.cursor - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > cff.data.get_length() || s > cff.data.get_length() - start) {
					return r1;
				} else {
					r1.data = cff.data.sub(start,s);
					return r1;
				}
			} else {
				return cff;
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSERR = function(s) {
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__run_charstring = function(info,glyph_index,c) {
	var in_header = true;
	var maskbits = 0;
	var subr_stack_height = 0;
	var sp = 0;
	var v;
	var i;
	var b0;
	var has_subrs = false;
	var clear_stack;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var s = _g;
	var _g = [];
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	var subr_stack = _g;
	var subrs = info.subrs;
	var b;
	var f;
	var b1 = info.charstrings;
	if(0 > b1.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = 0 > b1.data.get_length() ? b1.data.get_length() : 0;
	var v1 = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var count = v1;
	var offsize;
	if(b1.cursor >= b1.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b1.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b1.data.readU8(pos);
	}
	if(!(glyph_index >= 0 && glyph_index < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b1.cursor + glyph_index * offsize;
	if(o > b1.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = o > b1.data.get_length() || o < 0 ? b1.data.get_length() : o;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var start = v1;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var end = v1;
	var o = 2 + (count + 1) * offsize + start;
	var s1 = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s1 < 0 || o > b1.data.get_length() || s1 > b1.data.get_length() - o) {
		b = r1;
	} else {
		r1.data = b1.data.sub(o,s1);
		b = r1;
	}
	while(b.cursor < b.data.get_length()) {
		i = 0;
		clear_stack = true;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = b.data.readU8(pos);
		}
		switch(b0) {
		case 1:case 3:case 18:case 23:
			maskbits += sp / 2 | 0;
			break;
		case 4:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x = c.first_x | 0;
				var y = c.first_y | 0;
				if(c.bounds) {
					if(x > c.max_x || !c.started) {
						c.max_x = x;
					}
					if(y > c.max_y || !c.started) {
						c.max_y = y;
					}
					if(x < c.min_x || !c.started) {
						c.min_x = x;
					}
					if(y < c.min_y || !c.started) {
						c.min_y = y;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x,y,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x;
			c.first_y = c.y = c.y + s[sp - 1];
			var x1 = c.x | 0;
			var y1 = c.y | 0;
			if(c.bounds) {
				if(x1 > c.max_x || !c.started) {
					c.max_x = x1;
				}
				if(y1 > c.max_y || !c.started) {
					c.max_y = y1;
				}
				if(x1 < c.min_x || !c.started) {
					c.min_x = x1;
				}
				if(y1 < c.min_y || !c.started) {
					c.min_y = y1;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x1,y1,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 5:
			if(sp < 2) {
				return false;
			}
			while(i + 1 < sp) {
				c.x += s[i];
				c.y += s[i + 1];
				var x2 = c.x | 0;
				var y2 = c.y | 0;
				if(c.bounds) {
					if(x2 > c.max_x || !c.started) {
						c.max_x = x2;
					}
					if(y2 > c.max_y || !c.started) {
						c.max_y = y2;
					}
					if(x2 < c.min_x || !c.started) {
						c.min_x = x2;
					}
					if(y2 < c.min_y || !c.started) {
						c.min_y = y2;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x2,y2,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			break;
		case 6:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += s[i];
				c.y += 0;
				var x3 = c.x | 0;
				var y3 = c.y | 0;
				if(c.bounds) {
					if(x3 > c.max_x || !c.started) {
						c.max_x = x3;
					}
					if(y3 > c.max_y || !c.started) {
						c.max_y = y3;
					}
					if(x3 < c.min_x || !c.started) {
						c.min_x = x3;
					}
					if(y3 < c.min_y || !c.started) {
						c.min_y = y3;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x3,y3,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += 0;
				c.y += s[i];
				var x4 = c.x | 0;
				var y4 = c.y | 0;
				if(c.bounds) {
					if(x4 > c.max_x || !c.started) {
						c.max_x = x4;
					}
					if(y4 > c.max_y || !c.started) {
						c.max_y = y4;
					}
					if(x4 < c.min_x || !c.started) {
						c.min_x = x4;
					}
					if(y4 < c.min_y || !c.started) {
						c.min_y = y4;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x4,y4,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 7:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += 0;
				c.y += s[i];
				var x5 = c.x | 0;
				var y5 = c.y | 0;
				if(c.bounds) {
					if(x5 > c.max_x || !c.started) {
						c.max_x = x5;
					}
					if(y5 > c.max_y || !c.started) {
						c.max_y = y5;
					}
					if(x5 < c.min_x || !c.started) {
						c.min_x = x5;
					}
					if(y5 < c.min_y || !c.started) {
						c.min_y = y5;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x5,y5,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += s[i];
				c.y += 0;
				var x6 = c.x | 0;
				var y6 = c.y | 0;
				if(c.bounds) {
					if(x6 > c.max_x || !c.started) {
						c.max_x = x6;
					}
					if(y6 > c.max_y || !c.started) {
						c.max_y = y6;
					}
					if(x6 < c.min_x || !c.started) {
						c.min_x = x6;
					}
					if(y6 < c.min_y || !c.started) {
						c.min_y = y6;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x6,y6,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 8:
			if(sp < 6) {
				return false;
			}
			while(i + 5 < sp) {
				var cx1 = c.x + s[i];
				var cy1 = c.y + s[i + 1];
				var cx2 = cx1 + s[i + 2];
				var cy2 = cy1 + s[i + 3];
				c.x = cx2 + s[i + 4];
				c.y = cy2 + s[i + 5];
				var x7 = c.x | 0;
				var y7 = c.y | 0;
				var cx = cx1 | 0;
				var cy = cy1 | 0;
				var cx11 = cx2 | 0;
				var cy11 = cy2 | 0;
				if(c.bounds) {
					if(x7 > c.max_x || !c.started) {
						c.max_x = x7;
					}
					if(y7 > c.max_y || !c.started) {
						c.max_y = y7;
					}
					if(x7 < c.min_x || !c.started) {
						c.min_x = x7;
					}
					if(y7 < c.min_y || !c.started) {
						c.min_y = y7;
					}
					c.started = true;
					if(cx > c.max_x || !c.started) {
						c.max_x = cx;
					}
					if(cy > c.max_y || !c.started) {
						c.max_y = cy;
					}
					if(cx < c.min_x || !c.started) {
						c.min_x = cx;
					}
					if(cy < c.min_y || !c.started) {
						c.min_y = cy;
					}
					c.started = true;
					if(cx11 > c.max_x || !c.started) {
						c.max_x = cx11;
					}
					if(cy11 > c.max_y || !c.started) {
						c.max_y = cy11;
					}
					if(cx11 < c.min_x || !c.started) {
						c.min_x = cx11;
					}
					if(cy11 < c.min_y || !c.started) {
						c.min_y = cy11;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x7,y7,cx,cy);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx11 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy11 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			break;
		case 11:
			if(subr_stack_height <= 0) {
				return false;
			}
			b = subr_stack[--subr_stack_height];
			clear_stack = false;
			break;
		case 12:
			var dx1;
			var dx2;
			var dx3;
			var dx4;
			var dx5;
			var dx6;
			var dy1;
			var dy2;
			var dy3;
			var dy4;
			var dy5;
			var dy6;
			var dx;
			var dy;
			var b1;
			if(b.cursor >= b.data.get_length()) {
				b1 = 0;
			} else {
				var pos1 = b.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				b1 = b.data.readU8(pos1);
			}
			switch(b1) {
			case 34:
				if(sp < 7) {
					return false;
				}
				dx1 = s[0];
				dx2 = s[1];
				dy2 = s[2];
				dx3 = s[3];
				dx4 = s[4];
				dx5 = s[5];
				dx6 = s[6];
				var cx12 = c.x + dx1;
				var cy12 = c.y;
				var cx21 = cx12 + dx2;
				var cy21 = cy12 + dy2;
				c.x = cx21 + dx3;
				c.y = cy21;
				var x8 = c.x | 0;
				var y8 = c.y | 0;
				var cx3 = cx12 | 0;
				var cy3 = cy12 | 0;
				var cx13 = cx21 | 0;
				var cy13 = cy21 | 0;
				if(c.bounds) {
					if(x8 > c.max_x || !c.started) {
						c.max_x = x8;
					}
					if(y8 > c.max_y || !c.started) {
						c.max_y = y8;
					}
					if(x8 < c.min_x || !c.started) {
						c.min_x = x8;
					}
					if(y8 < c.min_y || !c.started) {
						c.min_y = y8;
					}
					c.started = true;
					if(cx3 > c.max_x || !c.started) {
						c.max_x = cx3;
					}
					if(cy3 > c.max_y || !c.started) {
						c.max_y = cy3;
					}
					if(cx3 < c.min_x || !c.started) {
						c.min_x = cx3;
					}
					if(cy3 < c.min_y || !c.started) {
						c.min_y = cy3;
					}
					c.started = true;
					if(cx13 > c.max_x || !c.started) {
						c.max_x = cx13;
					}
					if(cy13 > c.max_y || !c.started) {
						c.max_y = cy13;
					}
					if(cx13 < c.min_x || !c.started) {
						c.min_x = cx13;
					}
					if(cy13 < c.min_y || !c.started) {
						c.min_y = cy13;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x8,y8,cx3,cy3);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx13 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy13 , Int);
				}
				c.num_vertices++;
				var cx14 = c.x + dx4;
				var cy14 = c.y;
				var cx22 = cx14 + dx5;
				var cy22 = cy14 + -dy2;
				c.x = cx22 + dx6;
				c.y = cy22;
				var x9 = c.x | 0;
				var y9 = c.y | 0;
				var cx4 = cx14 | 0;
				var cy4 = cy14 | 0;
				var cx15 = cx22 | 0;
				var cy15 = cy22 | 0;
				if(c.bounds) {
					if(x9 > c.max_x || !c.started) {
						c.max_x = x9;
					}
					if(y9 > c.max_y || !c.started) {
						c.max_y = y9;
					}
					if(x9 < c.min_x || !c.started) {
						c.min_x = x9;
					}
					if(y9 < c.min_y || !c.started) {
						c.min_y = y9;
					}
					c.started = true;
					if(cx4 > c.max_x || !c.started) {
						c.max_x = cx4;
					}
					if(cy4 > c.max_y || !c.started) {
						c.max_y = cy4;
					}
					if(cx4 < c.min_x || !c.started) {
						c.min_x = cx4;
					}
					if(cy4 < c.min_y || !c.started) {
						c.min_y = cy4;
					}
					c.started = true;
					if(cx15 > c.max_x || !c.started) {
						c.max_x = cx15;
					}
					if(cy15 > c.max_y || !c.started) {
						c.max_y = cy15;
					}
					if(cx15 < c.min_x || !c.started) {
						c.min_x = cx15;
					}
					if(cy15 < c.min_y || !c.started) {
						c.min_y = cy15;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x9,y9,cx4,cy4);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx15 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy15 , Int);
				}
				c.num_vertices++;
				break;
			case 35:
				if(sp < 13) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dy3 = s[5];
				dx4 = s[6];
				dy4 = s[7];
				dx5 = s[8];
				dy5 = s[9];
				dx6 = s[10];
				dy6 = s[11];
				var cx16 = c.x + dx1;
				var cy16 = c.y + dy1;
				var cx23 = cx16 + dx2;
				var cy23 = cy16 + dy2;
				c.x = cx23 + dx3;
				c.y = cy23 + dy3;
				var x10 = c.x | 0;
				var y10 = c.y | 0;
				var cx5 = cx16 | 0;
				var cy5 = cy16 | 0;
				var cx17 = cx23 | 0;
				var cy17 = cy23 | 0;
				if(c.bounds) {
					if(x10 > c.max_x || !c.started) {
						c.max_x = x10;
					}
					if(y10 > c.max_y || !c.started) {
						c.max_y = y10;
					}
					if(x10 < c.min_x || !c.started) {
						c.min_x = x10;
					}
					if(y10 < c.min_y || !c.started) {
						c.min_y = y10;
					}
					c.started = true;
					if(cx5 > c.max_x || !c.started) {
						c.max_x = cx5;
					}
					if(cy5 > c.max_y || !c.started) {
						c.max_y = cy5;
					}
					if(cx5 < c.min_x || !c.started) {
						c.min_x = cx5;
					}
					if(cy5 < c.min_y || !c.started) {
						c.min_y = cy5;
					}
					c.started = true;
					if(cx17 > c.max_x || !c.started) {
						c.max_x = cx17;
					}
					if(cy17 > c.max_y || !c.started) {
						c.max_y = cy17;
					}
					if(cx17 < c.min_x || !c.started) {
						c.min_x = cx17;
					}
					if(cy17 < c.min_y || !c.started) {
						c.min_y = cy17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x10,y10,cx5,cy5);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx17 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy17 , Int);
				}
				c.num_vertices++;
				var cx18 = c.x + dx4;
				var cy18 = c.y + dy4;
				var cx24 = cx18 + dx5;
				var cy24 = cy18 + dy5;
				c.x = cx24 + dx6;
				c.y = cy24 + dy6;
				var x11 = c.x | 0;
				var y11 = c.y | 0;
				var cx6 = cx18 | 0;
				var cy6 = cy18 | 0;
				var cx19 = cx24 | 0;
				var cy19 = cy24 | 0;
				if(c.bounds) {
					if(x11 > c.max_x || !c.started) {
						c.max_x = x11;
					}
					if(y11 > c.max_y || !c.started) {
						c.max_y = y11;
					}
					if(x11 < c.min_x || !c.started) {
						c.min_x = x11;
					}
					if(y11 < c.min_y || !c.started) {
						c.min_y = y11;
					}
					c.started = true;
					if(cx6 > c.max_x || !c.started) {
						c.max_x = cx6;
					}
					if(cy6 > c.max_y || !c.started) {
						c.max_y = cy6;
					}
					if(cx6 < c.min_x || !c.started) {
						c.min_x = cx6;
					}
					if(cy6 < c.min_y || !c.started) {
						c.min_y = cy6;
					}
					c.started = true;
					if(cx19 > c.max_x || !c.started) {
						c.max_x = cx19;
					}
					if(cy19 > c.max_y || !c.started) {
						c.max_y = cy19;
					}
					if(cx19 < c.min_x || !c.started) {
						c.min_x = cx19;
					}
					if(cy19 < c.min_y || !c.started) {
						c.min_y = cy19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x11,y11,cx6,cy6);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx19 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy19 , Int);
				}
				c.num_vertices++;
				break;
			case 36:
				if(sp < 9) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dx4 = s[5];
				dx5 = s[6];
				dy5 = s[7];
				dx6 = s[8];
				var cx110 = c.x + dx1;
				var cy110 = c.y + dy1;
				var cx25 = cx110 + dx2;
				var cy25 = cy110 + dy2;
				c.x = cx25 + dx3;
				c.y = cy25;
				var x12 = c.x | 0;
				var y12 = c.y | 0;
				var cx7 = cx110 | 0;
				var cy7 = cy110 | 0;
				var cx111 = cx25 | 0;
				var cy111 = cy25 | 0;
				if(c.bounds) {
					if(x12 > c.max_x || !c.started) {
						c.max_x = x12;
					}
					if(y12 > c.max_y || !c.started) {
						c.max_y = y12;
					}
					if(x12 < c.min_x || !c.started) {
						c.min_x = x12;
					}
					if(y12 < c.min_y || !c.started) {
						c.min_y = y12;
					}
					c.started = true;
					if(cx7 > c.max_x || !c.started) {
						c.max_x = cx7;
					}
					if(cy7 > c.max_y || !c.started) {
						c.max_y = cy7;
					}
					if(cx7 < c.min_x || !c.started) {
						c.min_x = cx7;
					}
					if(cy7 < c.min_y || !c.started) {
						c.min_y = cy7;
					}
					c.started = true;
					if(cx111 > c.max_x || !c.started) {
						c.max_x = cx111;
					}
					if(cy111 > c.max_y || !c.started) {
						c.max_y = cy111;
					}
					if(cx111 < c.min_x || !c.started) {
						c.min_x = cx111;
					}
					if(cy111 < c.min_y || !c.started) {
						c.min_y = cy111;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x12,y12,cx7,cy7);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx111 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy111 , Int);
				}
				c.num_vertices++;
				var cx112 = c.x + dx4;
				var cy112 = c.y;
				var cx26 = cx112 + dx5;
				var cy26 = cy112 + dy5;
				c.x = cx26 + dx6;
				c.y = cy26 + -(dy1 + dy2 + dy5);
				var x13 = c.x | 0;
				var y13 = c.y | 0;
				var cx8 = cx112 | 0;
				var cy8 = cy112 | 0;
				var cx113 = cx26 | 0;
				var cy113 = cy26 | 0;
				if(c.bounds) {
					if(x13 > c.max_x || !c.started) {
						c.max_x = x13;
					}
					if(y13 > c.max_y || !c.started) {
						c.max_y = y13;
					}
					if(x13 < c.min_x || !c.started) {
						c.min_x = x13;
					}
					if(y13 < c.min_y || !c.started) {
						c.min_y = y13;
					}
					c.started = true;
					if(cx8 > c.max_x || !c.started) {
						c.max_x = cx8;
					}
					if(cy8 > c.max_y || !c.started) {
						c.max_y = cy8;
					}
					if(cx8 < c.min_x || !c.started) {
						c.min_x = cx8;
					}
					if(cy8 < c.min_y || !c.started) {
						c.min_y = cy8;
					}
					c.started = true;
					if(cx113 > c.max_x || !c.started) {
						c.max_x = cx113;
					}
					if(cy113 > c.max_y || !c.started) {
						c.max_y = cy113;
					}
					if(cx113 < c.min_x || !c.started) {
						c.min_x = cx113;
					}
					if(cy113 < c.min_y || !c.started) {
						c.min_y = cy113;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x13,y13,cx8,cy8);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx113 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy113 , Int);
				}
				c.num_vertices++;
				break;
			case 37:
				if(sp < 11) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dy3 = s[5];
				dx4 = s[6];
				dy4 = s[7];
				dx5 = s[8];
				dy5 = s[9];
				dy6 = s[10];
				dx6 = dy6;
				dx = dx1 + dx2 + dx3 + dx4 + dx5;
				dy = dy1 + dy2 + dy3 + dy4 + dy5;
				if(Math.abs(dx) > Math.abs(dy)) {
					dy6 = -dy;
				} else {
					dx6 = -dx;
				}
				var cx114 = c.x + dx1;
				var cy114 = c.y + dy1;
				var cx27 = cx114 + dx2;
				var cy27 = cy114 + dy2;
				c.x = cx27 + dx3;
				c.y = cy27 + dy3;
				var x14 = c.x | 0;
				var y14 = c.y | 0;
				var cx9 = cx114 | 0;
				var cy9 = cy114 | 0;
				var cx115 = cx27 | 0;
				var cy115 = cy27 | 0;
				if(c.bounds) {
					if(x14 > c.max_x || !c.started) {
						c.max_x = x14;
					}
					if(y14 > c.max_y || !c.started) {
						c.max_y = y14;
					}
					if(x14 < c.min_x || !c.started) {
						c.min_x = x14;
					}
					if(y14 < c.min_y || !c.started) {
						c.min_y = y14;
					}
					c.started = true;
					if(cx9 > c.max_x || !c.started) {
						c.max_x = cx9;
					}
					if(cy9 > c.max_y || !c.started) {
						c.max_y = cy9;
					}
					if(cx9 < c.min_x || !c.started) {
						c.min_x = cx9;
					}
					if(cy9 < c.min_y || !c.started) {
						c.min_y = cy9;
					}
					c.started = true;
					if(cx115 > c.max_x || !c.started) {
						c.max_x = cx115;
					}
					if(cy115 > c.max_y || !c.started) {
						c.max_y = cy115;
					}
					if(cx115 < c.min_x || !c.started) {
						c.min_x = cx115;
					}
					if(cy115 < c.min_y || !c.started) {
						c.min_y = cy115;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x14,y14,cx9,cy9);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx115 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy115 , Int);
				}
				c.num_vertices++;
				var cx116 = c.x + dx4;
				var cy116 = c.y + dy4;
				var cx28 = cx116 + dx5;
				var cy28 = cy116 + dy5;
				c.x = cx28 + dx6;
				c.y = cy28 + dy6;
				var x15 = c.x | 0;
				var y15 = c.y | 0;
				var cx10 = cx116 | 0;
				var cy10 = cy116 | 0;
				var cx117 = cx28 | 0;
				var cy117 = cy28 | 0;
				if(c.bounds) {
					if(x15 > c.max_x || !c.started) {
						c.max_x = x15;
					}
					if(y15 > c.max_y || !c.started) {
						c.max_y = y15;
					}
					if(x15 < c.min_x || !c.started) {
						c.min_x = x15;
					}
					if(y15 < c.min_y || !c.started) {
						c.min_y = y15;
					}
					c.started = true;
					if(cx10 > c.max_x || !c.started) {
						c.max_x = cx10;
					}
					if(cy10 > c.max_y || !c.started) {
						c.max_y = cy10;
					}
					if(cx10 < c.min_x || !c.started) {
						c.min_x = cx10;
					}
					if(cy10 < c.min_y || !c.started) {
						c.min_y = cy10;
					}
					c.started = true;
					if(cx117 > c.max_x || !c.started) {
						c.max_x = cx117;
					}
					if(cy117 > c.max_y || !c.started) {
						c.max_y = cy117;
					}
					if(cx117 < c.min_x || !c.started) {
						c.min_x = cx117;
					}
					if(cy117 < c.min_y || !c.started) {
						c.min_y = cy117;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x15,y15,cx10,cy10);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx117 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy117 , Int);
				}
				c.num_vertices++;
				break;
			default:
				return false;
			}
			break;
		case 14:
			if(c.first_x != c.x || c.first_y != c.y) {
				var x16 = c.first_x | 0;
				var y16 = c.first_y | 0;
				if(c.bounds) {
					if(x16 > c.max_x || !c.started) {
						c.max_x = x16;
					}
					if(y16 > c.max_y || !c.started) {
						c.max_y = y16;
					}
					if(x16 < c.min_x || !c.started) {
						c.min_x = x16;
					}
					if(y16 < c.min_y || !c.started) {
						c.min_y = y16;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x16,y16,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			return true;
		case 19:case 20:
			if(in_header) {
				maskbits += sp / 2 | 0;
			}
			in_header = false;
			var o = b.cursor + ((maskbits + 7) / 8 | 0);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			break;
		case 21:
			in_header = false;
			if(sp < 2) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x17 = c.first_x | 0;
				var y17 = c.first_y | 0;
				if(c.bounds) {
					if(x17 > c.max_x || !c.started) {
						c.max_x = x17;
					}
					if(y17 > c.max_y || !c.started) {
						c.max_y = y17;
					}
					if(x17 < c.min_x || !c.started) {
						c.min_x = x17;
					}
					if(y17 < c.min_y || !c.started) {
						c.min_y = y17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x17,y17,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + s[sp - 2];
			c.first_y = c.y = c.y + s[sp - 1];
			var x18 = c.x | 0;
			var y18 = c.y | 0;
			if(c.bounds) {
				if(x18 > c.max_x || !c.started) {
					c.max_x = x18;
				}
				if(y18 > c.max_y || !c.started) {
					c.max_y = y18;
				}
				if(x18 < c.min_x || !c.started) {
					c.min_x = x18;
				}
				if(y18 < c.min_y || !c.started) {
					c.min_y = y18;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x18,y18,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 22:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x19 = c.first_x | 0;
				var y19 = c.first_y | 0;
				if(c.bounds) {
					if(x19 > c.max_x || !c.started) {
						c.max_x = x19;
					}
					if(y19 > c.max_y || !c.started) {
						c.max_y = y19;
					}
					if(x19 < c.min_x || !c.started) {
						c.min_x = x19;
					}
					if(y19 < c.min_y || !c.started) {
						c.min_y = y19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x19,y19,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + s[sp - 1];
			c.first_y = c.y = c.y;
			var x20 = c.x | 0;
			var y20 = c.y | 0;
			if(c.bounds) {
				if(x20 > c.max_x || !c.started) {
					c.max_x = x20;
				}
				if(y20 > c.max_y || !c.started) {
					c.max_y = y20;
				}
				if(x20 < c.min_x || !c.started) {
					c.min_x = x20;
				}
				if(y20 < c.min_y || !c.started) {
					c.min_y = y20;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x20,y20,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 24:
			if(sp < 8) {
				return false;
			}
			while(i + 5 < sp - 2) {
				var cx118 = c.x + s[i];
				var cy118 = c.y + s[i + 1];
				var cx29 = cx118 + s[i + 2];
				var cy29 = cy118 + s[i + 3];
				c.x = cx29 + s[i + 4];
				c.y = cy29 + s[i + 5];
				var x21 = c.x | 0;
				var y21 = c.y | 0;
				var cx20 = cx118 | 0;
				var cy20 = cy118 | 0;
				var cx119 = cx29 | 0;
				var cy119 = cy29 | 0;
				if(c.bounds) {
					if(x21 > c.max_x || !c.started) {
						c.max_x = x21;
					}
					if(y21 > c.max_y || !c.started) {
						c.max_y = y21;
					}
					if(x21 < c.min_x || !c.started) {
						c.min_x = x21;
					}
					if(y21 < c.min_y || !c.started) {
						c.min_y = y21;
					}
					c.started = true;
					if(cx20 > c.max_x || !c.started) {
						c.max_x = cx20;
					}
					if(cy20 > c.max_y || !c.started) {
						c.max_y = cy20;
					}
					if(cx20 < c.min_x || !c.started) {
						c.min_x = cx20;
					}
					if(cy20 < c.min_y || !c.started) {
						c.min_y = cy20;
					}
					c.started = true;
					if(cx119 > c.max_x || !c.started) {
						c.max_x = cx119;
					}
					if(cy119 > c.max_y || !c.started) {
						c.max_y = cy119;
					}
					if(cx119 < c.min_x || !c.started) {
						c.min_x = cx119;
					}
					if(cy119 < c.min_y || !c.started) {
						c.min_y = cy119;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x21,y21,cx20,cy20);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx119 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy119 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			if(i + 1 >= sp) {
				return false;
			}
			c.x += s[i];
			c.y += s[i + 1];
			var x22 = c.x | 0;
			var y22 = c.y | 0;
			if(c.bounds) {
				if(x22 > c.max_x || !c.started) {
					c.max_x = x22;
				}
				if(y22 > c.max_y || !c.started) {
					c.max_y = y22;
				}
				if(x22 < c.min_x || !c.started) {
					c.min_x = x22;
				}
				if(y22 < c.min_y || !c.started) {
					c.min_y = y22;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x22,y22,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 25:
			if(sp < 8) {
				return false;
			}
			while(i + 1 < sp - 6) {
				c.x += s[i];
				c.y += s[i + 1];
				var x23 = c.x | 0;
				var y23 = c.y | 0;
				if(c.bounds) {
					if(x23 > c.max_x || !c.started) {
						c.max_x = x23;
					}
					if(y23 > c.max_y || !c.started) {
						c.max_y = y23;
					}
					if(x23 < c.min_x || !c.started) {
						c.min_x = x23;
					}
					if(y23 < c.min_y || !c.started) {
						c.min_y = y23;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x23,y23,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			if(i + 5 >= sp) {
				return false;
			}
			var cx120 = c.x + s[i];
			var cy120 = c.y + s[i + 1];
			var cx210 = cx120 + s[i + 2];
			var cy210 = cy120 + s[i + 3];
			c.x = cx210 + s[i + 4];
			c.y = cy210 + s[i + 5];
			var x24 = c.x | 0;
			var y24 = c.y | 0;
			var cx30 = cx120 | 0;
			var cy30 = cy120 | 0;
			var cx121 = cx210 | 0;
			var cy121 = cy210 | 0;
			if(c.bounds) {
				if(x24 > c.max_x || !c.started) {
					c.max_x = x24;
				}
				if(y24 > c.max_y || !c.started) {
					c.max_y = y24;
				}
				if(x24 < c.min_x || !c.started) {
					c.min_x = x24;
				}
				if(y24 < c.min_y || !c.started) {
					c.min_y = y24;
				}
				c.started = true;
				if(cx30 > c.max_x || !c.started) {
					c.max_x = cx30;
				}
				if(cy30 > c.max_y || !c.started) {
					c.max_y = cy30;
				}
				if(cx30 < c.min_x || !c.started) {
					c.min_x = cx30;
				}
				if(cy30 < c.min_y || !c.started) {
					c.min_y = cy30;
				}
				c.started = true;
				if(cx121 > c.max_x || !c.started) {
					c.max_x = cx121;
				}
				if(cy121 > c.max_y || !c.started) {
					c.max_y = cy121;
				}
				if(cx121 < c.min_x || !c.started) {
					c.min_x = cx121;
				}
				if(cy121 < c.min_y || !c.started) {
					c.min_y = cy121;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x24,y24,cx30,cy30);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx121 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy121 , Int);
			}
			c.num_vertices++;
			break;
		case 26:case 27:
			if(sp < 4) {
				return false;
			}
			f = 0.0;
			if((sp & 1) != 0) {
				f = s[i];
				++i;
			}
			while(i + 3 < sp) {
				if(b0 == 27) {
					var cx122 = c.x + s[i];
					var cy122 = c.y + f;
					var cx211 = cx122 + s[i + 1];
					var cy211 = cy122 + s[i + 2];
					c.x = cx211 + s[i + 3];
					c.y = cy211;
					var x25 = c.x | 0;
					var y25 = c.y | 0;
					var cx31 = cx122 | 0;
					var cy31 = cy122 | 0;
					var cx123 = cx211 | 0;
					var cy123 = cy211 | 0;
					if(c.bounds) {
						if(x25 > c.max_x || !c.started) {
							c.max_x = x25;
						}
						if(y25 > c.max_y || !c.started) {
							c.max_y = y25;
						}
						if(x25 < c.min_x || !c.started) {
							c.min_x = x25;
						}
						if(y25 < c.min_y || !c.started) {
							c.min_y = y25;
						}
						c.started = true;
						if(cx31 > c.max_x || !c.started) {
							c.max_x = cx31;
						}
						if(cy31 > c.max_y || !c.started) {
							c.max_y = cy31;
						}
						if(cx31 < c.min_x || !c.started) {
							c.min_x = cx31;
						}
						if(cy31 < c.min_y || !c.started) {
							c.min_y = cy31;
						}
						c.started = true;
						if(cx123 > c.max_x || !c.started) {
							c.max_x = cx123;
						}
						if(cy123 > c.max_y || !c.started) {
							c.max_y = cy123;
						}
						if(cx123 < c.min_x || !c.started) {
							c.min_x = cx123;
						}
						if(cy123 < c.min_y || !c.started) {
							c.min_y = cy123;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x25,y25,cx31,cy31);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx123 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy123 , Int);
					}
					c.num_vertices++;
				} else {
					var cx124 = c.x + f;
					var cy124 = c.y + s[i];
					var cx212 = cx124 + s[i + 1];
					var cy212 = cy124 + s[i + 2];
					c.x = cx212;
					c.y = cy212 + s[i + 3];
					var x26 = c.x | 0;
					var y26 = c.y | 0;
					var cx32 = cx124 | 0;
					var cy32 = cy124 | 0;
					var cx125 = cx212 | 0;
					var cy125 = cy212 | 0;
					if(c.bounds) {
						if(x26 > c.max_x || !c.started) {
							c.max_x = x26;
						}
						if(y26 > c.max_y || !c.started) {
							c.max_y = y26;
						}
						if(x26 < c.min_x || !c.started) {
							c.min_x = x26;
						}
						if(y26 < c.min_y || !c.started) {
							c.min_y = y26;
						}
						c.started = true;
						if(cx32 > c.max_x || !c.started) {
							c.max_x = cx32;
						}
						if(cy32 > c.max_y || !c.started) {
							c.max_y = cy32;
						}
						if(cx32 < c.min_x || !c.started) {
							c.min_x = cx32;
						}
						if(cy32 < c.min_y || !c.started) {
							c.min_y = cy32;
						}
						c.started = true;
						if(cx125 > c.max_x || !c.started) {
							c.max_x = cx125;
						}
						if(cy125 > c.max_y || !c.started) {
							c.max_y = cy125;
						}
						if(cx125 < c.min_x || !c.started) {
							c.min_x = cx125;
						}
						if(cy125 < c.min_y || !c.started) {
							c.min_y = cy125;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x26,y26,cx32,cy32);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx125 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy125 , Int);
					}
					c.num_vertices++;
				}
				f = 0.0;
				i += 4;
			}
			break;
		case 10:case 29:
			if(b0 == 10) {
				if(!has_subrs) {
					if(info.fdselect.data.get_length() != 0) {
						var fdselect = info.fdselect;
						var nranges;
						var start;
						var end;
						var v1;
						var fmt;
						var fdselector = -1;
						var i1;
						if(0 > fdselect.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
						if(fdselect.cursor >= fdselect.data.get_length()) {
							fmt = 0;
						} else {
							var pos2 = fdselect.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							fmt = fdselect.data.readU8(pos2);
						}
						if(fmt == 0) {
							var o1 = fdselect.cursor + glyph_index;
							if(o1 > fdselect.data.get_length() || o1 < 0) {
								throw haxe_Exception.thrown("Error");
							}
							fdselect.cursor = o1 > fdselect.data.get_length() || o1 < 0 ? fdselect.data.get_length() : o1;
							if(fdselect.cursor >= fdselect.data.get_length()) {
								fdselector = 0;
							} else {
								var pos3 = fdselect.cursor++;
								if(pos3 == null) {
									pos3 = 0;
								}
								fdselector = fdselect.data.readU8(pos3);
							}
						} else if(fmt == 3) {
							var v2 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i2 = _g++;
								var v3;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v3 = 0;
								} else {
									var pos4 = fdselect.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									v3 = fdselect.data.readU8(pos4);
								}
								v2 = v2 << 8 | v3;
							}
							nranges = v2;
							var v4 = 0;
							var _g2 = 0;
							var _g3 = 2;
							while(_g2 < _g3) {
								var i3 = _g2++;
								var v5;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v5 = 0;
								} else {
									var pos5 = fdselect.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									v5 = fdselect.data.readU8(pos5);
								}
								v4 = v4 << 8 | v5;
							}
							start = v4;
							var _g4 = 0;
							var _g5 = nranges;
							while(_g4 < _g5) {
								var i4 = _g4++;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v1 = 0;
								} else {
									var pos6 = fdselect.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v1 = fdselect.data.readU8(pos6);
								}
								var v6 = 0;
								var _g6 = 0;
								var _g7 = 2;
								while(_g6 < _g7) {
									var i5 = _g6++;
									var v7;
									if(fdselect.cursor >= fdselect.data.get_length()) {
										v7 = 0;
									} else {
										var pos7 = fdselect.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										v7 = fdselect.data.readU8(pos7);
									}
									v6 = v6 << 8 | v7;
								}
								end = v6;
								if(glyph_index >= start && glyph_index < end) {
									fdselector = v1;
									break;
								}
								start = end;
							}
						}
						if(fdselector == -1) {
							var r = new kha_graphics2_truetype_Stbtt_$_$buf();
							r.data = null;
							r.cursor = 0;
						}
						var cff = info.cff;
						var b2 = info.fontdicts;
						if(0 > b2.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = 0 > b2.data.get_length() ? b2.data.get_length() : 0;
						var v8 = 0;
						var _g8 = 0;
						var _g9 = 2;
						while(_g8 < _g9) {
							var i6 = _g8++;
							var v9;
							if(b2.cursor >= b2.data.get_length()) {
								v9 = 0;
							} else {
								var pos8 = b2.cursor++;
								if(pos8 == null) {
									pos8 = 0;
								}
								v9 = b2.data.readU8(pos8);
							}
							v8 = v8 << 8 | v9;
						}
						var count = v8;
						var offsize;
						if(b2.cursor >= b2.data.get_length()) {
							offsize = 0;
						} else {
							var pos9 = b2.cursor++;
							if(pos9 == null) {
								pos9 = 0;
							}
							offsize = b2.data.readU8(pos9);
						}
						if(!(fdselector >= 0 && fdselector < count)) {
							throw haxe_Exception.thrown("Error");
						}
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var o2 = b2.cursor + fdselector * offsize;
						if(o2 > b2.data.get_length() || o2 < 0) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = o2 > b2.data.get_length() || o2 < 0 ? b2.data.get_length() : o2;
						var v10 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g10 = 0;
						var _g11 = offsize;
						while(_g10 < _g11) {
							var i7 = _g10++;
							var v11;
							if(b2.cursor >= b2.data.get_length()) {
								v11 = 0;
							} else {
								var pos10 = b2.cursor++;
								if(pos10 == null) {
									pos10 = 0;
								}
								v11 = b2.data.readU8(pos10);
							}
							v10 = v10 << 8 | v11;
						}
						var start1 = v10;
						var v12 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g12 = 0;
						var _g13 = offsize;
						while(_g12 < _g13) {
							var i8 = _g12++;
							var v13;
							if(b2.cursor >= b2.data.get_length()) {
								v13 = 0;
							} else {
								var pos11 = b2.cursor++;
								if(pos11 == null) {
									pos11 = 0;
								}
								v13 = b2.data.readU8(pos11);
							}
							v12 = v12 << 8 | v13;
						}
						var end1 = v12;
						var o3 = 2 + (count + 1) * offsize + start1;
						var s1 = end1 - start1;
						var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
						r1.data = null;
						r1.cursor = 0;
						var r2 = r1;
						var fontdict;
						if(o3 < 0 || s1 < 0 || o3 > b2.data.get_length() || s1 > b2.data.get_length() - o3) {
							fontdict = r2;
						} else {
							r2.data = b2.data.sub(o3,s1);
							fontdict = r2;
						}
						var subrsoff = [0];
						var private_loc = [0,0];
						var i9 = 0;
						if(0 > fontdict.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
						var ret = null;
						while(fontdict.cursor < fontdict.data.get_length()) {
							var start2 = fontdict.cursor;
							var op;
							while(true) {
								var subrs1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									subrs1 = 0;
								} else {
									var pos12 = fontdict.cursor;
									if(pos12 == null) {
										pos12 = 0;
									}
									subrs1 = fontdict.data.readU8(pos12);
								}
								if(!(subrs1 >= 28)) {
									break;
								}
								var v14;
								var b01;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									b01 = 0;
								} else {
									var pos13 = fontdict.cursor;
									if(pos13 == null) {
										pos13 = 0;
									}
									b01 = fontdict.data.readU8(pos13);
								}
								if(b01 < 28) {
									throw haxe_Exception.thrown("Error");
								}
								if(b01 == 30) {
									var o4 = fontdict.cursor + 1;
									if(o4 > fontdict.data.get_length() || o4 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									fontdict.cursor = o4 > fontdict.data.get_length() || o4 < 0 ? fontdict.data.get_length() : o4;
									while(fontdict.cursor < fontdict.data.get_length()) {
										if(fontdict.cursor >= fontdict.data.get_length()) {
											v14 = 0;
										} else {
											var pos14 = fontdict.cursor++;
											if(pos14 == null) {
												pos14 = 0;
											}
											v14 = fontdict.data.readU8(pos14);
										}
										if((v14 & 15) == 15 || v14 >> 4 == 15) {
											break;
										}
									}
								} else {
									var b02;
									if(fontdict.cursor >= fontdict.data.get_length()) {
										b02 = 0;
									} else {
										var pos15 = fontdict.cursor++;
										if(pos15 == null) {
											pos15 = 0;
										}
										b02 = fontdict.data.readU8(pos15);
									}
									if(!(b02 >= 32 && b02 <= 246)) {
										if(b02 >= 247 && b02 <= 250) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos16 = fontdict.cursor++;
												if(pos16 == null) {
													pos16 = 0;
												}
												fontdict.data.readU8(pos16);
											}
										} else if(b02 >= 251 && b02 <= 254) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos17 = fontdict.cursor++;
												if(pos17 == null) {
													pos17 = 0;
												}
												fontdict.data.readU8(pos17);
											}
										} else if(b02 == 28) {
											var v15 = 0;
											var _g14 = 0;
											var _g15 = 2;
											while(_g14 < _g15) {
												var i10 = _g14++;
												var v16;
												if(fontdict.cursor >= fontdict.data.get_length()) {
													v16 = 0;
												} else {
													var pos18 = fontdict.cursor++;
													if(pos18 == null) {
														pos18 = 0;
													}
													v16 = fontdict.data.readU8(pos18);
												}
												v15 = v15 << 8 | v16;
											}
										} else if(b02 == 29) {
											var v17 = 0;
											var _g16 = 0;
											var _g17 = 4;
											while(_g16 < _g17) {
												var i11 = _g16++;
												var v18;
												if(fontdict.cursor >= fontdict.data.get_length()) {
													v18 = 0;
												} else {
													var pos19 = fontdict.cursor++;
													if(pos19 == null) {
														pos19 = 0;
													}
													v18 = fontdict.data.readU8(pos19);
												}
												v17 = v17 << 8 | v18;
											}
										} else {
											throw haxe_Exception.thrown("Error");
										}
									}
								}
							}
							var end2 = fontdict.cursor;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								op = 0;
							} else {
								var pos20 = fontdict.cursor++;
								if(pos20 == null) {
									pos20 = 0;
								}
								op = fontdict.data.readU8(pos20);
							}
							if(op == 12) {
								var op1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									op1 = 0;
								} else {
									var pos21 = fontdict.cursor++;
									if(pos21 == null) {
										pos21 = 0;
									}
									op1 = fontdict.data.readU8(pos21);
								}
								op = op1 | 256;
							}
							if(op == 18) {
								var s2 = end2 - start2;
								var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r3.data = null;
								r3.cursor = 0;
								var r4 = r3;
								if(start2 < 0 || s2 < 0 || start2 > fontdict.data.get_length() || s2 > fontdict.data.get_length() - start2) {
									ret = r4;
								} else {
									r4.data = fontdict.data.sub(start2,s2);
									ret = r4;
								}
								break;
							}
						}
						var operands;
						if(ret != null) {
							operands = ret;
						} else {
							var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r5.data = null;
							r5.cursor = 0;
							var r6 = r5;
							if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
								operands = r6;
							} else {
								r6.data = fontdict.data.sub(0,0);
								operands = r6;
							}
						}
						while(i9 < 2 && operands.cursor < operands.data.get_length()) {
							var b03;
							if(operands.cursor >= operands.data.get_length()) {
								b03 = 0;
							} else {
								var pos22 = operands.cursor++;
								if(pos22 == null) {
									pos22 = 0;
								}
								b03 = operands.data.readU8(pos22);
							}
							var subrs2;
							if(b03 >= 32 && b03 <= 246) {
								subrs2 = b03 - 139;
							} else if(b03 >= 247 && b03 <= 250) {
								var subrs3;
								if(operands.cursor >= operands.data.get_length()) {
									subrs3 = 0;
								} else {
									var pos23 = operands.cursor++;
									if(pos23 == null) {
										pos23 = 0;
									}
									subrs3 = operands.data.readU8(pos23);
								}
								subrs2 = (b03 - 247) * 256 + subrs3 + 108;
							} else if(b03 >= 251 && b03 <= 254) {
								var subrs4;
								if(operands.cursor >= operands.data.get_length()) {
									subrs4 = 0;
								} else {
									var pos24 = operands.cursor++;
									if(pos24 == null) {
										pos24 = 0;
									}
									subrs4 = operands.data.readU8(pos24);
								}
								subrs2 = -(b03 - 251) * 256 - subrs4 - 108;
							} else if(b03 == 28) {
								var v19 = 0;
								var _g18 = 0;
								var _g19 = 2;
								while(_g18 < _g19) {
									var i12 = _g18++;
									var v20;
									if(operands.cursor >= operands.data.get_length()) {
										v20 = 0;
									} else {
										var pos25 = operands.cursor++;
										if(pos25 == null) {
											pos25 = 0;
										}
										v20 = operands.data.readU8(pos25);
									}
									v19 = v19 << 8 | v20;
								}
								subrs2 = v19;
							} else if(b03 == 29) {
								var v21 = 0;
								var _g20 = 0;
								var _g21 = 4;
								while(_g20 < _g21) {
									var i13 = _g20++;
									var v22;
									if(operands.cursor >= operands.data.get_length()) {
										v22 = 0;
									} else {
										var pos26 = operands.cursor++;
										if(pos26 == null) {
											pos26 = 0;
										}
										v22 = operands.data.readU8(pos26);
									}
									v21 = v21 << 8 | v22;
								}
								subrs2 = v21;
							} else {
								throw haxe_Exception.thrown("Error");
							}
							private_loc[i9] = subrs2;
							++i9;
						}
						if(private_loc[1] == 0 || private_loc[0] == 0) {
							var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r7.data = null;
							r7.cursor = 0;
							subrs = r7;
						} else {
							var o5 = private_loc[1];
							var s3 = private_loc[0];
							var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r8.data = null;
							r8.cursor = 0;
							var r9 = r8;
							var pdict;
							if(o5 < 0 || s3 < 0 || o5 > cff.data.get_length() || s3 > cff.data.get_length() - o5) {
								pdict = r9;
							} else {
								r9.data = cff.data.sub(o5,s3);
								pdict = r9;
							}
							var i14 = 0;
							if(0 > pdict.data.get_length()) {
								throw haxe_Exception.thrown("Error");
							}
							pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
							var ret1 = null;
							while(pdict.cursor < pdict.data.get_length()) {
								var start3 = pdict.cursor;
								var op2;
								while(true) {
									var subrs5;
									if(pdict.cursor >= pdict.data.get_length()) {
										subrs5 = 0;
									} else {
										var pos27 = pdict.cursor;
										if(pos27 == null) {
											pos27 = 0;
										}
										subrs5 = pdict.data.readU8(pos27);
									}
									if(!(subrs5 >= 28)) {
										break;
									}
									var v23;
									var b04;
									if(pdict.cursor >= pdict.data.get_length()) {
										b04 = 0;
									} else {
										var pos28 = pdict.cursor;
										if(pos28 == null) {
											pos28 = 0;
										}
										b04 = pdict.data.readU8(pos28);
									}
									if(b04 < 28) {
										throw haxe_Exception.thrown("Error");
									}
									if(b04 == 30) {
										var o6 = pdict.cursor + 1;
										if(o6 > pdict.data.get_length() || o6 < 0) {
											throw haxe_Exception.thrown("Error");
										}
										pdict.cursor = o6 > pdict.data.get_length() || o6 < 0 ? pdict.data.get_length() : o6;
										while(pdict.cursor < pdict.data.get_length()) {
											if(pdict.cursor >= pdict.data.get_length()) {
												v23 = 0;
											} else {
												var pos29 = pdict.cursor++;
												if(pos29 == null) {
													pos29 = 0;
												}
												v23 = pdict.data.readU8(pos29);
											}
											if((v23 & 15) == 15 || v23 >> 4 == 15) {
												break;
											}
										}
									} else {
										var b05;
										if(pdict.cursor >= pdict.data.get_length()) {
											b05 = 0;
										} else {
											var pos30 = pdict.cursor++;
											if(pos30 == null) {
												pos30 = 0;
											}
											b05 = pdict.data.readU8(pos30);
										}
										if(!(b05 >= 32 && b05 <= 246)) {
											if(b05 >= 247 && b05 <= 250) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos31 = pdict.cursor++;
													if(pos31 == null) {
														pos31 = 0;
													}
													pdict.data.readU8(pos31);
												}
											} else if(b05 >= 251 && b05 <= 254) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos32 = pdict.cursor++;
													if(pos32 == null) {
														pos32 = 0;
													}
													pdict.data.readU8(pos32);
												}
											} else if(b05 == 28) {
												var v24 = 0;
												var _g22 = 0;
												var _g23 = 2;
												while(_g22 < _g23) {
													var i15 = _g22++;
													var v25;
													if(pdict.cursor >= pdict.data.get_length()) {
														v25 = 0;
													} else {
														var pos33 = pdict.cursor++;
														if(pos33 == null) {
															pos33 = 0;
														}
														v25 = pdict.data.readU8(pos33);
													}
													v24 = v24 << 8 | v25;
												}
											} else if(b05 == 29) {
												var v26 = 0;
												var _g24 = 0;
												var _g25 = 4;
												while(_g24 < _g25) {
													var i16 = _g24++;
													var v27;
													if(pdict.cursor >= pdict.data.get_length()) {
														v27 = 0;
													} else {
														var pos34 = pdict.cursor++;
														if(pos34 == null) {
															pos34 = 0;
														}
														v27 = pdict.data.readU8(pos34);
													}
													v26 = v26 << 8 | v27;
												}
											} else {
												throw haxe_Exception.thrown("Error");
											}
										}
									}
								}
								var end3 = pdict.cursor;
								if(pdict.cursor >= pdict.data.get_length()) {
									op2 = 0;
								} else {
									var pos35 = pdict.cursor++;
									if(pos35 == null) {
										pos35 = 0;
									}
									op2 = pdict.data.readU8(pos35);
								}
								if(op2 == 12) {
									var op3;
									if(pdict.cursor >= pdict.data.get_length()) {
										op3 = 0;
									} else {
										var pos36 = pdict.cursor++;
										if(pos36 == null) {
											pos36 = 0;
										}
										op3 = pdict.data.readU8(pos36);
									}
									op2 = op3 | 256;
								}
								if(op2 == 19) {
									var s4 = end3 - start3;
									var r10 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r10.data = null;
									r10.cursor = 0;
									var r11 = r10;
									if(start3 < 0 || s4 < 0 || start3 > pdict.data.get_length() || s4 > pdict.data.get_length() - start3) {
										ret1 = r11;
									} else {
										r11.data = pdict.data.sub(start3,s4);
										ret1 = r11;
									}
									break;
								}
							}
							var operands1;
							if(ret1 != null) {
								operands1 = ret1;
							} else {
								var r12 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r12.data = null;
								r12.cursor = 0;
								var r13 = r12;
								if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
									operands1 = r13;
								} else {
									r13.data = pdict.data.sub(0,0);
									operands1 = r13;
								}
							}
							while(i14 < 1 && operands1.cursor < operands1.data.get_length()) {
								var b06;
								if(operands1.cursor >= operands1.data.get_length()) {
									b06 = 0;
								} else {
									var pos37 = operands1.cursor++;
									if(pos37 == null) {
										pos37 = 0;
									}
									b06 = operands1.data.readU8(pos37);
								}
								var subrs6;
								if(b06 >= 32 && b06 <= 246) {
									subrs6 = b06 - 139;
								} else if(b06 >= 247 && b06 <= 250) {
									var subrs7;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs7 = 0;
									} else {
										var pos38 = operands1.cursor++;
										if(pos38 == null) {
											pos38 = 0;
										}
										subrs7 = operands1.data.readU8(pos38);
									}
									subrs6 = (b06 - 247) * 256 + subrs7 + 108;
								} else if(b06 >= 251 && b06 <= 254) {
									var subrs8;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs8 = 0;
									} else {
										var pos39 = operands1.cursor++;
										if(pos39 == null) {
											pos39 = 0;
										}
										subrs8 = operands1.data.readU8(pos39);
									}
									subrs6 = -(b06 - 251) * 256 - subrs8 - 108;
								} else if(b06 == 28) {
									var v28 = 0;
									var _g26 = 0;
									var _g27 = 2;
									while(_g26 < _g27) {
										var i17 = _g26++;
										var v29;
										if(operands1.cursor >= operands1.data.get_length()) {
											v29 = 0;
										} else {
											var pos40 = operands1.cursor++;
											if(pos40 == null) {
												pos40 = 0;
											}
											v29 = operands1.data.readU8(pos40);
										}
										v28 = v28 << 8 | v29;
									}
									subrs6 = v28;
								} else if(b06 == 29) {
									var v30 = 0;
									var _g28 = 0;
									var _g29 = 4;
									while(_g28 < _g29) {
										var i18 = _g28++;
										var v31;
										if(operands1.cursor >= operands1.data.get_length()) {
											v31 = 0;
										} else {
											var pos41 = operands1.cursor++;
											if(pos41 == null) {
												pos41 = 0;
											}
											v31 = operands1.data.readU8(pos41);
										}
										v30 = v30 << 8 | v31;
									}
									subrs6 = v30;
								} else {
									throw haxe_Exception.thrown("Error");
								}
								subrsoff[i14] = subrs6;
								++i14;
							}
							if(subrsoff[0] == 0) {
								var r14 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r14.data = null;
								r14.cursor = 0;
								subrs = r14;
							} else {
								var o7 = private_loc[1] + subrsoff[0];
								if(o7 > cff.data.get_length() || o7 < 0) {
									throw haxe_Exception.thrown("Error");
								}
								cff.cursor = o7 > cff.data.get_length() || o7 < 0 ? cff.data.get_length() : o7;
								var start4 = cff.cursor;
								var v32 = 0;
								var _g30 = 0;
								var _g31 = 2;
								while(_g30 < _g31) {
									var i19 = _g30++;
									var v33;
									if(cff.cursor >= cff.data.get_length()) {
										v33 = 0;
									} else {
										var pos42 = cff.cursor++;
										if(pos42 == null) {
											pos42 = 0;
										}
										v33 = cff.data.readU8(pos42);
									}
									v32 = v32 << 8 | v33;
								}
								var count1 = v32;
								if(count1 > 0) {
									var offsize1;
									if(cff.cursor >= cff.data.get_length()) {
										offsize1 = 0;
									} else {
										var pos43 = cff.cursor++;
										if(pos43 == null) {
											pos43 = 0;
										}
										offsize1 = cff.data.readU8(pos43);
									}
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var o8 = cff.cursor + offsize1 * count1;
									if(o8 > cff.data.get_length() || o8 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o8 > cff.data.get_length() || o8 < 0 ? cff.data.get_length() : o8;
									var v34 = 0;
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var _g32 = 0;
									var _g33 = offsize1;
									while(_g32 < _g33) {
										var i20 = _g32++;
										var v35;
										if(cff.cursor >= cff.data.get_length()) {
											v35 = 0;
										} else {
											var pos44 = cff.cursor++;
											if(pos44 == null) {
												pos44 = 0;
											}
											v35 = cff.data.readU8(pos44);
										}
										v34 = v34 << 8 | v35;
									}
									var o9 = cff.cursor + (v34 - 1);
									if(o9 > cff.data.get_length() || o9 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o9 > cff.data.get_length() || o9 < 0 ? cff.data.get_length() : o9;
									var s5 = cff.cursor - start4;
									var r15 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r15.data = null;
									r15.cursor = 0;
									var r16 = r15;
									if(start4 < 0 || s5 < 0 || start4 > cff.data.get_length() || s5 > cff.data.get_length() - start4) {
										subrs = r16;
									} else {
										r16.data = cff.data.sub(start4,s5);
										subrs = r16;
									}
								} else {
									subrs = cff;
								}
							}
						}
					}
					has_subrs = true;
				}
			}
			if(sp < 1) {
				return false;
			}
			v = s[--sp] | 0;
			if(subr_stack_height >= 10) {
				return false;
			}
			subr_stack[subr_stack_height++] = b;
			var idx = b0 == 10 ? subrs : info.gsubrs;
			var n = v;
			if(0 > idx.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
			var v36 = 0;
			var _g34 = 0;
			var _g35 = 2;
			while(_g34 < _g35) {
				var i21 = _g34++;
				var v37;
				if(idx.cursor >= idx.data.get_length()) {
					v37 = 0;
				} else {
					var pos45 = idx.cursor++;
					if(pos45 == null) {
						pos45 = 0;
					}
					v37 = idx.data.readU8(pos45);
				}
				v36 = v36 << 8 | v37;
			}
			var count2 = v36;
			var bias = 107;
			if(count2 >= 33900) {
				bias = 32768;
			} else if(count2 >= 1240) {
				bias = 1131;
			}
			n += bias;
			if(n < 0 || n >= count2) {
				var r17 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r17.data = null;
				r17.cursor = 0;
				b = r17;
			} else {
				if(0 > idx.data.get_length()) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
				var v38 = 0;
				var _g36 = 0;
				var _g37 = 2;
				while(_g36 < _g37) {
					var i22 = _g36++;
					var v39;
					if(idx.cursor >= idx.data.get_length()) {
						v39 = 0;
					} else {
						var pos46 = idx.cursor++;
						if(pos46 == null) {
							pos46 = 0;
						}
						v39 = idx.data.readU8(pos46);
					}
					v38 = v38 << 8 | v39;
				}
				var count3 = v38;
				var offsize2;
				if(idx.cursor >= idx.data.get_length()) {
					offsize2 = 0;
				} else {
					var pos47 = idx.cursor++;
					if(pos47 == null) {
						pos47 = 0;
					}
					offsize2 = idx.data.readU8(pos47);
				}
				if(!(n >= 0 && n < count3)) {
					throw haxe_Exception.thrown("Error");
				}
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o10 = idx.cursor + n * offsize2;
				if(o10 > idx.data.get_length() || o10 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = o10 > idx.data.get_length() || o10 < 0 ? idx.data.get_length() : o10;
				var v40 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g38 = 0;
				var _g39 = offsize2;
				while(_g38 < _g39) {
					var i23 = _g38++;
					var v41;
					if(idx.cursor >= idx.data.get_length()) {
						v41 = 0;
					} else {
						var pos48 = idx.cursor++;
						if(pos48 == null) {
							pos48 = 0;
						}
						v41 = idx.data.readU8(pos48);
					}
					v40 = v40 << 8 | v41;
				}
				var start5 = v40;
				var v42 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g40 = 0;
				var _g41 = offsize2;
				while(_g40 < _g41) {
					var i24 = _g40++;
					var v43;
					if(idx.cursor >= idx.data.get_length()) {
						v43 = 0;
					} else {
						var pos49 = idx.cursor++;
						if(pos49 == null) {
							pos49 = 0;
						}
						v43 = idx.data.readU8(pos49);
					}
					v42 = v42 << 8 | v43;
				}
				var end4 = v42;
				var o11 = 2 + (count3 + 1) * offsize2 + start5;
				var s6 = end4 - start5;
				var r18 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r18.data = null;
				r18.cursor = 0;
				var r19 = r18;
				if(o11 < 0 || s6 < 0 || o11 > idx.data.get_length() || s6 > idx.data.get_length() - o11) {
					b = r19;
				} else {
					r19.data = idx.data.sub(o11,s6);
					b = r19;
				}
			}
			if(b.data.get_length() == 0) {
				return false;
			}
			b.cursor = 0;
			clear_stack = false;
			break;
		case 30:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx126 = c.x;
				var cy126 = c.y + s[i];
				var cx213 = cx126 + s[i + 1];
				var cy213 = cy126 + s[i + 2];
				c.x = cx213 + s[i + 3];
				c.y = cy213 + (sp - i == 5 ? s[i + 4] : 0);
				var x27 = c.x | 0;
				var y27 = c.y | 0;
				var cx33 = cx126 | 0;
				var cy33 = cy126 | 0;
				var cx127 = cx213 | 0;
				var cy127 = cy213 | 0;
				if(c.bounds) {
					if(x27 > c.max_x || !c.started) {
						c.max_x = x27;
					}
					if(y27 > c.max_y || !c.started) {
						c.max_y = y27;
					}
					if(x27 < c.min_x || !c.started) {
						c.min_x = x27;
					}
					if(y27 < c.min_y || !c.started) {
						c.min_y = y27;
					}
					c.started = true;
					if(cx33 > c.max_x || !c.started) {
						c.max_x = cx33;
					}
					if(cy33 > c.max_y || !c.started) {
						c.max_y = cy33;
					}
					if(cx33 < c.min_x || !c.started) {
						c.min_x = cx33;
					}
					if(cy33 < c.min_y || !c.started) {
						c.min_y = cy33;
					}
					c.started = true;
					if(cx127 > c.max_x || !c.started) {
						c.max_x = cx127;
					}
					if(cy127 > c.max_y || !c.started) {
						c.max_y = cy127;
					}
					if(cx127 < c.min_x || !c.started) {
						c.min_x = cx127;
					}
					if(cy127 < c.min_y || !c.started) {
						c.min_y = cy127;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x27,y27,cx33,cy33);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx127 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy127 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx128 = c.x + s[i];
				var cy128 = c.y;
				var cx214 = cx128 + s[i + 1];
				var cy214 = cy128 + s[i + 2];
				c.x = cx214 + (sp - i == 5 ? s[i + 4] : 0);
				c.y = cy214 + s[i + 3];
				var x28 = c.x | 0;
				var y28 = c.y | 0;
				var cx34 = cx128 | 0;
				var cy34 = cy128 | 0;
				var cx129 = cx214 | 0;
				var cy129 = cy214 | 0;
				if(c.bounds) {
					if(x28 > c.max_x || !c.started) {
						c.max_x = x28;
					}
					if(y28 > c.max_y || !c.started) {
						c.max_y = y28;
					}
					if(x28 < c.min_x || !c.started) {
						c.min_x = x28;
					}
					if(y28 < c.min_y || !c.started) {
						c.min_y = y28;
					}
					c.started = true;
					if(cx34 > c.max_x || !c.started) {
						c.max_x = cx34;
					}
					if(cy34 > c.max_y || !c.started) {
						c.max_y = cy34;
					}
					if(cx34 < c.min_x || !c.started) {
						c.min_x = cx34;
					}
					if(cy34 < c.min_y || !c.started) {
						c.min_y = cy34;
					}
					c.started = true;
					if(cx129 > c.max_x || !c.started) {
						c.max_x = cx129;
					}
					if(cy129 > c.max_y || !c.started) {
						c.max_y = cy129;
					}
					if(cx129 < c.min_x || !c.started) {
						c.min_x = cx129;
					}
					if(cy129 < c.min_y || !c.started) {
						c.min_y = cy129;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x28,y28,cx34,cy34);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx129 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy129 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		case 31:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx130 = c.x + s[i];
				var cy130 = c.y;
				var cx215 = cx130 + s[i + 1];
				var cy215 = cy130 + s[i + 2];
				c.x = cx215 + (sp - i == 5 ? s[i + 4] : 0);
				c.y = cy215 + s[i + 3];
				var x29 = c.x | 0;
				var y29 = c.y | 0;
				var cx35 = cx130 | 0;
				var cy35 = cy130 | 0;
				var cx131 = cx215 | 0;
				var cy131 = cy215 | 0;
				if(c.bounds) {
					if(x29 > c.max_x || !c.started) {
						c.max_x = x29;
					}
					if(y29 > c.max_y || !c.started) {
						c.max_y = y29;
					}
					if(x29 < c.min_x || !c.started) {
						c.min_x = x29;
					}
					if(y29 < c.min_y || !c.started) {
						c.min_y = y29;
					}
					c.started = true;
					if(cx35 > c.max_x || !c.started) {
						c.max_x = cx35;
					}
					if(cy35 > c.max_y || !c.started) {
						c.max_y = cy35;
					}
					if(cx35 < c.min_x || !c.started) {
						c.min_x = cx35;
					}
					if(cy35 < c.min_y || !c.started) {
						c.min_y = cy35;
					}
					c.started = true;
					if(cx131 > c.max_x || !c.started) {
						c.max_x = cx131;
					}
					if(cy131 > c.max_y || !c.started) {
						c.max_y = cy131;
					}
					if(cx131 < c.min_x || !c.started) {
						c.min_x = cx131;
					}
					if(cy131 < c.min_y || !c.started) {
						c.min_y = cy131;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x29,y29,cx35,cy35);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx131 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy131 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx132 = c.x;
				var cy132 = c.y + s[i];
				var cx216 = cx132 + s[i + 1];
				var cy216 = cy132 + s[i + 2];
				c.x = cx216 + s[i + 3];
				c.y = cy216 + (sp - i == 5 ? s[i + 4] : 0);
				var x30 = c.x | 0;
				var y30 = c.y | 0;
				var cx36 = cx132 | 0;
				var cy36 = cy132 | 0;
				var cx133 = cx216 | 0;
				var cy133 = cy216 | 0;
				if(c.bounds) {
					if(x30 > c.max_x || !c.started) {
						c.max_x = x30;
					}
					if(y30 > c.max_y || !c.started) {
						c.max_y = y30;
					}
					if(x30 < c.min_x || !c.started) {
						c.min_x = x30;
					}
					if(y30 < c.min_y || !c.started) {
						c.min_y = y30;
					}
					c.started = true;
					if(cx36 > c.max_x || !c.started) {
						c.max_x = cx36;
					}
					if(cy36 > c.max_y || !c.started) {
						c.max_y = cy36;
					}
					if(cx36 < c.min_x || !c.started) {
						c.min_x = cx36;
					}
					if(cy36 < c.min_y || !c.started) {
						c.min_y = cy36;
					}
					c.started = true;
					if(cx133 > c.max_x || !c.started) {
						c.max_x = cx133;
					}
					if(cy133 > c.max_y || !c.started) {
						c.max_y = cy133;
					}
					if(cx133 < c.min_x || !c.started) {
						c.min_x = cx133;
					}
					if(cy133 < c.min_y || !c.started) {
						c.min_y = cy133;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x30,y30,cx36,cy36);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx133 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy133 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		default:
			if(b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
				return false;
			}
			if(b0 == 255) {
				var v44 = 0;
				var _g42 = 0;
				var _g43 = 4;
				while(_g42 < _g43) {
					var i25 = _g42++;
					var v45;
					if(b.cursor >= b.data.get_length()) {
						v45 = 0;
					} else {
						var pos50 = b.cursor++;
						if(pos50 == null) {
							pos50 = 0;
						}
						v45 = b.data.readU8(pos50);
					}
					v44 = v44 << 8 | v45;
				}
				f = v44 / 65536;
			} else {
				var o12 = b.cursor + (-1);
				if(o12 > b.data.get_length() || o12 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o12 > b.data.get_length() || o12 < 0 ? b.data.get_length() : o12;
				var b07;
				if(b.cursor >= b.data.get_length()) {
					b07 = 0;
				} else {
					var pos51 = b.cursor++;
					if(pos51 == null) {
						pos51 = 0;
					}
					b07 = b.data.readU8(pos51);
				}
				if(b07 >= 32 && b07 <= 246) {
					f = b07 - 139;
				} else if(b07 >= 247 && b07 <= 250) {
					var f1;
					if(b.cursor >= b.data.get_length()) {
						f1 = 0;
					} else {
						var pos52 = b.cursor++;
						if(pos52 == null) {
							pos52 = 0;
						}
						f1 = b.data.readU8(pos52);
					}
					f = (b07 - 247) * 256 + f1 + 108;
				} else if(b07 >= 251 && b07 <= 254) {
					var f2;
					if(b.cursor >= b.data.get_length()) {
						f2 = 0;
					} else {
						var pos53 = b.cursor++;
						if(pos53 == null) {
							pos53 = 0;
						}
						f2 = b.data.readU8(pos53);
					}
					f = -(b07 - 251) * 256 - f2 - 108;
				} else if(b07 == 28) {
					var v46 = 0;
					var _g44 = 0;
					var _g45 = 2;
					while(_g44 < _g45) {
						var i26 = _g44++;
						var v47;
						if(b.cursor >= b.data.get_length()) {
							v47 = 0;
						} else {
							var pos54 = b.cursor++;
							if(pos54 == null) {
								pos54 = 0;
							}
							v47 = b.data.readU8(pos54);
						}
						v46 = v46 << 8 | v47;
					}
					f = v46;
				} else if(b07 == 29) {
					var v48 = 0;
					var _g46 = 0;
					var _g47 = 4;
					while(_g46 < _g47) {
						var i27 = _g46++;
						var v49;
						if(b.cursor >= b.data.get_length()) {
							v49 = 0;
						} else {
							var pos55 = b.cursor++;
							if(pos55 == null) {
								pos55 = 0;
							}
							v49 = b.data.readU8(pos55);
						}
						v48 = v48 << 8 | v49;
					}
					f = v48;
				} else {
					throw haxe_Exception.thrown("Error");
				}
			}
			if(sp >= 48) {
				return false;
			}
			s[sp++] = f;
			clear_stack = false;
		}
		if(clear_stack) {
			sp = 0;
		}
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2 = function(info,glyph_index) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var count_ctx = tmp;
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = false;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var output_ctx = tmp;
	if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,count_ctx)) {
		var this1 = new Array(count_ctx.num_vertices);
		output_ctx.pvertices = this1;
		var _g = 0;
		var _g1 = count_ctx.num_vertices;
		while(_g < _g1) {
			var i = _g++;
			output_ctx.pvertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
		}
		if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,output_ctx)) {
			if(output_ctx.num_vertices != count_ctx.num_vertices) {
				throw haxe_Exception.thrown("Error");
			}
			return output_ctx.pvertices;
		}
	}
	return null;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2 = function(info,glyph_index,rect) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var c = tmp;
	var r = kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,c);
	if(rect != null) {
		rect.x0 = r ? c.min_x : 0;
		rect.y0 = r ? c.min_y : 0;
		rect.x1 = r ? c.max_x : 0;
		rect.y1 = r ? c.max_y : 0;
	}
	if(r) {
		return c.num_vertices;
	} else {
		return 0;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	if(info.cff.data == null || info.cff.data.get_length() == 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT(info,glyph_index);
	} else {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2(info,glyph_index);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	} else {
		var p = info.data;
		var pos = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var pos = kern + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var pos = kern + 8;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) != 1) {
		return 0;
	}
	var l = 0;
	var pos = kern + 10;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var r = (ch2 | ch1 << 8) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos = kern + 18 + m * 6;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = data.readU8(pos1);
		var ch2 = data.readU8(pos1 + 1);
		var ch3 = data.readU8(pos1 + 2);
		var ch4 = data.readU8(pos1 + 3);
		straw = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos2 = kern + 22 + m * 6;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var n = ch21 | ch11 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.descent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 8;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.lineGap = (n & 32768) != 0 ? n - 65536 : n;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 38;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.y0 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 40;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x1 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 42;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.y1 = (n & 32768) != 0 ? n - 65536 : n;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n1 = ch2 | ch1 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		throw haxe_Exception.thrown("Error");
	}
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw haxe_Exception.thrown("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(x0 <= x && x1 <= x) {
		scanline[scanlineIndex + x] += e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
		scanline[scanlineIndex + x] += e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw haxe_Exception.thrown("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw haxe_Exception.thrown("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x] += e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					scanline_fill[scanline_fillIndex + x] += e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					scanline[x11] += area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g = x11 + 1;
					var _g1 = x2;
					while(_g < _g1) {
						var x3 = _g++;
						scanline[x3] += area + step / 2;
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x2] += area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing);
					scanline_fill[scanline_fillIndex + x2] += sign * (sy1 - sy0);
				}
			} else {
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var x4 = _g2++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this1 = new Array(129);
		scanline = this1;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw haxe_Exception.thrown("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw haxe_Exception.thrown("Error");
				}
				if(z1 != null) {
					if(j == 0 && off_y != 0) {
						if(z1.ey < scan_y_top) {
							z1.ey = scan_y_top;
						}
					}
					if(!(z1.ey >= scan_y_top)) {
						throw haxe_Exception.thrown("Error");
					}
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var t = p[i];
		var a = t;
		j = i;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i = _g++;
		n += wcount[i];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g = 0;
		var _g1 = e.length;
		while(_g < _g1) {
			var i = _g++;
			e[i] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i = _g++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i];
		j = wcount[i] - 1;
		var _g2 = 0;
		var _g3 = wcount[i];
		while(_g2 < _g3) {
			var k = _g2++;
			var a = k;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k].y) {
				j = k;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k].y : p[pIndex + j].y < p[pIndex + k].y) {
				e[n].invert = true;
				a = j;
				b = k;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic = function(points,num_points,x0,y0,x1,y1,x2,y2,x3,y3,objspace_flatness_squared,n) {
	var dx0 = x1 - x0;
	var dy0 = y1 - y0;
	var dx1 = x2 - x1;
	var dy1 = y2 - y1;
	var dx2 = x3 - x2;
	var dy2 = y3 - y2;
	var dx = x3 - x0;
	var dy = y3 - y0;
	var longlen = Math.sqrt(dx0 * dx0 + dy0 * dy0) + Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2);
	var shortlen = Math.sqrt(dx * dx + dy * dy);
	var flatness_squared = longlen * longlen - shortlen * shortlen;
	if(n > 16) {
		return;
	}
	if(flatness_squared > objspace_flatness_squared) {
		var x01 = (x0 + x1) / 2;
		var y01 = (y0 + y1) / 2;
		var x12 = (x1 + x2) / 2;
		var y12 = (y1 + y2) / 2;
		var x23 = (x2 + x3) / 2;
		var y23 = (y2 + y3) / 2;
		var xa = (x01 + x12) / 2;
		var ya = (y01 + y12) / 2;
		var xb = (x12 + x23) / 2;
		var yb = (y12 + y23) / 2;
		var mx = (xa + xb) / 2;
		var my = (ya + yb) / 2;
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,x0,y0,x01,y01,xa,ya,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,mx,my,xb,yb,x23,y23,x3,y3,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x3,y3);
		num_points.value += 1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i = _g++;
		if(vertices[i].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g = 0;
	while(_g < 2) {
		var pass = _g++;
		var x = 0;
		var y = 0;
		if(pass == 1) {
			var this1 = new Array(num_points);
			points = this1;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g1 = 0;
				var _g2 = points.length;
				while(_g1 < _g2) {
					var i = _g1++;
					points[i] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g3 = 0;
		var _g4 = num_verts;
		while(_g3 < _g4) {
			var i1 = _g3++;
			switch(vertices[i1].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i1].x;
				y = vertices[i1].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i1].x;
				y = vertices[i1].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i1].cx,vertices[i1].cy,vertices[i1].x,vertices[i1].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i1].x;
				y = vertices[i1].y;
				break;
			case 4:
				var num_points_reference1 = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points_reference1,x,y,vertices[i1].cx,vertices[i1].cy,vertices[i1].cx1,vertices[i1].cy1,vertices[i1].x,vertices[i1].y,objspace_flatness_squared,0);
				num_points = num_points_reference1.value;
				x = vertices[i1].x;
				y = vertices[i1].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	var ix1 = rect.x1;
	var iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw haxe_Exception.thrown("Error");
		}
		if(y + gh >= ph) {
			throw haxe_Exception.thrown("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g = 0;
	var _g1 = pw * ph;
	while(_g < _g1) {
		var i1 = _g++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_g1: function() {
		return null;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(sources) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,maxBoundTextures: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setInt2: null
	,setInt3: null
	,setInt4: null
	,setInts: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_InternalPipeline = function(pipeline,projectionLocation,textureLocation) {
	this.pipeline = pipeline;
	this.projectionLocation = projectionLocation;
	this.textureLocation = textureLocation;
};
$hxClasses["kha.graphics4.InternalPipeline"] = kha_graphics4_InternalPipeline;
kha_graphics4_InternalPipeline.__name__ = "kha.graphics4.InternalPipeline";
kha_graphics4_InternalPipeline.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_InternalPipeline
};
var kha_graphics4_PipelineCache = function() { };
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.__isInterface__ = true;
kha_graphics4_PipelineCache.prototype = {
	get: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_SimplePipelineCache = function(pipeline,texture) {
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 58, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 67, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
		}
	}
	this.pipeline = new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation);
};
$hxClasses["kha.graphics4.SimplePipelineCache"] = kha_graphics4_SimplePipelineCache;
kha_graphics4_SimplePipelineCache.__name__ = "kha.graphics4.SimplePipelineCache";
kha_graphics4_SimplePipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_SimplePipelineCache.prototype = {
	pipeline: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipeline;
	}
	,__class__: kha_graphics4_SimplePipelineCache
};
var kha_graphics4_PerFramebufferPipelineCache = function(pipeline,texture) {
	this.pipelines = [];
	pipeline.compile();
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 90, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 99, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
		}
	}
	this.pipelines.push(new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation));
};
$hxClasses["kha.graphics4.PerFramebufferPipelineCache"] = kha_graphics4_PerFramebufferPipelineCache;
kha_graphics4_PerFramebufferPipelineCache.__name__ = "kha.graphics4.PerFramebufferPipelineCache";
kha_graphics4_PerFramebufferPipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_PerFramebufferPipelineCache.prototype = {
	pipelines: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipelines[this.hash(colorFormats,depthStencilFormat)];
	}
	,hash: function(colorFormats,depthStencilFormat) {
		return 0;
	}
	,__class__: kha_graphics4_PerFramebufferPipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferStart = 0;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,true);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				var k = i * 3 * 2;
				indices.setUint32(k * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp = k * 4;
				var k1 = i * 3 * 2 + 1;
				indices.setUint32(k1 * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp1 = k1 * 4;
				var k2 = i * 3 * 2 + 2;
				indices.setUint32(k2 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp2 = k2 * 4;
				var k3 = i * 3 * 2 + 3;
				indices.setUint32(k3 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp3 = k3 * 4;
				var k4 = i * 3 * 2 + 4;
				indices.setUint32(k4 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp4 = k4 * 4;
				var k5 = i * 3 * 2 + 5;
				indices.setUint32(k5 * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp5 = k5 * 4;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,bottomleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,bottomlefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,topleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,toplefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,toprightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,toprighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,bottomrightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,bottomrighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
	}
	,drawBuffer: function(end) {
		if(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart == 0) {
			return;
		}
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock((kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(kha_graphics4_ImageShaderPainter.bufferStart * 2 * 3,(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		if(end || (kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1) * 4 >= 1500) {
			kha_graphics4_ImageShaderPainter.bufferStart = 0;
			kha_graphics4_ImageShaderPainter.bufferIndex = 0;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(0);
		} else {
			kha_graphics4_ImageShaderPainter.bufferStart = kha_graphics4_ImageShaderPainter.bufferIndex;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(kha_graphics4_ImageShaderPainter.bufferStart * 4);
		}
	}
	,setBilinearFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,bottomleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,bottomlefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,topleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,toplefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,toprightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,toprighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,bottomrightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,bottomrighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,bottomleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,bottomlefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,topleftx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,toplefty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,toprightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,toprighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,bottomrightx,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,bottomrighty,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,left1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,left1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,top1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,top1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom1,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,opacity * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,opacity * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,opacity * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,opacity * 255 | 0);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,false);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				var k = i * 3 * 2;
				indices.setUint32(k * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp = k * 4;
				var k1 = i * 3 * 2 + 1;
				indices.setUint32(k1 * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp1 = k1 * 4;
				var k2 = i * 3 * 2 + 2;
				indices.setUint32(k2 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp2 = k2 * 4;
				var k3 = i * 3 * 2 + 3;
				indices.setUint32(k3 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp3 = k3 * 4;
				var k4 = i * 3 * 2 + 4;
				indices.setUint32(k4 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp4 = k4 * 4;
				var k5 = i * 3 * 2 + 5;
				indices.setUint32(k5 * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp5 = k5 * 4;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				var k = i * 3;
				triIndices.setUint32(k * 4,i * 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp = k * 4;
				var k1 = i * 3 + 1;
				triIndices.setUint32(k1 * 4,i * 3 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp1 = k1 * 4;
				var k2 = i * 3 + 2;
				triIndices.setUint32(k2 * 4,i * 3 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp2 = k2 * 4;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 4 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 4) * 4,topleftx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 5) * 4,toplefty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 6) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 8) * 4,toprightx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 9) * 4,toprighty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 10) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 12) * 4,bottomrightx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 13) * 4,bottomrighty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 14) * 4,-5.0,true);
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 4 * 4 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 3,a * 255 | 0);
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 4 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32(baseIndex * 4,x1,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 1) * 4,y1,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 4) * 4,x2,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 5) * 4,y2,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 6) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 8) * 4,x3,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 9) * 4,y3,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 10) * 4,-5.0,true);
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 4 * 4 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
	}
	,drawBuffer: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex == 0) {
			return;
		}
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,true);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				var k = i * 3 * 2;
				indices.setUint32(k * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp = k * 4;
				var k1 = i * 3 * 2 + 1;
				indices.setUint32(k1 * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp1 = k1 * 4;
				var k2 = i * 3 * 2 + 2;
				indices.setUint32(k2 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp2 = k2 * 4;
				var k3 = i * 3 * 2 + 3;
				indices.setUint32(k3 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp3 = k3 * 4;
				var k4 = i * 3 * 2 + 4;
				indices.setUint32(k4 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp4 = k4 * 4;
				var k5 = i * 3 * 2 + 5;
				indices.setUint32(k5 * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
				var tmp5 = k5 * 4;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 9) * 4,topleftx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 10) * 4,toplefty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 11) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 18) * 4,toprightx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 19) * 4,toprighty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 20) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 27) * 4,bottomrightx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 28) * 4,bottomrighty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 29) * 4,-5.0,true);
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 3) * 4,left,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 4) * 4,bottom,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 12) * 4,left,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 13) * 4,top,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 21) * 4,right,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 22) * 4,top,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 30) * 4,right,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 31) * 4,bottom,true);
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var v = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 5) * 4,v,true);
		var v = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 6) * 4,v,true);
		var v = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 7) * 4,v,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 8) * 4,a,true);
		var v = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 14) * 4,v,true);
		var v = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 15) * 4,v,true);
		var v = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 16) * 4,v,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 17) * 4,a,true);
		var v = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 23) * 4,v,true);
		var v = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 24) * 4,v,true);
		var v = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 25) * 4,v,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 26) * 4,a,true);
		var v = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 32) * 4,v,true);
		var v = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 33) * 4,v,true);
		var v = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 34) * 4,v,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 35) * 4,a,true);
	}
	,drawBuffer: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex == 0) {
			return;
		}
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = text.charCodeAt(i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x = q.x0;
				var y = q.y1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var value_x = x;
				var value_y = y;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x2 = x1;
				var y2 = y1;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var p0_x = x2;
				var p0_y = y2;
				var x3 = q.x0;
				var y3 = q.y0;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y3;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x4 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y4 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x5 = x4;
				var y5 = y4;
				if(y5 == null) {
					y5 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var p1_x = x5;
				var p1_y = y5;
				var x6 = q.x1;
				var y6 = q.y0;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var value_x2 = x6;
				var value_y2 = y6;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x7 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y7 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x8 = x7;
				var y8 = y7;
				if(y8 == null) {
					y8 = 0;
				}
				if(x8 == null) {
					x8 = 0;
				}
				var p2_x = x8;
				var p2_y = y8;
				var x9 = q.x1;
				var y9 = q.y1;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var value_x3 = x9;
				var value_y3 = y9;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x10 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y10 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x11 = x10;
				var y11 = y10;
				if(y11 == null) {
					y11 = 0;
				}
				if(x11 == null) {
					x11 = 0;
				}
				var p3_x = x11;
				var p3_y = y11;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i]),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x = q.x0;
				var y = q.y1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var value_x = x;
				var value_y = y;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x2 = x1;
				var y2 = y1;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var p0_x = x2;
				var p0_y = y2;
				var x3 = q.x0;
				var y3 = q.y0;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y3;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x4 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y4 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x5 = x4;
				var y5 = y4;
				if(y5 == null) {
					y5 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var p1_x = x5;
				var p1_y = y5;
				var x6 = q.x1;
				var y6 = q.y0;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var value_x2 = x6;
				var value_y2 = y6;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x7 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y7 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x8 = x7;
				var y8 = y7;
				if(y8 == null) {
					y8 = 0;
				}
				if(x8 == null) {
					x8 = 0;
				}
				var p2_x = x8;
				var p2_y = y8;
				var x9 = q.x1;
				var y9 = q.y1;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var value_x3 = x9;
				var value_y3 = y9;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x10 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y10 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x11 = x10;
				var y11 = y10;
				if(y11 == null) {
					y11 = 0;
				}
				if(x11 == null) {
					x11 = 0;
				}
				var p3_x = x11;
				var p3_y = y11;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = 0;
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexUV",1);
	structure.add("vertexColor",16);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",16);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexUV",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.00020002000200026;
			var m__00 = 2 / width;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - height);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.002000200020002;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this = this.projectionMatrix;
				var tx = -width / width;
				var ty = -height / height;
				var tz = -1.00020002000200026;
				var m__00 = 2 / width;
				var m__10 = 0;
				var m__20 = 0;
				var m__30 = tx;
				var m__01 = 0;
				var m__11 = 2.0 / height;
				var m__21 = 0;
				var m__31 = ty;
				var m__02 = 0;
				var m__12 = 0;
				var m__22 = -0.002000200020002;
				var m__32 = tz;
				var m__03 = 0;
				var m__13 = 0;
				var m__23 = 0;
				var m__33 = 1;
				_this._00 = m__00;
				_this._10 = m__10;
				_this._20 = m__20;
				_this._30 = m__30;
				_this._01 = m__01;
				_this._11 = m__11;
				_this._21 = m__21;
				_this._31 = m__31;
				_this._02 = m__02;
				_this._12 = m__12;
				_this._22 = m__22;
				_this._32 = m__32;
				_this._03 = m__03;
				_this._13 = m__13;
				_this._23 = m__23;
				_this._33 = m__33;
			} else {
				var _this = this.projectionMatrix;
				var tx = -width / width;
				var ty = -height / (0 - height);
				var tz = -1.00020002000200026;
				var m__00 = 2 / width;
				var m__10 = 0;
				var m__20 = 0;
				var m__30 = tx;
				var m__01 = 0;
				var m__11 = 2.0 / (0 - height);
				var m__21 = 0;
				var m__31 = ty;
				var m__02 = 0;
				var m__12 = 0;
				var m__22 = -0.002000200020002;
				var m__32 = tz;
				var m__03 = 0;
				var m__13 = 0;
				var m__23 = 0;
				var m__33 = 1;
				_this._00 = m__00;
				_this._10 = m__10;
				_this._20 = m__20;
				_this._30 = m__30;
				_this._01 = m__01;
				_this._11 = m__11;
				_this._21 = m__21;
				_this._31 = m__31;
				_this._02 = m__02;
				_this._12 = m__12;
				_this._22 = m__22;
				_this._32 = m__32;
				_this._03 = m__03;
				_this._13 = m__13;
				_this._23 = m__23;
				_this._33 = m__33;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y = yh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,p1_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,p1_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,p2_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,p2_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,p3_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,p3_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,p4_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,p4_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p1_x = x1;
		var p1_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,p1_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,p1_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,p2_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,p2_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,p3_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,p3_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,p4_x,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,p4_y,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p2_x = x2;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p3_x = x2;
		var p3_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p4_x = x2;
		var p4_y = y2;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p2_x = x2;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p3_x = x2;
		var p3_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			var x = 0;
			var y = -1;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		} else {
			var x = 1;
			var y = -(x2 - x1) / (y2 - y1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x = x1 + 0.5 * vec_x;
		var y = y1 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y;
		var x = x2 + 0.5 * vec_x;
		var y = y2 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p2_x = x;
		var p2_y = y;
		var x = p1_x - vec_x;
		var y = p1_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p3_x = x;
		var p3_y = y;
		var x = p2_x - vec_x;
		var y = p2_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p4_x = x;
		var p4_y = y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p2_x + _this._12 * p2_y + _this._22;
		var x = (_this._00 * p2_x + _this._10 * p2_y + _this._20) / w;
		var y = (_this._01 * p2_x + _this._11 * p2_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p3_x + _this._12 * p3_y + _this._22;
		var x = (_this._00 * p3_x + _this._10 * p3_y + _this._20) / w;
		var y = (_this._01 * p3_x + _this._11 * p3_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p4_x + _this._12 * p4_y + _this._22;
		var x = (_this._00 * p4_x + _this._10 * p4_y + _this._20) / w;
		var y = (_this._01 * p4_x + _this._11 * p4_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p1_x = x1;
		var p1_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = x2;
		var y = y2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = x3;
		var y = y3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == 1);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_SimplePipelineCache(pipeline,true);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw haxe_Exception.thrown("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw haxe_Exception.thrown("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = kha_arrays_Uint32Array._new(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	_data: null
	,buffer: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		var end = this.lockEnd;
		var start = this.lockStart * 4;
		var end1 = end != null ? end * 4 : null;
		return kha_arrays_ByteArray._new(this._data.buffer,start,end1 != null ? end1 - start : null);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var end = this.lockEnd;
		var start = this.lockStart * 4;
		var end1 = end != null ? end * 4 : null;
		var data = kha_arrays_ByteArray._new(this._data.buffer,start,end1 != null ? end1 - start : null);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data.buffer) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilFrontMode = 0;
	this.stencilFrontBothPass = 0;
	this.stencilFrontDepthFail = 0;
	this.stencilFrontFail = 0;
	this.stencilBackMode = 0;
	this.stencilBackBothPass = 0;
	this.stencilBackDepthFail = 0;
	this.stencilBackFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorAttachmentCount = 1;
	this.colorAttachments = [];
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.depthStencilAttachment = 0;
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilFrontMode: null
	,stencilFrontBothPass: null
	,stencilFrontDepthFail: null
	,stencilFrontFail: null
	,stencilBackMode: null
	,stencilBackBothPass: null
	,stencilBackDepthFail: null
	,stencilBackFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,colorAttachmentCount: null
	,colorAttachments: null
	,depthStencilAttachment: null
	,set_colorWriteMask: function(value) {
		var value1 = this.colorWriteMasksAlpha[0] = value;
		var value = this.colorWriteMasksGreen[0] = value1;
		var value1 = this.colorWriteMasksBlue[0] = value;
		return this.colorWriteMasksRed[0] = value1;
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
	}
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var structure = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = structure.elements;
			while(_g2 < _g3.length) {
				var element = _g3[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			var message = "Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 49, className : "kha.graphics4.PipelineState", methodName : "compile"});
			throw haxe_Exception.thrown(message);
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			var message = "Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 89, className : "kha.graphics4.PipelineState", methodName : "compileShader"});
			throw haxe_Exception.thrown(message);
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 98, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,i);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 117, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__:"kha.graphics4.StencilValue",__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_._hx_name="Static",$_.__params__ = ["value"],$_)
};
kha_graphics4_StencilValue.__constructs__ = [kha_graphics4_StencilValue.Dynamic,kha_graphics4_StencilValue.Static];
var kha_graphics4_TessellationControlShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		this.myStride += kha_graphics4_VertexStructure.dataByteSize(element.data);
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = kha_arrays_ByteArray.make(vertexCount * this.myStride);
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		var size;
		var type;
		switch(element.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:case 7:
			size = 1;
			type = 5120;
			break;
		case 6:case 8:
			size = 1;
			type = 5121;
			break;
		case 10:case 12:
			size = 2;
			type = 5121;
			break;
		case 9:case 11:
			size = 2;
			type = 5120;
			break;
		case 13:case 15:
			size = 4;
			type = 5120;
			break;
		case 14:case 16:
			size = 4;
			type = 5121;
			break;
		case 17:case 19:
			size = 1;
			type = 5122;
			break;
		case 18:case 20:
			size = 1;
			type = 5123;
			break;
		case 21:case 23:
			size = 2;
			type = 5122;
			break;
		case 22:case 24:
			size = 2;
			type = 5123;
			break;
		case 25:case 27:
			size = 4;
			type = 5122;
			break;
		case 26:case 28:
			size = 4;
			type = 5123;
			break;
		case 29:
			size = 1;
			type = 5124;
			break;
		case 30:
			size = 1;
			type = 5125;
			break;
		case 31:
			size = 2;
			type = 5124;
			break;
		case 32:
			size = 2;
			type = 5125;
			break;
		case 33:
			size = 3;
			type = 5124;
			break;
		case 34:
			size = 3;
			type = 5125;
			break;
		case 35:
			size = 4;
			type = 5124;
			break;
		case 36:
			size = 4;
			type = 5125;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		offset += kha_graphics4_VertexStructure.dataByteSize(element.data);
		++index;
	}
	kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
	var tmp = kha_SystemImpl.gl;
	var this1 = this._data;
	var start = 0 * this.stride();
	var end = this.mySize * this.stride();
	tmp.bufferData(34962,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null),usage == 1 ? 35048 : 35044);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	_data: null
	,buffer: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		var this1 = this._data;
		var start = this.lockStart * this.stride();
		var end = this.lockEnd * this.stride();
		return kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		if(kha_SystemImpl.safari) {
			var tmp = kha_SystemImpl.gl;
			var this1 = this._data;
			var start = 0 * this.stride();
			var end = this.lockEnd * this.stride();
			tmp.bufferData(34962,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null),35048);
		} else {
			var tmp = kha_SystemImpl.gl;
			var tmp1 = this.lockStart * this.stride();
			var this1 = this._data;
			var start = this.lockStart * this.stride();
			var end = this.lockEnd * this.stride();
			tmp.bufferSubData(34962,tmp1,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null));
		}
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexData = {};
kha_graphics4_VertexData.getStride = function(vertexData) {
	switch(vertexData) {
	case 0:
		return 4;
	case 1:
		return 8;
	case 2:
		return 12;
	case 3:
		return 16;
	case 4:
		return 64;
	case 5:
		return 1;
	case 6:
		return 1;
	case 7:
		return 1;
	case 8:
		return 1;
	case 9:
		return 2;
	case 10:
		return 2;
	case 11:
		return 2;
	case 12:
		return 2;
	case 13:
		return 4;
	case 14:
		return 4;
	case 15:
		return 4;
	case 16:
		return 4;
	case 17:
		return 2;
	case 18:
		return 2;
	case 19:
		return 2;
	case 20:
		return 2;
	case 21:
		return 4;
	case 22:
		return 4;
	case 23:
		return 4;
	case 24:
		return 4;
	case 25:
		return 8;
	case 26:
		return 8;
	case 27:
		return 8;
	case 28:
		return 8;
	case 29:
		return 4;
	case 30:
		return 4;
	case 31:
		return 8;
	case 32:
		return 8;
	case 33:
		return 12;
	case 34:
		return 12;
	case 35:
		return 16;
	case 36:
		return 16;
	}
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.dataByteSize = function(data) {
	switch(data) {
	case 0:
		return 4;
	case 1:
		return 8;
	case 2:
		return 12;
	case 3:
		return 16;
	case 4:
		return 64;
	case 5:case 6:case 7:case 8:
		return 1;
	case 9:case 10:case 11:case 12:
		return 2;
	case 13:case 14:case 15:case 16:
		return 4;
	case 17:case 18:case 19:case 20:
		return 2;
	case 21:case 22:case 23:case 24:
		return 4;
	case 25:case 26:case 27:case 28:
		return 8;
	case 29:case 30:
		return 4;
	case 31:case 32:
		return 8;
	case 33:case 34:
		return 12;
	case 35:case 36:
		return 16;
	}
};
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += kha_graphics4_VertexStructure.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.connected = false;
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,rumble: function(leftAmount,rightAmount) {
		kha_SystemImpl.setGamepadRumble(this.index,leftAmount,rightAmount);
	}
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_vendor:"get_vendor",get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__:"kha.input.BlockInterventions",__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_name:"Full",_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_name:"None",_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_BlockInterventions.__constructs__ = [kha_input_BlockInterventions.Default,kha_input_BlockInterventions.Full,kha_input_BlockInterventions.None,kha_input_BlockInterventions.Custom];
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.b[4];
			this.sendDownEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input0 = bytes.b[4];
			this.sendUpEvent(input0);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			var input0 = String.fromCodePoint(code);
			this.sendPressEvent(input0);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__:"kha.input.MouseEventBlockBehavior",__constructs__:null
	,Full: {_hx_name:"Full",_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_MouseEventBlockBehavior.__constructs__ = [kha_input_MouseEventBlockBehavior.Full,kha_input_MouseEventBlockBehavior.None,kha_input_MouseEventBlockBehavior.Custom];
var kha_input_MouseCursor = $hxEnums["kha.input.MouseCursor"] = { __ename__:"kha.input.MouseCursor",__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Pointer: {_hx_name:"Pointer",_hx_index:1,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Text: {_hx_name:"Text",_hx_index:2,__enum__:"kha.input.MouseCursor",toString:$estr}
	,EastWestResize: {_hx_name:"EastWestResize",_hx_index:3,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthSouthResize: {_hx_name:"NorthSouthResize",_hx_index:4,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthEastResize: {_hx_name:"NorthEastResize",_hx_index:5,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthEastResize: {_hx_name:"SouthEastResize",_hx_index:6,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthWestResize: {_hx_name:"NorthWestResize",_hx_index:7,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthWestResize: {_hx_name:"SouthWestResize",_hx_index:8,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grab: {_hx_name:"Grab",_hx_index:9,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grabbing: {_hx_name:"Grabbing",_hx_index:10,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NotAllowed: {_hx_name:"NotAllowed",_hx_index:11,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Wait: {_hx_name:"Wait",_hx_index:12,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Crosshair: {_hx_name:"Crosshair",_hx_index:13,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Custom: ($_=function(image) { return {_hx_index:14,image:image,__enum__:"kha.input.MouseCursor",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["image"],$_)
};
kha_input_MouseCursor.__constructs__ = [kha_input_MouseCursor.Default,kha_input_MouseCursor.Pointer,kha_input_MouseCursor.Text,kha_input_MouseCursor.EastWestResize,kha_input_MouseCursor.NorthSouthResize,kha_input_MouseCursor.NorthEastResize,kha_input_MouseCursor.SouthEastResize,kha_input_MouseCursor.NorthWestResize,kha_input_MouseCursor.SouthWestResize,kha_input_MouseCursor.Grab,kha_input_MouseCursor.Grabbing,kha_input_MouseCursor.NotAllowed,kha_input_MouseCursor.Wait,kha_input_MouseCursor.Crosshair,kha_input_MouseCursor.Custom];
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 152, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 156, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 166, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 170, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 180, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 184, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 194, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 198, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 208, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 212, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,setSystemCursor: function(cursor) {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.getInt32(4);
			this.sendLeaveEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendDownEvent(input0,input1,input2,input3);
			return;
		}
		if(funcindex == 2) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendUpEvent(input0,input1,input2,input3);
			return;
		}
		if(funcindex == 3) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			var input4 = bytes.getInt32(20);
			this.sendMoveEvent(input0,input1,input2,input3,input4);
			return;
		}
		if(funcindex == 4) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			this.sendWheelEvent(input0,input1);
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,setSystemCursor: function(cursor) {
		var tmp;
		switch(cursor._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "text";
			break;
		case 3:
			tmp = "ew-resize";
			break;
		case 4:
			tmp = "ns-resize";
			break;
		case 5:
			tmp = "ne-resize";
			break;
		case 6:
			tmp = "se-resize";
			break;
		case 7:
			tmp = "nw-resize";
			break;
		case 8:
			tmp = "sw-resize";
			break;
		case 9:
			tmp = "grab";
			break;
		case 10:
			tmp = "grabbing";
			break;
		case 11:
			tmp = "not-allowed";
			break;
		case 12:
			tmp = "wait";
			break;
		case 13:
			tmp = "crosshair";
			break;
		case 14:
			var image = cursor.image;
			var canvas = window.document.createElement("canvas");
			canvas.width = image.get_width();
			canvas.height = image.get_height();
			if(((image) instanceof kha_WebGLImage)) {
				canvas.getContext("2d",null).drawImage((js_Boot.__cast(image , kha_WebGLImage)).image,0,0);
			} else {
				canvas.getContext("2d",null).drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,0,0);
			}
			var dataURL = canvas.toDataURL("image/png");
			dataURL = StringTools.replace(dataURL,"/^data:image\\/(png|jpg);base64,/","");
			tmp = "url('" + dataURL + "'),auto";
			break;
		}
		kha_SystemImpl.khanvas.style.cursor = tmp;
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,notifyEraser: function(eraserDownListener,eraserUpListener,eraserMoveListener) {
		this.notifyEraserWindowed(0,eraserDownListener,eraserUpListener,eraserMoveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,removeEraser: function(eraserDownListener,eraserUpListener,eraserMoveListener) {
		this.removeEraserWindowed(0,eraserDownListener,eraserUpListener,eraserMoveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,notifyEraserWindowed: function(windowId,eraserDownListener,eraserUpListener,eraserMoveListener) {
		if(eraserDownListener != null) {
			if(this.windowEraserDownListeners == null) {
				this.windowEraserDownListeners = [];
			}
			while(this.windowEraserDownListeners.length <= windowId) this.windowEraserDownListeners.push([]);
			this.windowEraserDownListeners[windowId].push(eraserDownListener);
		}
		if(eraserUpListener != null) {
			if(this.windowEraserUpListeners == null) {
				this.windowEraserUpListeners = [];
			}
			while(this.windowEraserUpListeners.length <= windowId) this.windowEraserUpListeners.push([]);
			this.windowEraserUpListeners[windowId].push(eraserUpListener);
		}
		if(eraserMoveListener != null) {
			if(this.windowEraserMoveListeners == null) {
				this.windowEraserMoveListeners = [];
			}
			while(this.windowEraserMoveListeners.length <= windowId) this.windowEraserMoveListeners.push([]);
			this.windowEraserMoveListeners[windowId].push(eraserMoveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,removeEraserWindowed: function(windowId,eraserDownListener,eraserUpListener,eraserMoveListener) {
		if(eraserDownListener != null && this.windowEraserDownListeners != null) {
			if(windowId < this.windowEraserDownListeners.length) {
				HxOverrides.remove(this.windowEraserDownListeners[windowId],eraserDownListener);
			}
		}
		if(eraserUpListener != null && this.windowEraserUpListeners != null) {
			if(windowId < this.windowEraserUpListeners.length) {
				HxOverrides.remove(this.windowEraserUpListeners[windowId],eraserUpListener);
			}
		}
		if(eraserMoveListener != null && this.windowEraserMoveListeners != null) {
			if(windowId < this.windowEraserMoveListeners.length) {
				HxOverrides.remove(this.windowEraserMoveListeners[windowId],eraserMoveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowEraserDownListeners: null
	,windowEraserUpListeners: null
	,windowEraserMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendEraserDownEvent: function(windowId,x,y,pressure) {
		if(this.windowEraserDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowEraserDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendEraserUpEvent: function(windowId,x,y,pressure) {
		if(this.windowEraserUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowEraserUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendEraserMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowEraserMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowEraserMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() {
	this.listeners = [];
};
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = "kha.input.Sensor";
kha_input_Sensor.get = function(type) {
	switch(type) {
	case 0:
		return kha_input_Sensor.accelerometer;
	case 1:
		return kha_input_Sensor.gyroscope;
	}
};
kha_input_Sensor._changed = function(type,x,y,z) {
	var sensor = kha_input_Sensor.get(type == 0 ? 0 : 1);
	var _g = 0;
	var _g1 = sensor.listeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(x,y,z);
	}
};
kha_input_Sensor.prototype = {
	listeners: null
	,notify: function(listener) {
		if(!kha_input_Sensor.isInited) {
			kha_SystemImpl.initSensor();
			kha_input_Sensor.isInited = true;
		}
		this.listeners.push(listener);
	}
	,__class__: kha_input_Sensor
};
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__:"kha.input.TouchDownEventBlockBehavior",__constructs__:null
	,Full: {_hx_name:"Full",_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_TouchDownEventBlockBehavior.__constructs__ = [kha_input_TouchDownEventBlockBehavior.Full,kha_input_TouchDownEventBlockBehavior.None,kha_input_TouchDownEventBlockBehavior.Custom];
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		return byte;
	}
	,readS8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_internal_HdrFormat = function() { };
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = "kha.internal.HdrFormat";
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 39, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var this1 = new Uint8Array(4);
	var rgbe = this1;
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var this1 = new Uint8Array(2);
	var buf = this1;
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 55, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 70, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			var this1 = new Uint8Array(4 * scanline_width);
			scanline_buffer = this1;
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			ptr_end = (i + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 84, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 91, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 102, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 108, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = scanline_width;
		while(_g1 < _g2) {
			var i1 = _g1++;
			data[offset] = scanline_buffer[i1];
			data[offset + 1] = scanline_buffer[i1 + scanline_width];
			data[offset + 2] = scanline_buffer[i1 + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i1 + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io_UInt8Array.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var exposure = 1.0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			exposure = parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 171, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var this1 = new Uint8Array(width * height * 4);
	var data = this1;
	var scanline_width = width;
	var num_scanlines = height;
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,scanline_width,num_scanlines);
	var this1 = new Float32Array(width * height * 4);
	var floatData = this1;
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var e = data[offset + 3];
		var f = Math.pow(2.0,e - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = "kha.js.AEAudioChannel";
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,get_length: function() {
		var f = this.element.duration;
		if(isFinite(f)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = "kha.js.AudioElementAudio";
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.clipping = false;
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha_Color.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = "kha.js.CanvasGraphics";
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,clipping: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( _g ) {
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == 0) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		var eAngle = 2 * Math.PI;
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,eAngle,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,_drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillArc: function(cx,cy,radius,sAngle,eAngle,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.fill();
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,i)),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,drawCharacters: function(text,start,length,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = start;
			var _g1 = start + length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(text[i]),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		if(!this.clipping) {
			this.canvas.save();
			this.clipping = true;
		}
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		if(this.clipping) {
			this.canvas.restore();
			this.clipping = false;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = "kha.js.Font";
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.fromBytes = function(bytes) {
	return new kha_js_Font(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var this1 = this.images;
			var v = new haxe_ds_IntMap();
			this1.h[imageIndex] = v;
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = "kha.js.MobileWebAudio";
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = "kha.js.MobileWebAudioChannel";
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		var wasStopped = this.paused || this.stopped;
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,stop: function() {
		var wasStopped = this.paused || this.stopped;
		this.paused = false;
		this.stopped = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = "kha.js.MobileWebAudioSound";
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = "kha.js.Sound";
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = "kha.js.Video";
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	element: null
	,texture: null
	,filenames: null
	,done: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 68, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 77, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 87, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getVolume: function() {
		return this.element.volume;
	}
	,setVolume: function(volume) {
		this.element.volume = volume;
	}
	,getLength: function() {
		var f = this.element.duration;
		if(isFinite(f)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 132, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = "kha.js.WebAudioSound";
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			_gthis.uncompressedData = kha_arrays_Float32Array._new(len * 2);
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					var v = ch0[i];
					_gthis.uncompressedData.setFloat32(idx * 4,v,true);
					var v1 = ch1[i];
					_gthis.uncompressedData.setFloat32((idx + 1) * 4,v1,true);
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = "kha.js.graphics4.ConstantLocation";
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	this.matrix3Cache = kha_arrays_Float32Array._new(9);
	this.matrixCache = kha_arrays_Float32Array._new(16);
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = "kha.js.graphics4.Graphics";
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(kha_System.windowWidth() * 0.5 | 0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask |= 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.viewport(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.viewport(x,y,width,height);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		var _g = 0;
		var _g1 = kha_js_graphics4_Graphics.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
		kha_js_graphics4_Graphics.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var _g = 0;
		var _g1 = kha_js_graphics4_Graphics.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) {
			var vertexBuffer = vertexBuffers[_g];
			++_g;
			offset += (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(offset);
		}
		kha_js_graphics4_Graphics.useVertexAttributes = offset;
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setTextureCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(3553,34892,34894);
			kha_SystemImpl.gl.texParameteri(3553,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(3553,34892,0);
		}
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(34067,34892,34894);
			kha_SystemImpl.gl.texParameteri(34067,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(34067,34892,0);
		}
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,maxBoundTextures: function() {
		return kha_SystemImpl.gl.getParameter(34930);
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		if(pipe.stencilFrontMode == 0 && pipe.stencilBackMode == 0 && pipe.stencilFrontBothPass == 0 && pipe.stencilBackBothPass == 0 && pipe.stencilFrontDepthFail == 0 && pipe.stencilBackDepthFail == 0 && pipe.stencilFrontFail == 0 && pipe.stencilBackFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			this.setStencilParameters(true,pipe.stencilFrontMode,pipe.stencilFrontBothPass,pipe.stencilFrontDepthFail,pipe.stencilFrontFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
			this.setStencilParameters(false,pipe.stencilBackMode,pipe.stencilBackBothPass,pipe.stencilBackDepthFail,pipe.stencilBackFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		}
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,setStencilReferenceValue: function(value) {
		kha_SystemImpl.gl.stencilFuncSeparate(1028,this.convertCompareMode(this.currentPipeline.stencilFrontMode),value,this.currentPipeline.stencilReadMask);
		kha_SystemImpl.gl.stencilFuncSeparate(1029,this.convertCompareMode(this.currentPipeline.stencilBackMode),value,this.currentPipeline.stencilReadMask);
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setInt2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setInt3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setInt4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setInts: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		var rawValues = new Int32Array(values.buffer,values.byteOffset,values.byteLength >> 2);
		switch(webglLocation.type) {
		case 35667:
			kha_SystemImpl.gl.uniform2iv(webglLocation.value,rawValues);
			break;
		case 35668:
			kha_SystemImpl.gl.uniform3iv(webglLocation.value,rawValues);
			break;
		case 35669:
			kha_SystemImpl.gl.uniform4iv(webglLocation.value,rawValues);
			break;
		default:
			kha_SystemImpl.gl.uniform1iv(webglLocation.value,rawValues);
		}
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		var rawValues = new Float32Array(values.buffer,values.byteOffset,values.byteLength >> 2);
		switch(webglLocation.type) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,rawValues);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,rawValues);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,rawValues);
			break;
		case 35676:
			kha_SystemImpl.gl.uniformMatrix4fv(webglLocation.value,false,rawValues);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,rawValues);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		var v = matrix._00;
		this.matrixCache.setFloat32(0,v,true);
		var v = matrix._01;
		this.matrixCache.setFloat32(4,v,true);
		var v = matrix._02;
		this.matrixCache.setFloat32(8,v,true);
		var v = matrix._03;
		this.matrixCache.setFloat32(12,v,true);
		var v = matrix._10;
		this.matrixCache.setFloat32(16,v,true);
		var v = matrix._11;
		this.matrixCache.setFloat32(20,v,true);
		var v = matrix._12;
		this.matrixCache.setFloat32(24,v,true);
		var v = matrix._13;
		this.matrixCache.setFloat32(28,v,true);
		var v = matrix._20;
		this.matrixCache.setFloat32(32,v,true);
		var v = matrix._21;
		this.matrixCache.setFloat32(36,v,true);
		var v = matrix._22;
		this.matrixCache.setFloat32(40,v,true);
		var v = matrix._23;
		this.matrixCache.setFloat32(44,v,true);
		var v = matrix._30;
		this.matrixCache.setFloat32(48,v,true);
		var v = matrix._31;
		this.matrixCache.setFloat32(52,v,true);
		var v = matrix._32;
		this.matrixCache.setFloat32(56,v,true);
		var v = matrix._33;
		this.matrixCache.setFloat32(60,v,true);
		var rawMatrixCache = new Float32Array(this.matrixCache.buffer,this.matrixCache.byteOffset,this.matrixCache.byteLength >> 2);
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,rawMatrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		var v = matrix._00;
		this.matrix3Cache.setFloat32(0,v,true);
		var v = matrix._01;
		this.matrix3Cache.setFloat32(4,v,true);
		var v = matrix._02;
		this.matrix3Cache.setFloat32(8,v,true);
		var v = matrix._10;
		this.matrix3Cache.setFloat32(12,v,true);
		var v = matrix._11;
		this.matrix3Cache.setFloat32(16,v,true);
		var v = matrix._12;
		this.matrix3Cache.setFloat32(20,v,true);
		var v = matrix._20;
		this.matrix3Cache.setFloat32(24,v,true);
		var v = matrix._21;
		this.matrix3Cache.setFloat32(28,v,true);
		var v = matrix._22;
		this.matrix3Cache.setFloat32(32,v,true);
		var rawMatrix3Cache = new Float32Array(this.matrix3Cache.buffer,this.matrix3Cache.byteOffset,this.matrix3Cache.byteLength >> 2);
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,rawMatrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		var size = type == 5123 ? 2 : 4;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * size);
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(front,compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		var stencilFunc = this.convertCompareMode(compareMode);
		kha_SystemImpl.gl.stencilMaskSeparate(front ? 1028 : 1029,writeMask);
		var tmp = kha_SystemImpl.gl;
		var tmp1 = this.convertStencilAction(stencilFail);
		tmp.stencilOpSeparate(front ? 1028 : 1029,tmp1,this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
		switch(referenceValue._hx_index) {
		case 0:
			kha_SystemImpl.gl.stencilFuncSeparate(front ? 1028 : 1029,stencilFunc,0,readMask);
			break;
		case 1:
			var value = referenceValue.value;
			kha_SystemImpl.gl.stencilFuncSeparate(front ? 1028 : 1029,stencilFunc,value,readMask);
			break;
		}
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = "kha.js.graphics4.Graphics2";
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = "kha.js.graphics4.TextureUnit";
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = "kha.vr.VrInterface";
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
	}
	,onVRExitPresent: function() {
	}
	,onResetPose: function() {
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
	var displayEnabled = false;
	if(displayEnabled) {
		this.vrEnabled = true;
		this.getVRDisplays();
		haxe_Log.trace("Display enabled.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 40, className : "kha.js.vr.VrInterface", methodName : "new"});
	}
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = "kha.js.vr.VrInterface";
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		var vrDisplayInstance = navigator.getVRDisplays();
		vrDisplayInstance.then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2 | 0;
				_gthis.vrHeight = Math.max(leftEye.renderHeight,rightEye.renderHeight) | 0;
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 61, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 74, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 75, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 86, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 87, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to resetPose",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 96, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 97, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var zaxis_x = x;
	var zaxis_y = y;
	var zaxis_z = z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var xaxis_x = x;
	var xaxis_y = y;
	var xaxis_z = z;
	var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		xaxis_x *= mul;
		xaxis_y *= mul;
		xaxis_z *= mul;
	}
	var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var yaxis_x = x;
	var yaxis_y = y;
	var yaxis_z = z;
	return new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = "kha.math.FastVector2";
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = "kha.math.FastVector3";
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = "kha.math.FastVector4";
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = "kha.math.Matrix3";
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = "kha.math.Matrix4";
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var zaxis_x = x;
	var zaxis_y = y;
	var zaxis_z = z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var xaxis_x = x;
	var xaxis_y = y;
	var xaxis_z = z;
	var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		xaxis_x *= mul;
		xaxis_y *= mul;
		xaxis_z *= mul;
	}
	var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var yaxis_x = x;
	var yaxis_y = y;
	var yaxis_z = z;
	return new kha_math_Matrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = "kha.math.Quaternion";
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	q.set_x(q.get_x() * axis.x);
	q.set_y(q.get_y() * axis.y);
	q.set_z(q.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var epsilon = 0.0005;
		var dot = this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
		if(dot > 1 - epsilon) {
			var _this = new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
			var q1 = new kha_math_Quaternion(_this.get_x() * t,_this.get_y() * t,_this.get_z() * t,_this.get_w() * t);
			var result = new kha_math_Quaternion(q.get_x() + q1.get_x(),q.get_y() + q1.get_y(),q.get_z() + q1.get_z(),q.get_w() + q1.get_w());
			var scale = 1.0 / result.get_length();
			result.set_x(result.get_x() * scale);
			result.set_y(result.get_y() * scale);
			result.set_z(result.get_z() * scale);
			result.set_w(result.get_w() * scale);
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta0 = Math.acos(dot);
		var theta = theta0 * t;
		var q1 = new kha_math_Quaternion(this.get_x() * dot,this.get_y() * dot,this.get_z() * dot,this.get_w() * dot);
		var q2 = new kha_math_Quaternion(q.get_x() - q1.get_x(),q.get_y() - q1.get_y(),q.get_z() - q1.get_z(),q.get_w() - q1.get_w());
		var scale = 1.0 / q2.get_length();
		q2.set_x(q2.get_x() * scale);
		q2.set_y(q2.get_y() * scale);
		q2.set_z(q2.get_z() * scale);
		q2.set_w(q2.get_w() * scale);
		var scale = Math.cos(theta);
		var _this = new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
		var scale = Math.sin(theta);
		var q = new kha_math_Quaternion(q2.get_x() * scale,q2.get_y() * scale,q2.get_z() * scale,q2.get_w() * scale);
		var result = new kha_math_Quaternion(_this.get_x() + q.get_x(),_this.get_y() + q.get_y(),_this.get_z() + q.get_z(),_this.get_w() + q.get_w());
		var scale = 1.0 / result.get_length();
		result.set_x(result.get_x() * scale);
		result.set_y(result.get_y() * scale);
		result.set_z(result.get_z() * scale);
		result.set_w(result.get_w() * scale);
		return result;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		var scale = 1.0 / q.get_length();
		q.set_x(q.get_x() * scale);
		q.set_y(q.get_y() * scale);
		q.set_z(q.get_z() * scale);
		q.set_w(q.get_w() * scale);
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var s = 2.0;
		var xs = this.get_x() * s;
		var ys = this.get_y() * s;
		var zs = this.get_z() * s;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		this.set_x(this.get_x() * mul);
		this.set_y(this.get_y() * mul);
		this.set_z(this.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		var q = new kha_math_Quaternion();
		q.set_x(q1.get_w() * result.get_x() + q1.get_x() * result.get_w() + q1.get_y() * result.get_z() - q1.get_z() * result.get_y());
		q.set_y(q1.get_w() * result.get_y() - q1.get_x() * result.get_z() + q1.get_y() * result.get_w() + q1.get_z() * result.get_x());
		q.set_z(q1.get_w() * result.get_z() + q1.get_x() * result.get_y() - q1.get_y() * result.get_x() + q1.get_z() * result.get_w());
		q.set_w(q1.get_w() * result.get_w() - q1.get_x() * result.get_x() - q1.get_y() * result.get_y() - q1.get_z() * result.get_z());
		q1 = q;
		result.set_x(result.get_x() + q1.get_x() * 0.5);
		result.set_y(result.get_y() + q1.get_y() * 0.5);
		result.set_z(result.get_z() + q1.get_z() * 0.5);
		result.set_w(result.get_w() + q1.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		var scale = 1.0 / this.get_length();
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var SingularityRadius = 0.0000001;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -1 + SingularityRadius) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 1 - SingularityRadius) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
	,__properties__: {set_length:"set_length",get_length:"get_length",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_math_Random = function(seed) {
	this.d = seed;
	this.a = 917435674;
	this.b = 567587819;
	this.c = -229541185;
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
	this.Get();
};
$hxClasses["kha.math.Random"] = kha_math_Random;
kha_math_Random.__name__ = "kha.math.Random";
kha_math_Random.init = function(seed) {
	kha_math_Random.Default = new kha_math_Random(seed);
};
kha_math_Random.get = function() {
	return kha_math_Random.Default.Get();
};
kha_math_Random.getFloat = function() {
	return kha_math_Random.Default.GetFloat();
};
kha_math_Random.getUpTo = function(max) {
	return kha_math_Random.Default.GetUpTo(max);
};
kha_math_Random.getIn = function(min,max) {
	return kha_math_Random.Default.GetIn(min,max);
};
kha_math_Random.getFloatIn = function(min,max) {
	return min + kha_math_Random.Default.GetFloat() * (max - min);
};
kha_math_Random.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,Get: function() {
		var t = (this.a + this.b | 0) + this.d | 0;
		this.d = this.d + 1 | 0;
		this.a = this.b ^ this.b >>> 9;
		this.b = this.c + (this.c << 3) | 0;
		this.c = this.c << 21 | this.c >>> 11;
		this.c = this.c + t | 0;
		return t & 2147483647;
	}
	,GetFloat: function() {
		return this.Get() / 2147483647;
	}
	,GetUpTo: function(max) {
		return this.Get() % (max + 1);
	}
	,GetIn: function(min,max) {
		return this.Get() % (max + 1 - min) + min;
	}
	,GetFloatIn: function(min,max) {
		return min + this.GetFloat() * (max - min);
	}
	,__class__: kha_math_Random
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = "kha.math.Vector3";
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = "kha.math.Vector4";
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = "kha.netsync.Client";
kha_netsync_Client.__isInterface__ = true;
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = "kha.netsync.Entity";
kha_netsync_Entity.__isInterface__ = true;
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = "kha.netsync.LocalClient";
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error.",{ fileName : "kha/netsync/Network.hx", lineNumber : 14, className : "kha.netsync.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed. " + kha_netsync_Network.webSocketCloseReason(event.code) + " (" + event.reason + ").",{ fileName : "kha/netsync/Network.hx", lineNumber : 22, className : "kha.netsync.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.netsync.Network"] = kha_netsync_Network;
kha_netsync_Network.__name__ = "kha.netsync.Network";
kha_netsync_Network.webSocketCloseReason = function(code) {
	switch(code) {
	case 1000:
		return "Normal Closure";
	case 1001:
		return "Going Away";
	case 1002:
		return "Protocol error";
	case 1003:
		return "Unsupported Data";
	case 1005:
		return "No Status Rcvd";
	case 1006:
		return "Abnormal Closure";
	case 1007:
		return "Invalid frame";
	case 1008:
		return "Policy Violation";
	case 1009:
		return "Message Too Big";
	case 1010:
		return "Mandatory Ext.";
	case 1011:
		return "Internal Server Error";
	case 1015:
		return "TLS handshake";
	default:
		return "";
	}
};
kha_netsync_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.b.bufferValue);
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			listener(haxe_io_Bytes.ofData(message.data));
		};
	}
	,__class__: kha_netsync_Network
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = "kha.netsync.State";
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 95, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.b[0]) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_netsync_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.b[1]) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g = 0;
		var _g1 = methodnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			methodname += String.fromCodePoint(code);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 299, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 304, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 309, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					var code = bytes.b[index];
					str += String.fromCodePoint(code);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 319, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 322, className : "kha.netsync.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field($hxClasses[classname],methodname + "_remotely").apply(null,args);
		} else {
			Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely").apply(kha_netsync_SyncBuilder.objects[syncId],args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_netsync_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.b[21] = 0;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = "kha.netsync.SyncBuilder";
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = "kha.simd.Float32x4";
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = "kha.vr.Pose";
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = "kha.vr.PoseState";
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = "kha.vr.SensorState";
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = "kha.vr.TimeWarpImage";
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = "kha.vr.TimeWarpParms";
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var lobby_LobbyPage = function() {
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(56,"Lobby",[new ui_ControlHint(["BACK"],"Leave")],null));
};
$hxClasses["lobby.LobbyPage"] = lobby_LobbyPage;
lobby_LobbyPage.__name__ = "lobby.LobbyPage";
lobby_LobbyPage.startGame = function(peer,isHost,message) {
	var parts = message.split(";");
	var s = new game_net_SessionManager(peer,isHost,parts[0]);
	var rule = hxbit_Serializer.load(haxe_io_Bytes.ofHex(parts[1]),game_rules_VersusRule);
	var f = new game_mediators_FrameCounter();
	ScreenManager.switchScreen(new game_screens_NetplayGameScreen(new game_screens_NetplayGameScreenOptions(s,f,new game_gamestatebuilders_NetplayEndlessGameStateBuilder(new game_gamestatebuilders_NetplayEndlessGameStateBuilderOptions(rule,true,s,f)))));
};
lobby_LobbyPage.addRoomHandler = function(peer,room) {
	room.onMessage(1,function(msg) {
		lobby_LobbyPage.startGame(peer,true,msg);
	});
	room.onMessage(2,function(msg) {
		lobby_LobbyPage.startGame(peer,false,msg);
	});
};
lobby_LobbyPage.handleURLJoin = function() {
	var roomID = $global.location.hash.substring(1);
	if(roomID == "") {
		ScreenManager.switchScreen(new main_$menu_MainMenuScreen());
		return;
	}
	var peer = new Peer();
	peer.on(peerjs_PeerEventType.Error,function(err) {
		ScreenManager.pushOverlay(ui_ErrorPage.mainMenuPage("PeerError: " + Std.string(err)));
	});
	peer.on(peerjs_PeerEventType.Open,function(peerID) {
		var tmp = new io_colyseus_Client("wss://" + "szi5os.colyseus.de");
		var roomID1 = roomID;
		var _g = new haxe_ds_StringMap();
		_g.h["peerID"] = peerID;
		tmp.joinById_lobby_WaitingRoomState(roomID1,_g,lobby_WaitingRoomState,function(err,room) {
			if(err != null) {
				ScreenManager.pushOverlay(ui_ErrorPage.mainMenuPage("Could Not Join Room: " + err.code + " - " + err.message));
				return;
			}
			lobby_LobbyPage.addRoomHandler(peer,room);
		});
	});
};
lobby_LobbyPage.__super__ = ui_MenuPageBase;
lobby_LobbyPage.prototype = $extend(ui_MenuPageBase.prototype,{
	room: null
	,onShow: function(menu) {
		var _gthis = this;
		ui_MenuPageBase.prototype.onShow.call(this,menu);
		if(this.room != null) {
			return;
		}
		var peer = new Peer();
		peer.on(peerjs_PeerEventType.Error,function(err) {
			ScreenManager.pushOverlay(ui_ErrorPage.mainMenuPage("PeerError: " + Std.string(err)));
		});
		peer.on(peerjs_PeerEventType.Open,function(id) {
			var rule = new game_rules_VersusRule(30,30,kha_System.get_time() * 1000000 | 0,96,70,0.5,4,false,"TSU","TSU","TSU",true,30,game_rules_PhysicsType.TSU,game_rules_AnimationsType.TSU,2.6,true,null);
			var tmp = new io_colyseus_Client("wss://" + "szi5os.colyseus.de");
			var _g = new haxe_ds_StringMap();
			_g.h["peerID"] = id;
			var value = hxbit_Serializer.save(rule).toHex();
			_g.h["rule"] = value;
			tmp.create_lobby_WaitingRoomState("waiting",_g,lobby_WaitingRoomState,function(err,room) {
				if(err != null) {
					ScreenManager.pushOverlay(ui_ErrorPage.mainMenuPage("Could Not Create Room: " + err.code + " - " + err.message));
					return;
				}
				_gthis.room = room;
				lobby_LobbyPage.addRoomHandler(peer,room);
			});
		});
	}
	,render: function(g,x,y) {
		ui_MenuPageBase.prototype.render.call(this,g,x,y);
		if(this.room == null) {
			g.drawString("Connecting...",x,y);
			return;
		}
		g.drawString("Waiting For Opponent...",x,y);
		g.drawString("Join Link: https://gelavolt.io/#" + this.room.id,x,y + this.fontHeight);
	}
	,__class__: lobby_LobbyPage
});
var lobby_WaitingRoomState = function() { };
$hxClasses["lobby.WaitingRoomState"] = lobby_WaitingRoomState;
lobby_WaitingRoomState.__name__ = "lobby.WaitingRoomState";
var main_$menu_MainMenuScreen = function() {
	var prefs = save_$data_Profile.primary.prefs;
	this.menu = new ui_Menu(new ui_MenuOptions(new main_$menu_ui_MainMenuPage(prefs),0,1,0,prefs));
	this.menu.onShow(input_AnyInputDevice.instance);
};
$hxClasses["main_menu.MainMenuScreen"] = main_$menu_MainMenuScreen;
main_$menu_MainMenuScreen.__name__ = "main_menu.MainMenuScreen";
main_$menu_MainMenuScreen.__interfaces__ = [IScreen];
main_$menu_MainMenuScreen.prototype = {
	menu: null
	,dispose: function() {
	}
	,update: function() {
		this.menu.update();
	}
	,render: function(g,g4,alpha) {
		this.menu.render(g,alpha);
	}
	,__class__: main_$menu_MainMenuScreen
};
var main_$menu_ui_MainMenuPage = function(prefsSettings) {
	this.prefsSettings = prefsSettings;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		return [new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			ScreenManager.switchScreen(new game_screens_BackupStateGameScreen(new game_gamestatebuilders_TrainingGameStateBuilder(new game_rules_VersusRule(30,30,kha_System.get_time() * 1000000 | 0,96,70,0.5,4,false,"TSU","TSU","TSU",true,30,game_rules_PhysicsType.TSU,game_rules_AnimationsType.TSU,2.6,true,null))));
		},"Training Mode",["Practice In GelaVolt's","Signature Training Mode!"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			ScreenManager.switchScreen(new game_screens_GameScreen(new game_gamestatebuilders_EndlessGameStateBuilder(new game_gamestatebuilders_EndlessGameStateBuilderOptions(new game_rules_EndlessRule(kha_System.get_time() * 1000000 | 0,96,70,0.5,4,false,"TSU","TSU","TSU",true,30,game_rules_PhysicsType.TSU,game_rules_AnimationsType.TSU,2.6,true,null),input_AnyInputDevice.instance,null))));
		},"Endless Mode",["Play For As Long As You","Can In Endless Mode And","Share Your Replays!"])),new ui_SubPageWidget(new ui_SubPageWidgetOptions("Host Netplay Test (WIP)",new lobby_LobbyPage(),[])),new ui_SubPageWidget(new ui_SubPageWidgetOptions("Options",new main_$menu_ui_OptionsPage(prefsSettings),["Change Various Options and Settings"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			window.open("https://github.com/doczi-dominik/gelavolt/releases");
		},"Download Desktop Version",["Download GelaVolt's","Desktop Version For","Better Performance","And Offline Play"])),new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			window.open("https://discord.gg/wsWArpAFJK");
		},"Official Discord",["Join The Official","Development Server","For GelaVolt!","","https://discord.gg/wsWArpAFJK"]))];
	},"GelaVolt"));
};
$hxClasses["main_menu.ui.MainMenuPage"] = main_$menu_ui_MainMenuPage;
main_$menu_ui_MainMenuPage.__name__ = "main_menu.ui.MainMenuPage";
main_$menu_ui_MainMenuPage.__super__ = ui_ListMenuPage;
main_$menu_ui_MainMenuPage.prototype = $extend(ui_ListMenuPage.prototype,{
	prefsSettings: null
	,__class__: main_$menu_ui_MainMenuPage
});
var main_$menu_ui_OptionsPage = function(prefsSettings) {
	var _gthis = this;
	this.prefsSettings = prefsSettings;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		return [new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Controls",["Change Keybindings For Keyboard And Gamepads"],function(menu) {
			var inputDevice = menu.inputDevice;
			var middle;
			switch(inputDevice.type) {
			case 0:case 1:
				middle = _gthis.buildControls(inputDevice);
				break;
			case 2:
				var keyboardDevice = js_Boot.__cast(input_AnyInputDevice.instance.devices.h[-1] , input_KeyboardInputDevice);
				middle = [new ui_SubPageWidget(new ui_SubPageWidgetOptions("Keyboard Controls",new ui_KeyboardConfirmWrapper(new ui_KeyboardConfirmWrapperOptions(keyboardDevice,function() {
					return new ui_InputLimitedListPage(new ui_InputLimitedListPageOptions(keyboardDevice,function(_) {
						return _gthis.buildControls(keyboardDevice);
					},"Keyboard Controls"));
				})),["Change Keybindings"])),new ui_SubPageWidget(new ui_SubPageWidgetOptions("Gamepad Controls",new ui_AnyGamepadDetectWrapper(new ui_AnyGamepadDetectWrapperOptions(keyboardDevice,function(gamepadDevice) {
					return new ui_InputLimitedListPage(new ui_InputLimitedListPageOptions(gamepadDevice,function(_) {
						return _gthis.buildControls(gamepadDevice);
					},"Gamepad Controls"));
				})),["Change Gamepad Bindings"]))];
				break;
			case 3:
				middle = [];
				break;
			}
			return _gthis.buildUniversalTop(inputDevice).concat(middle).concat(_gthis.buildUniversalBottom(inputDevice));
		})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Personalization",["Change Various Options Related","To Appearance, Menu Navigation","And Game Mechanics"],function(_) {
			return [new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Menu Preferences",["Change Various Options Related To","Menu Navigation And Appearance"],function(menu) {
				return [new ui_YesNoWidget(new ui_YesNoWidgetOptions("Remember Cursor Position",["Whether To Remember","The Cursor's Position","When Entering/Leaving","A Submenu","","If Disabled, The Initial","Selection Will Always Be","The First Item"],menu.prefsSettings.menuRememberCursor,function(value) {
					menu.prefsSettings.menuRememberCursor = value;
					save_$data_SaveManager.saveProfiles();
				}))];
			})),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Game Preferences",["Change Various Options Related To","Game Appearance And Mechanics"],function(_) {
				return [new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Gelo Group Shadow Options",["Change Various Options Related","To the Gelo Group Shadow Appearance"],function(_) {
					return [new ui_YesNoWidget(new ui_YesNoWidgetOptions("Enable",["Enable Or Disable The Shadow","That Shows Where Gelo","Groups Will Fall"],prefsSettings.showGroupShadow,function(value) {
						prefsSettings.showGroupShadow = value;
						save_$data_SaveManager.saveProfiles();
					})),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Opacity",0,1,0.1,prefsSettings.shadowOpacity,function(value) {
						prefsSettings.shadowOpacity = value;
						save_$data_SaveManager.saveProfiles();
					},["Change The Transparency Of The","Gelo Group Shadow"])),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Highlight Rotating Shadows",["Alter The Appearance Of Rotating","Gelos' Shadow"],prefsSettings.shadowHighlightOthers,function(value) {
						prefsSettings.shadowHighlightOthers = value;
						save_$data_SaveManager.saveProfiles();
					})),new ui_YesNoWidget(new ui_YesNoWidgetOptions("Show Potential Chain Triggering",["Animate The Gelo Group Shadow","If A Chain Is About To Be","Triggered"],prefsSettings.shadowWillTriggerChain,function(value) {
						prefsSettings.shadowWillTriggerChain = value;
						save_$data_SaveManager.saveProfiles();
					}))];
				}))];
			}))];
		})),new ui_SubPageWidget(new ui_SubPageWidgetOptions("Profiles",new main_$menu_ui_ProfileListPage(),["View and Edit Profiles"]))];
	},"Options"));
};
$hxClasses["main_menu.ui.OptionsPage"] = main_$menu_ui_OptionsPage;
main_$menu_ui_OptionsPage.__name__ = "main_menu.ui.OptionsPage";
main_$menu_ui_OptionsPage.__super__ = ui_ListMenuPage;
main_$menu_ui_OptionsPage.prototype = $extend(ui_ListMenuPage.prototype,{
	prefsSettings: null
	,buildUniversalTop: function(inputDevice) {
		var inputSettings = inputDevice.get_inputSettings();
		var tmp = new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Gamepad Stick Deadzone",0,0.9,0.05,inputSettings.deadzone,function(value) {
			inputSettings.deadzone = value;
			save_$data_SaveManager.saveProfiles();
		},["Adjust The Threshold Where","The Analog Stick Doesn't Respond","To Inputs","","Increase This Value In Small Increments"," If You Experience Drifting, Rebounding","or Weird Inputs In General"]));
		var tmp1;
		switch(inputSettings.gamepadBrand) {
		case "DS4":
			tmp1 = 0;
			break;
		case "JOYCON":
			tmp1 = 2;
			break;
		case "SW Pro Controller":
			tmp1 = 1;
			break;
		case "XB360":
			tmp1 = 4;
			break;
		case "XBONE":
			tmp1 = 3;
			break;
		}
		return [tmp,new ui_OptionListWidget(new ui_OptionListWidgetOptions("Gamepad Brand",["DS4","SW Pro Controller","JOYCON","XBONE","XB360"],tmp1,function(value) {
			inputSettings.gamepadBrand = value;
			save_$data_SaveManager.saveProfiles();
		},["Change The Type Of Button Icons","To Display"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Offline Input Delay",0,8,1,inputSettings.localDelay,function(value) {
			inputSettings.localDelay = value | 0;
			save_$data_SaveManager.saveProfiles();
		},["Input Delay For Singleplayer Gamemodes","","Setting This To Match","'Netplay Input Delay' Is Recommended!"])),new ui_NumberRangeWidget(new ui_NumberRangeWidgetOptions("Netplay Input Delay",0,8,1,inputSettings.netplayDelay,function(value) {
			inputSettings.netplayDelay = value | 0;
			save_$data_SaveManager.saveProfiles();
		},["Input Delay For Online Multiplayer","","Lower: More Responsive Inputs,","More Visual Glitches","","Higher: Less Responsive Inputs,","Less Visual Glitches"]))];
	}
	,buildUniversalBottom: function(inputDevice) {
		return [new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset Your Input Settings",function() {
			inputDevice.get_inputSettings().setDefaults();
			save_$data_SaveManager.saveProfiles();
		},"Reset To Default",["Reset Input Settings"]))];
	}
	,buildControls: function(inputDevice) {
		return [new game_ui_ControlsPageWidget(new game_ui_ControlsPageWidgetOptions("Menu Controls",["Change Controls Related To","Menu Navigation"],["PAUSE","MENU_LEFT","MENU_RIGHT","MENU_UP","MENU_DOWN","BACK","CONFIRM"],inputDevice)),new game_ui_ControlsPageWidget(new game_ui_ControlsPageWidgetOptions("Game Controls",["Change Controls Related To","Gameplay"],["SHIFT_LEFT","SHIFT_RIGHT","SOFT_DROP","HARD_DROP","ROTATE_LEFT","ROTATE_RIGHT","QUICK_RESTART"],inputDevice)),new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Training Controls",["Change Controls Specific To","Training Mode"],function(_) {
			return [new game_ui_ControlsPageWidget(new game_ui_ControlsPageWidgetOptions("Universal Controls",["Change Controls That Are Used","Both In Play Mode And","Edit Mode"],["TOGGLE_EDIT_MODE"],inputDevice)),new game_ui_ControlsPageWidget(new game_ui_ControlsPageWidgetOptions("Play Mode Controls",["Change Controls That Are Only","Available In Play Mode"],["PREVIOUS_GROUP","NEXT_GROUP","SAVE_STATE","LOAD_STATE"],inputDevice)),new game_ui_ControlsPageWidget(new game_ui_ControlsPageWidgetOptions("Edit Mode Controls",["Change Controls That Are Only","Available In Edit Mode"],["EDIT_LEFT","EDIT_RIGHT","EDIT_UP","EDIT_DOWN","EDIT_CLEAR","EDIT_SET","PREVIOUS_STEP","NEXT_STEP","PREVIOUS_COLOR","NEXT_COLOR","TOGGLE_MARKERS"],inputDevice))];
		}))];
	}
	,__class__: main_$menu_ui_OptionsPage
});
var main_$menu_ui_ProfileListPage = function() {
	var _gthis = this;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		var widgets = [new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
			save_$data_SaveManager.newProfile();
			_gthis.onShow(_gthis.menu);
			_gthis.onResize();
		},"Create New",["Create A New Profile"]))];
		var _g = 0;
		var _g1 = save_$data_SaveManager.profiles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var _g2 = ["Edit " + p.name + " Or Set It As Primary"];
			widgets.push(new ui_SubPageWidget(new ui_SubPageWidgetOptions(p.name,new main_$menu_ui_ProfilePage(_gthis,p),_g2)));
		}
		return widgets;
	},"Profiles"));
};
$hxClasses["main_menu.ui.ProfileListPage"] = main_$menu_ui_ProfileListPage;
main_$menu_ui_ProfileListPage.__name__ = "main_menu.ui.ProfileListPage";
main_$menu_ui_ProfileListPage.__super__ = ui_ListMenuPage;
main_$menu_ui_ProfileListPage.prototype = $extend(ui_ListMenuPage.prototype,{
	rebuild: function() {
		this.onShow(this.menu);
		this.onResize();
	}
	,__class__: main_$menu_ui_ProfileListPage
});
var main_$menu_ui_ProfilePage = function(listPage,profile) {
	var _gthis = this;
	this.listPage = listPage;
	ui_ListMenuPage.call(this,new ui_ListMenuPageOptions(function(_) {
		var widgets = [new game_ui_ListSubPageWidget(new game_ui_ListSubPageWidgetOptions("Reset To Default",["Reset Various Aspects Of The Profile","To Their Default Values"],function(_) {
			return [new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset Your Input Settings",function() {
				profile.input.setDefaults();
				save_$data_SaveManager.saveProfiles();
			},"Reset Input Settings",["Reset Input Settings"])),new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset Your Preferences",function() {
				profile.prefs = new save_$data_PrefsSettings(new haxe_ds_StringMap());
				save_$data_SaveManager.saveProfiles();
			},"Reset Preferences",["Reset Preferences"])),new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset Your Training Options",function() {
				profile.trainingSettings = new save_$data_TrainingSettings(new haxe_ds_StringMap());
				save_$data_SaveManager.saveProfiles();
			},"Reset Training Options",["Reset Training Mode-Exclusive Options"])),new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset Your Endless Options",function() {
				profile.endlessSettings = new save_$data_EndlessSettings(new haxe_ds_StringMap());
				save_$data_SaveManager.saveProfiles();
			},"Reset Endless Options",["Reset Endless Mode-Exclusive Options"])),new ui_AreYouSureSubPageWidget(new ui_AreYouSureSubPageWidgetOptions("This Will IRREVERSIBLY Reset All Of Your Data",function() {
				profile.input.setDefaults();
				profile.prefs = new save_$data_PrefsSettings(new haxe_ds_StringMap());
				profile.trainingSettings = new save_$data_TrainingSettings(new haxe_ds_StringMap());
				profile.endlessSettings = new save_$data_EndlessSettings(new haxe_ds_StringMap());
				save_$data_SaveManager.saveProfiles();
			},"Reset All",["Reset Input, Preferences, Training","And Endless Options"]))];
		}))];
		if(profile != save_$data_Profile.primary) {
			widgets.unshift(new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
				save_$data_Profile.changePrimary(profile);
				_gthis.onShow(_gthis.menu);
				_gthis.onResize();
			},"Set As Primary",["Set The Profile As Primary","","The Primary Profile Is Used For","Menu Keybinds And Universal Match Preferences","(Background Animation, Music, Etc.)"])));
			widgets.push(new ui_ButtonWidget(new ui_ButtonWidgetOptions(function() {
				save_$data_SaveManager.deleteProfile(profile);
				_gthis.menu.popPage();
				listPage.onShow(listPage.menu);
				listPage.onResize();
			},"Delete Profile",["Permanently Delete This Profile"])));
		}
		return widgets;
	},profile.name));
};
$hxClasses["main_menu.ui.ProfilePage"] = main_$menu_ui_ProfilePage;
main_$menu_ui_ProfilePage.__name__ = "main_menu.ui.ProfilePage";
main_$menu_ui_ProfilePage.__super__ = ui_ListMenuPage;
main_$menu_ui_ProfilePage.prototype = $extend(ui_ListMenuPage.prototype,{
	listPage: null
	,__class__: main_$menu_ui_ProfilePage
});
var org_msgpack_DecodeOption = $hxEnums["org.msgpack.DecodeOption"] = { __ename__:"org.msgpack.DecodeOption",__constructs__:null
	,AsMap: {_hx_name:"AsMap",_hx_index:0,__enum__:"org.msgpack.DecodeOption",toString:$estr}
	,AsObject: {_hx_name:"AsObject",_hx_index:1,__enum__:"org.msgpack.DecodeOption",toString:$estr}
};
org_msgpack_DecodeOption.__constructs__ = [org_msgpack_DecodeOption.AsMap,org_msgpack_DecodeOption.AsObject];
var org_msgpack__$Decoder_Pair = function(k,v) {
	this.k = k;
	this.v = v;
};
$hxClasses["org.msgpack._Decoder.Pair"] = org_msgpack__$Decoder_Pair;
org_msgpack__$Decoder_Pair.__name__ = "org.msgpack._Decoder.Pair";
org_msgpack__$Decoder_Pair.prototype = {
	k: null
	,v: null
	,__class__: org_msgpack__$Decoder_Pair
};
var org_msgpack_Decoder = function(b,option) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(true);
	this.o = this.decode(i,option);
};
$hxClasses["org.msgpack.Decoder"] = org_msgpack_Decoder;
org_msgpack_Decoder.__name__ = "org.msgpack.Decoder";
org_msgpack_Decoder.prototype = {
	o: null
	,decode: function(i,option) {
		try {
			var b = i.readByte();
			switch(b) {
			case 192:
				return null;
			case 194:
				return false;
			case 195:
				return true;
			case 196:
				return i.read(i.readByte());
			case 197:
				return i.read(i.readUInt16());
			case 198:
				return i.read(i.readInt32());
			case 202:
				return i.readFloat();
			case 203:
				return i.readDouble();
			case 204:
				return i.readByte();
			case 205:
				return i.readUInt16();
			case 206:
				return i.readInt32();
			case 207:
				return this.readUInt64(i);
			case 208:
				return i.readInt8();
			case 209:
				return i.readInt16();
			case 210:
				return i.readInt32();
			case 211:
				return this.readInt64(i);
			case 212:
				var type = i.readByte();
				if(type == 0) {
					i.readByte();
					return null;
				}
				throw haxe_Exception.thrown("MsgPack - unsupported extension type: " + type);
			case 215:
				var type = i.readByte();
				if(type == 0) {
					var high = i.readInt32() * Math.pow(2,32);
					var low = i.readInt32();
					return new Date(UInt.toFloat(low) + high);
				}
				throw haxe_Exception.thrown("MsgPack - unsupported extension type: " + type);
			case 217:
				return i.readString(i.readByte());
			case 218:
				return i.readString(i.readUInt16());
			case 219:
				return i.readString(i.readInt32());
			case 220:
				return this.readArray(i,i.readUInt16(),option);
			case 221:
				return this.readArray(i,i.readInt32(),option);
			case 222:
				return this.readMap(i,i.readUInt16(),option);
			case 223:
				return this.readMap(i,i.readInt32(),option);
			default:
				if(b < 128) {
					return b;
				} else if(b < 144) {
					return this.readMap(i,15 & b,option);
				} else if(b < 160) {
					return this.readArray(i,15 & b,option);
				} else if(b < 192) {
					return i.readString(31 & b);
				} else if(b > 223) {
					return -256 | b;
				}
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return null;
	}
	,readInt64: function(i) {
		var high = i.readInt32();
		var low = i.readInt32();
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,readUInt64: function(i) {
		var high = i.readInt32() * Math.pow(2,32);
		var low = i.readInt32();
		return high + low;
	}
	,readArray: function(i,length,option) {
		var a = [];
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var x = _g++;
			a.push(this.decode(i,option));
		}
		return a;
	}
	,readMap: function(i,length,option) {
		switch(option._hx_index) {
		case 0:
			var pairs = [];
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var n = _g++;
				var k = this.decode(i,option);
				var v = this.decode(i,option);
				pairs.push(new org_msgpack__$Decoder_Pair(k,v));
			}
			if(pairs.length == 0) {
				return new haxe_ds_StringMap();
			}
			var _g = Type.typeof(pairs[0].k);
			switch(_g._hx_index) {
			case 1:
				var out = new haxe_ds_IntMap();
				var _g1 = 0;
				while(_g1 < pairs.length) {
					var p = pairs[_g1];
					++_g1;
					if(Type.typeof(p.k)._hx_index != 1) {
						throw haxe_Exception.thrown("Error: Mixed key type when decoding IntMap");
					}
					if(out.h.hasOwnProperty(p.k)) {
						throw haxe_Exception.thrown("Error: Duplicate keys found => " + Std.string(p.k));
					}
					out.h[p.k] = p.v;
				}
				return out;
			case 6:
				var c = _g.c;
				if(c.__name__ == "String") {
					var out = new haxe_ds_StringMap();
					var _g = 0;
					while(_g < pairs.length) {
						var p = pairs[_g];
						++_g;
						var _g1 = Type.typeof(p.k);
						if(_g1._hx_index == 6) {
							var c = _g1.c;
							if(c.__name__ != "String") {
								throw haxe_Exception.thrown("Error: Mixed key type when decoding StringMap");
							}
						} else {
							throw haxe_Exception.thrown("Error: Mixed key type when decoding StringMap");
						}
						if(Object.prototype.hasOwnProperty.call(out.h,p.k)) {
							throw haxe_Exception.thrown("Error: Duplicate keys found => " + Std.string(p.k));
						}
						out.h[p.k] = p.v;
					}
					return out;
				} else {
					throw haxe_Exception.thrown("Error: Unsupported key Type");
				}
				break;
			default:
				throw haxe_Exception.thrown("Error: Unsupported key Type");
			}
			break;
		case 1:
			var out = { };
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var n = _g++;
				var k = this.decode(i,option);
				var v = this.decode(i,option);
				out[Std.string(k)] = v;
			}
			return out;
		}
	}
	,getResult: function() {
		return this.o;
	}
	,__class__: org_msgpack_Decoder
};
var org_msgpack_Encoder = function(d) {
	this.o = new haxe_io_BytesOutput();
	this.o.set_bigEndian(true);
	this.encode(d);
};
$hxClasses["org.msgpack.Encoder"] = org_msgpack_Encoder;
org_msgpack_Encoder.__name__ = "org.msgpack.Encoder";
org_msgpack_Encoder.prototype = {
	o: null
	,encode: function(d) {
		var _g = Type.typeof(d);
		switch(_g._hx_index) {
		case 0:
			this.o.writeByte(192);
			break;
		case 1:
			var d1 = d;
			if(d1 < -32) {
				if(d1 < -32768) {
					this.o.writeByte(210);
					this.o.writeInt32(d1);
				} else if(d1 < -128) {
					this.o.writeByte(209);
					this.o.writeInt16(d1);
				} else {
					this.o.writeByte(208);
					this.o.writeInt8(d1);
				}
			} else if(d1 < 128) {
				this.o.writeByte(d1 & 255);
			} else if(d1 < 256) {
				this.o.writeByte(204);
				this.o.writeByte(d1);
			} else if(d1 < 65536) {
				this.o.writeByte(205);
				this.o.writeUInt16(d1);
			} else {
				this.o.writeByte(206);
				this.o.writeInt32(d1);
			}
			break;
		case 2:
			var d1 = d;
			var a = Math.abs(d1);
			if(a > 1.40129846432481707e-45 && a < 3.40282346638528860e+38) {
				this.o.writeByte(202);
				this.o.writeFloat(d1);
			} else {
				this.o.writeByte(203);
				this.o.writeDouble(d1);
			}
			break;
		case 3:
			this.o.writeByte(d ? 195 : 194);
			break;
		case 4:
			var f = Reflect.fields(d);
			var length = Lambda.count(f);
			if(length < 16) {
				this.o.writeByte(128 | length);
			} else if(length < 65536) {
				this.o.writeByte(222);
				this.o.writeUInt16(length);
			} else {
				this.o.writeByte(223);
				this.o.writeInt32(length);
			}
			var _g1 = 0;
			while(_g1 < f.length) {
				var k = f[_g1];
				++_g1;
				this.encode(k);
				this.encode(Reflect.field(d,k));
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Error: Function not supported");
		case 6:
			var c = _g.c;
			switch(c.__name__) {
			case "Array":
				var d1 = d;
				var length = d1.length;
				if(length < 16) {
					this.o.writeByte(144 | length);
				} else if(length < 65536) {
					this.o.writeByte(220);
					this.o.writeUInt16(length);
				} else {
					this.o.writeByte(221);
					this.o.writeInt32(length);
				}
				var _g1 = 0;
				while(_g1 < d1.length) {
					var e = d1[_g1];
					++_g1;
					this.encode(e);
				}
				break;
			case "String":
				var encoded = haxe_io_Bytes.ofString(d);
				var length = encoded.length;
				if(length < 32) {
					this.o.writeByte(160 | length);
				} else if(length < 256) {
					this.o.writeByte(217);
					this.o.writeByte(length);
				} else if(length < 65536) {
					this.o.writeByte(218);
					this.o.writeUInt16(length);
				} else {
					this.o.writeByte(219);
					this.o.writeInt32(length);
				}
				this.o.write(encoded);
				break;
			case "haxe._Int64.___Int64":
				var d1 = d;
				this.o.writeByte(211);
				this.o.writeInt32(d1.high);
				this.o.writeInt32(d1.low);
				break;
			case "haxe.ds.IntMap":case "haxe.ds.StringMap":case "haxe.ds.UnsafeStringMap":
				var d1 = d;
				var length = 0;
				var k = d1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					++length;
				}
				if(length < 16) {
					this.o.writeByte(128 | length);
				} else if(length < 65536) {
					this.o.writeByte(222);
					this.o.writeUInt16(length);
				} else {
					this.o.writeByte(223);
					this.o.writeInt32(length);
				}
				var k = d1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.encode(k1);
					this.encode(d1.get(k1));
				}
				break;
			case "haxe.io.Bytes":
				var b = d;
				var length = b.length;
				if(length < 256) {
					this.o.writeByte(196);
					this.o.writeByte(length);
				} else if(length < 65536) {
					this.o.writeByte(197);
					this.o.writeUInt16(length);
				} else {
					this.o.writeByte(198);
					this.o.writeInt32(length);
				}
				this.o.write(b);
				break;
			default:
				throw haxe_Exception.thrown("Error: " + c.__name__ + " not supported");
			}
			break;
		case 7:
			var e = _g.e;
			throw haxe_Exception.thrown("Error: Enum not supported");
		case 8:
			throw haxe_Exception.thrown("Error: Unknown Data Type");
		}
	}
	,writeInt64: function(d) {
		this.o.writeByte(211);
		this.o.writeInt32(d.high);
		this.o.writeInt32(d.low);
	}
	,writeInt: function(d) {
		if(d < -32) {
			if(d < -32768) {
				this.o.writeByte(210);
				this.o.writeInt32(d);
			} else if(d < -128) {
				this.o.writeByte(209);
				this.o.writeInt16(d);
			} else {
				this.o.writeByte(208);
				this.o.writeInt8(d);
			}
		} else if(d < 128) {
			this.o.writeByte(d & 255);
		} else if(d < 256) {
			this.o.writeByte(204);
			this.o.writeByte(d);
		} else if(d < 65536) {
			this.o.writeByte(205);
			this.o.writeUInt16(d);
		} else {
			this.o.writeByte(206);
			this.o.writeInt32(d);
		}
	}
	,writeFloat: function(d) {
		var a = Math.abs(d);
		if(a > 1.40129846432481707e-45 && a < 3.40282346638528860e+38) {
			this.o.writeByte(202);
			this.o.writeFloat(d);
		} else {
			this.o.writeByte(203);
			this.o.writeDouble(d);
		}
	}
	,writeBinary: function(b) {
		var length = b.length;
		if(length < 256) {
			this.o.writeByte(196);
			this.o.writeByte(length);
		} else if(length < 65536) {
			this.o.writeByte(197);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(198);
			this.o.writeInt32(length);
		}
		this.o.write(b);
	}
	,writeString: function(b) {
		var encoded = haxe_io_Bytes.ofString(b);
		var length = encoded.length;
		if(length < 32) {
			this.o.writeByte(160 | length);
		} else if(length < 256) {
			this.o.writeByte(217);
			this.o.writeByte(length);
		} else if(length < 65536) {
			this.o.writeByte(218);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(219);
			this.o.writeInt32(length);
		}
		this.o.write(encoded);
	}
	,writeArray: function(d) {
		var length = d.length;
		if(length < 16) {
			this.o.writeByte(144 | length);
		} else if(length < 65536) {
			this.o.writeByte(220);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(221);
			this.o.writeInt32(length);
		}
		var _g = 0;
		while(_g < d.length) {
			var e = d[_g];
			++_g;
			this.encode(e);
		}
	}
	,writeMapLength: function(length) {
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
	}
	,writeMap: function(d) {
		var length = 0;
		var k = d.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			++length;
		}
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
		var k = d.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this.encode(k1);
			this.encode(d.get(k1));
		}
	}
	,writeObject: function(d) {
		var f = Reflect.fields(d);
		var length = Lambda.count(f);
		if(length < 16) {
			this.o.writeByte(128 | length);
		} else if(length < 65536) {
			this.o.writeByte(222);
			this.o.writeUInt16(length);
		} else {
			this.o.writeByte(223);
			this.o.writeInt32(length);
		}
		var _g = 0;
		while(_g < f.length) {
			var k = f[_g];
			++_g;
			this.encode(k);
			this.encode(Reflect.field(d,k));
		}
	}
	,getBytes: function() {
		return this.o.getBytes();
	}
	,__class__: org_msgpack_Encoder
};
var org_msgpack_MsgPack = function() { };
$hxClasses["org.msgpack.MsgPack"] = org_msgpack_MsgPack;
org_msgpack_MsgPack.__name__ = "org.msgpack.MsgPack";
org_msgpack_MsgPack.encode = function(d) {
	return new org_msgpack_Encoder(d).o.getBytes();
};
org_msgpack_MsgPack.decode = function(b,option) {
	if(option == null) {
		option = org_msgpack_DecodeOption.AsObject;
	}
	return new org_msgpack_Decoder(b,option).o;
};
var peerjs_DataConnectionEventType = function() { };
$hxClasses["peerjs.DataConnectionEventType"] = peerjs_DataConnectionEventType;
peerjs_DataConnectionEventType.__name__ = "peerjs.DataConnectionEventType";
var peerjs_PeerDataSerialization = function() { };
$hxClasses["peerjs.PeerDataSerialization"] = peerjs_PeerDataSerialization;
peerjs_PeerDataSerialization.__name__ = "peerjs.PeerDataSerialization";
var peerjs_PeerErrorType = function() { };
$hxClasses["peerjs.PeerErrorType"] = peerjs_PeerErrorType;
peerjs_PeerErrorType.__name__ = "peerjs.PeerErrorType";
var peerjs_PeerEventType = function() { };
$hxClasses["peerjs.PeerEventType"] = peerjs_PeerEventType;
peerjs_PeerEventType.__name__ = "peerjs.PeerEventType";
var save_$data_IClearOnXModeContainer = function() { };
$hxClasses["save_data.IClearOnXModeContainer"] = save_$data_IClearOnXModeContainer;
save_$data_IClearOnXModeContainer.__name__ = "save_data.IClearOnXModeContainer";
save_$data_IClearOnXModeContainer.__isInterface__ = true;
save_$data_IClearOnXModeContainer.prototype = {
	clearOnXMode: null
	,__class__: save_$data_IClearOnXModeContainer
};
var save_$data_EndlessSettings = function(overrides) {
	this.showControlHints = true;
	this.clearOnXMode = "NEW";
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				switch(js_Boot.__cast(k , String)) {
				case "CLEAR_ON_X_MODE":
					this.clearOnXMode = js_Boot.__cast(v , String);
					break;
				case "SHOW_CONTROL_HINTS":
					this.showControlHints = js_Boot.__cast(v , Bool);
					break;
				}
			} catch( _g1 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
};
$hxClasses["save_data.EndlessSettings"] = save_$data_EndlessSettings;
save_$data_EndlessSettings.__name__ = "save_data.EndlessSettings";
save_$data_EndlessSettings.__interfaces__ = [save_$data_IClearOnXModeContainer];
save_$data_EndlessSettings.prototype = {
	showControlHints: null
	,clearOnXMode: null
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		var wereOverrides = false;
		if(this.showControlHints != true) {
			overrides.h["SHOW_CONTROL_HINTS"] = this.showControlHints;
			wereOverrides = true;
		}
		if(this.clearOnXMode != "NEW") {
			overrides.h["CLEAR_ON_X_MODE"] = this.clearOnXMode;
			wereOverrides = true;
		}
		if(wereOverrides) {
			return overrides;
		} else {
			return null;
		}
	}
	,__class__: save_$data_EndlessSettings
};
var save_$data_GraphicsSettings = function(overrides) {
	this.fullscreen = true;
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				if(js_Boot.__cast(k , String) == "FULLSCREEN") {
					this.fullscreen = js_Boot.__cast(v , Bool);
				}
			} catch( _g1 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
};
$hxClasses["save_data.GraphicsSettings"] = save_$data_GraphicsSettings;
save_$data_GraphicsSettings.__name__ = "save_data.GraphicsSettings";
save_$data_GraphicsSettings.prototype = {
	fullscreen: null
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		var wereOverrides = false;
		if(this.fullscreen != true) {
			overrides.h["FULLSCREEN"] = this.fullscreen;
			wereOverrides = true;
		}
		if(wereOverrides) {
			return overrides;
		} else {
			return null;
		}
	}
	,__class__: save_$data_GraphicsSettings
};
var save_$data_InputSettings = function(overrides) {
	this.updateListeners = [];
	this.setDefaults();
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				switch(js_Boot.__cast(k , String)) {
				case "DEADZONE":
					this.deadzone = js_Boot.__cast(v , Float);
					break;
				case "GAMEPAD_BRAND":
					this.gamepadBrand = js_Boot.__cast(v , String);
					break;
				case "LOCAL_DELAY":
					this.localDelay = js_Boot.__cast(v , Int);
					break;
				case "MAPPINGS":
					var h = (js_Boot.__cast(v , haxe_ds_StringMap)).h;
					var _g2_h = h;
					var _g2_keys = Object.keys(h);
					var _g2_length = _g2_keys.length;
					var _g2_current = 0;
					while(_g2_current < _g2_length) {
						var key1 = _g2_keys[_g2_current++];
						var _g1 = { key : key1, value : _g2_h[key1]};
						var kk = _g1.key;
						var vv = _g1.value;
						var this1 = this.mappings;
						var v1 = input_InputMapping.fromString(js_Boot.__cast(vv , String));
						this1.h[js_Boot.__cast(kk , String)] = v1;
					}
					break;
				case "NETPLAY_DELAY":
					this.netplayDelay = js_Boot.__cast(v , Int);
					break;
				}
			} catch( _g2 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
};
$hxClasses["save_data.InputSettings"] = save_$data_InputSettings;
save_$data_InputSettings.__name__ = "save_data.InputSettings";
save_$data_InputSettings.prototype = {
	updateListeners: null
	,mappings: null
	,deadzone: null
	,gamepadBrand: null
	,localDelay: null
	,netplayDelay: null
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		var wereOverrides = false;
		var mappingOverrides = new haxe_ds_StringMap();
		var wereMappingOverrides = false;
		var h = this.mappings.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			if(v.isNotEqual(save_$data_InputSettings.MAPPINGS_DEFAULTS.h[k])) {
				var value = v.asString();
				mappingOverrides.h[k] = value;
				wereMappingOverrides = true;
			}
		}
		if(wereMappingOverrides) {
			overrides.h["MAPPINGS"] = mappingOverrides;
			wereOverrides = true;
		}
		if(this.deadzone != 0.5) {
			overrides.h["DEADZONE"] = this.deadzone;
			wereOverrides = true;
		}
		if(this.gamepadBrand != "DS4") {
			overrides.h["GAMEPAD_BRAND"] = this.gamepadBrand;
			wereOverrides = true;
		}
		if(this.localDelay != 0) {
			overrides.h["LOCAL_DELAY"] = this.localDelay;
			wereOverrides = true;
		}
		if(this.netplayDelay != 2) {
			overrides.h["NETPLAY_DELAY"] = this.netplayDelay;
			wereOverrides = true;
		}
		if(wereOverrides) {
			return overrides;
		} else {
			return null;
		}
	}
	,addUpdateListener: function(callback) {
		this.updateListeners.push(callback);
		callback();
	}
	,notifyListeners: function() {
		var _g = 0;
		var _g1 = this.updateListeners;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
	,setDefaults: function() {
		this.mappings = haxe_ds_StringMap.createCopy(save_$data_InputSettings.MAPPINGS_DEFAULTS.h);
		this.deadzone = 0.5;
		this.gamepadBrand = "DS4";
		this.localDelay = 0;
		this.netplayDelay = 2;
		this.notifyListeners();
	}
	,getButtonSprite: function(action) {
		return input_ButtonSpriteCoordinates_BUTTON_SPRITE_COORDINATES.h[this.gamepadBrand].h[this.mappings.h[action].gamepadButton];
	}
	,getAxisSprite: function(action) {
		var this1 = input_AxisSpriteCoordinates_AXIS_SPRITE_COORDINATES.h[this.gamepadBrand];
		var key = this.mappings.h[action].gamepadAxis.hashCode();
		return this1.h[key];
	}
	,__class__: save_$data_InputSettings
};
var save_$data_PrefsSettings = function(overrides) {
	this.colorTints = save_$data_PrefsSettings.COLOR_TINTS_DEFAULT.copy();
	this.primaryColors = save_$data_PrefsSettings.PRIMARY_COLORS_DEFAULT.copy();
	this.boardBackground = save_$data_PrefsSettings.BOARD_BACKGROUND_DEFAULT;
	this.menuRememberCursor = true;
	this.capAtCrowns = true;
	this.showGroupShadow = true;
	this.shadowOpacity = 0.5;
	this.shadowHighlightOthers = true;
	this.shadowWillTriggerChain = true;
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				switch(js_Boot.__cast(k , String)) {
				case "BOARD_BACKGROUND":
					this.boardBackground = js_Boot.__cast(v , Int);
					break;
				case "CAP_AT_CROWNS":
					this.capAtCrowns = js_Boot.__cast(v , Bool);
					break;
				case "COLOR_TINTS":
					var h = (js_Boot.__cast(v , haxe_ds_StringMap)).h;
					var _g2_h = h;
					var _g2_keys = Object.keys(h);
					var _g2_length = _g2_keys.length;
					var _g2_current = 0;
					while(_g2_current < _g2_length) {
						var key1 = _g2_keys[_g2_current++];
						var _g1 = { key : key1, value : _g2_h[key1]};
						var kk = _g1.key;
						var vv = _g1.value;
						var v1 = js_Boot.__cast(vv , Int);
						this.colorTints.h[js_Boot.__cast(kk , Int)] = v1;
					}
					break;
				case "MENU_REMEMBER_CURSOR":
					this.menuRememberCursor = js_Boot.__cast(v , Bool);
					break;
				case "PRIMARY_COLORS":
					var h1 = (js_Boot.__cast(v , haxe_ds_StringMap)).h;
					var _g2_h1 = h1;
					var _g2_keys1 = Object.keys(h1);
					var _g2_length1 = _g2_keys1.length;
					var _g2_current1 = 0;
					while(_g2_current1 < _g2_length1) {
						var key2 = _g2_keys1[_g2_current1++];
						var _g2 = { key : key2, value : _g2_h1[key2]};
						var kk1 = _g2.key;
						var vv1 = _g2.value;
						var v2 = js_Boot.__cast(vv1 , Int);
						this.primaryColors.h[js_Boot.__cast(kk1 , Int)] = v2;
					}
					break;
				case "SHADOW_HIGHLIGHT_OTHERS":
					this.shadowHighlightOthers = js_Boot.__cast(v , Bool);
					break;
				case "SHADOW_OPACITY":
					this.shadowOpacity = js_Boot.__cast(v , Float);
					break;
				case "SHADOW_WILL_TRIGGER_CHAIN":
					this.shadowWillTriggerChain = js_Boot.__cast(v , Bool);
					break;
				case "SHOW_GROUP_SHADOW":
					this.showGroupShadow = js_Boot.__cast(v , Bool);
					break;
				}
			} catch( _g3 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
};
$hxClasses["save_data.PrefsSettings"] = save_$data_PrefsSettings;
save_$data_PrefsSettings.__name__ = "save_data.PrefsSettings";
save_$data_PrefsSettings.prototype = {
	colorTints: null
	,primaryColors: null
	,boardBackground: null
	,menuRememberCursor: null
	,capAtCrowns: null
	,showGroupShadow: null
	,shadowOpacity: null
	,shadowHighlightOthers: null
	,shadowWillTriggerChain: null
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		var wereOverrides = false;
		var tintOverrides = new haxe_ds_IntMap();
		var wereTintOverrides = false;
		var map = this.colorTints;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g = { value : _g_map.get(key), key : key};
			var k = _g.key;
			var v = _g.value;
			if(v != save_$data_PrefsSettings.COLOR_TINTS_DEFAULT.h[k]) {
				tintOverrides.h[k] = v;
				wereTintOverrides = true;
			}
		}
		if(wereTintOverrides) {
			overrides.h["COLOR_TINTS"] = tintOverrides;
			wereOverrides = true;
		}
		var primaryOverrides = new haxe_ds_IntMap();
		var werePrimaryOverrides = false;
		var map = this.primaryColors;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g = { value : _g_map.get(key), key : key};
			var k = _g.key;
			var v = _g.value;
			if(v != save_$data_PrefsSettings.PRIMARY_COLORS_DEFAULT.h[k]) {
				primaryOverrides.h[k] = v;
				werePrimaryOverrides = true;
			}
		}
		if(werePrimaryOverrides) {
			overrides.h["PRIMARY_COLORS"] = primaryOverrides;
			wereOverrides = true;
		}
		if(this.boardBackground != save_$data_PrefsSettings.BOARD_BACKGROUND_DEFAULT) {
			overrides.h["BOARD_BACKGROUND"] = this.boardBackground;
			wereOverrides = true;
		}
		if(this.menuRememberCursor != true) {
			overrides.h["MENU_REMEMBER_CURSOR"] = this.menuRememberCursor;
			wereOverrides = true;
		}
		if(this.capAtCrowns != true) {
			overrides.h["CAP_AT_CROWNS"] = this.capAtCrowns;
			wereOverrides = true;
		}
		if(this.showGroupShadow != true) {
			overrides.h["SHOW_GROUP_SHADOW"] = this.showGroupShadow;
			wereOverrides = true;
		}
		if(this.shadowOpacity != 0.5) {
			overrides.h["SHADOW_OPACITY"] = this.shadowOpacity;
			wereOverrides = true;
		}
		if(this.shadowHighlightOthers != true) {
			overrides.h["SHADOW_HIGHLIGHT_OTHERS"] = this.shadowHighlightOthers;
			wereOverrides = true;
		}
		if(this.shadowWillTriggerChain != true) {
			overrides.h["SHADOW_WILL_TRIGGER_CHAIN"] = this.shadowWillTriggerChain;
			wereOverrides = true;
		}
		if(wereOverrides) {
			return overrides;
		} else {
			return null;
		}
	}
	,__class__: save_$data_PrefsSettings
};
var save_$data_Profile = function(overrides) {
	this.name = "GUGU";
	var inputOverrides = new haxe_ds_StringMap();
	var prefsOverrides = new haxe_ds_StringMap();
	var trainingOverrides = new haxe_ds_StringMap();
	var endlessOverrides = new haxe_ds_StringMap();
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				switch(js_Boot.__cast(k , String)) {
				case "ENDLESS_SETTINGS":
					endlessOverrides = v;
					break;
				case "INPUT":
					inputOverrides = v;
					break;
				case "NAME":
					this.name = js_Boot.__cast(v , String);
					break;
				case "PREFS":
					prefsOverrides = v;
					break;
				case "TRAINING_SETTINGS":
					trainingOverrides = v;
					break;
				}
			} catch( _g1 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
	this.input = new save_$data_InputSettings(inputOverrides);
	this.prefs = new save_$data_PrefsSettings(prefsOverrides);
	this.trainingSettings = new save_$data_TrainingSettings(trainingOverrides);
	this.endlessSettings = new save_$data_EndlessSettings(endlessOverrides);
};
$hxClasses["save_data.Profile"] = save_$data_Profile;
save_$data_Profile.__name__ = "save_data.Profile";
save_$data_Profile.addOnChangePrimaryCallback = function(callback) {
	save_$data_Profile.onChangePrimary.push(callback);
	callback();
};
save_$data_Profile.changePrimary = function(p) {
	save_$data_Profile.primary = p;
	var _g = 0;
	var _g1 = save_$data_Profile.onChangePrimary;
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f();
	}
};
save_$data_Profile.prototype = {
	name: null
	,input: null
	,prefs: null
	,trainingSettings: null
	,endlessSettings: null
	,setInputDefaults: function() {
		this.input.setDefaults();
	}
	,setPrefsDefaults: function() {
		this.prefs = new save_$data_PrefsSettings(new haxe_ds_StringMap());
	}
	,setTrainingDefaults: function() {
		this.trainingSettings = new save_$data_TrainingSettings(new haxe_ds_StringMap());
	}
	,setEndlessDefaults: function() {
		this.endlessSettings = new save_$data_EndlessSettings(new haxe_ds_StringMap());
	}
	,setDefaults: function() {
		this.input.setDefaults();
		this.prefs = new save_$data_PrefsSettings(new haxe_ds_StringMap());
		this.trainingSettings = new save_$data_TrainingSettings(new haxe_ds_StringMap());
		this.endlessSettings = new save_$data_EndlessSettings(new haxe_ds_StringMap());
	}
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		overrides.h["NAME"] = this.name;
		var inputOverrides = this.input.exportOverrides();
		if(inputOverrides != null) {
			overrides.h["INPUT"] = inputOverrides;
		}
		var prefsOverrides = this.prefs.exportOverrides();
		if(prefsOverrides != null) {
			overrides.h["PREFS"] = prefsOverrides;
		}
		var trainingOverrides = this.trainingSettings.exportOverrides();
		if(trainingOverrides != null) {
			overrides.h["TRAINING_SETTINGS"] = trainingOverrides;
		}
		var endlessOverrides = this.endlessSettings.exportOverrides();
		if(endlessOverrides != null) {
			overrides.h["ENDLESS_SETTINGS"] = endlessOverrides;
		}
		return overrides;
	}
	,__class__: save_$data_Profile
};
var save_$data_SaveManager = function() { };
$hxClasses["save_data.SaveManager"] = save_$data_SaveManager;
save_$data_SaveManager.__name__ = "save_data.SaveManager";
save_$data_SaveManager.saveProfiles = function() {
	var ser = new haxe_Serializer();
	var _g = 0;
	var _g1 = save_$data_SaveManager.profiles;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		ser.serialize(p.exportOverrides());
	}
	kha_Storage.namedFile(save_$data_SaveManager.PROFILES_FILENAME).writeString(ser.toString());
};
save_$data_SaveManager.loadProfiles = function() {
	var serialized = kha_Storage.namedFile(save_$data_SaveManager.PROFILES_FILENAME).readString();
	if(serialized == null) {
		save_$data_SaveManager.newProfile();
		return;
	}
	var unser = new haxe_Unserializer(serialized);
	try {
		while(true) {
			var overrides = unser.unserialize();
			save_$data_SaveManager.profiles.push(new save_$data_Profile(overrides));
		}
	} catch( _g ) {
	}
	if(save_$data_SaveManager.profiles.length == 0) {
		save_$data_SaveManager.newProfile();
		return;
	}
};
save_$data_SaveManager.newProfile = function() {
	var _g = new haxe_ds_StringMap();
	_g.h["NAME"] = "P" + (save_$data_SaveManager.profiles.length + 1);
	save_$data_SaveManager.profiles.push(new save_$data_Profile(_g));
	save_$data_SaveManager.saveProfiles();
};
save_$data_SaveManager.deleteProfile = function(p) {
	HxOverrides.remove(save_$data_SaveManager.profiles,p);
	save_$data_SaveManager.saveProfiles();
};
save_$data_SaveManager.getProfile = function(index) {
	return save_$data_SaveManager.profiles[index];
};
save_$data_SaveManager.getProfileCount = function() {
	return save_$data_SaveManager.profiles.length;
};
save_$data_SaveManager.saveGraphics = function() {
	var overrides = save_$data_SaveManager.graphics.exportOverrides();
	if(overrides == null) {
		return;
	}
	kha_Storage.namedFile(save_$data_SaveManager.GRAPHICS_FIELNAME).writeString(haxe_Serializer.run(overrides));
};
save_$data_SaveManager.loadGraphics = function() {
	var serialized = kha_Storage.namedFile(save_$data_SaveManager.GRAPHICS_FIELNAME).readString();
	if(serialized == null) {
		save_$data_SaveManager.graphics = new save_$data_GraphicsSettings(new haxe_ds_StringMap());
		return;
	}
	var overrides = new haxe_ds_StringMap();
	try {
		overrides = haxe_Unserializer.run(serialized);
	} catch( _g ) {
	}
	save_$data_SaveManager.graphics = new save_$data_GraphicsSettings(overrides);
};
save_$data_SaveManager.loadEverything = function() {
	save_$data_SaveManager.loadProfiles();
	save_$data_SaveManager.loadGraphics();
};
var save_$data_TrainingSettings = function(overrides) {
	this.showControlHints = true;
	this.clearOnXMode = "RESTART";
	this.autoClear = true;
	this.minAttackTime = 10;
	this.maxAttackTime = 10;
	this.minAttackChain = 3;
	this.maxAttackChain = 3;
	this.minAttackGroupDiff = 0;
	this.maxAttackGroupDiff = 0;
	this.minAttackColors = 1;
	this.maxAttackColors = 1;
	this.groupBlindMode = false;
	this.keepGroupCount = 0;
	try {
		var h = (js_Boot.__cast(overrides , haxe_ds_StringMap)).h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g = { key : key, value : _g_h[key]};
			var k = _g.key;
			var v = _g.value;
			try {
				switch(js_Boot.__cast(k , String)) {
				case "AUTO_CLEAR":
					this.autoClear = js_Boot.__cast(v , Bool);
					break;
				case "CLEAR_ON_X_MODE":
					this.clearOnXMode = js_Boot.__cast(v , String);
					break;
				case "GROUP_BLIND_MODE":
					this.groupBlindMode = js_Boot.__cast(v , Bool);
					break;
				case "KEEP_GROUP_COUNT":
					this.keepGroupCount = js_Boot.__cast(v , Int);
					break;
				case "MAX_ATTACK_CHAIN":
					this.maxAttackChain = js_Boot.__cast(v , Int);
					break;
				case "MAX_ATTACK_COLORS":
					this.maxAttackColors = js_Boot.__cast(v , Int);
					break;
				case "MAX_ATTACK_GROUP_DIFF":
					this.maxAttackGroupDiff = js_Boot.__cast(v , Int);
					break;
				case "MAX_ATTACK_TIME":
					this.maxAttackTime = js_Boot.__cast(v , Int);
					break;
				case "MIN_ATTACK_CHAIN":
					this.minAttackChain = js_Boot.__cast(v , Int);
					break;
				case "MIN_ATTACK_COLORS":
					this.minAttackColors = js_Boot.__cast(v , Int);
					break;
				case "MIN_ATTACK_GROUP_DIFF":
					this.minAttackGroupDiff = js_Boot.__cast(v , Int);
					break;
				case "MIN_ATTACK_TIME":
					this.minAttackTime = js_Boot.__cast(v , Int);
					break;
				case "SHOW_CONTROL_HINTS":
					this.showControlHints = js_Boot.__cast(v , Bool);
					break;
				}
			} catch( _g1 ) {
				continue;
			}
		}
	} catch( _g ) {
	}
};
$hxClasses["save_data.TrainingSettings"] = save_$data_TrainingSettings;
save_$data_TrainingSettings.__name__ = "save_data.TrainingSettings";
save_$data_TrainingSettings.__interfaces__ = [save_$data_IClearOnXModeContainer];
save_$data_TrainingSettings.prototype = {
	showControlHints: null
	,clearOnXMode: null
	,autoClear: null
	,minAttackTime: null
	,maxAttackTime: null
	,minAttackChain: null
	,maxAttackChain: null
	,minAttackGroupDiff: null
	,maxAttackGroupDiff: null
	,minAttackColors: null
	,maxAttackColors: null
	,groupBlindMode: null
	,keepGroupCount: null
	,exportOverrides: function() {
		var overrides = new haxe_ds_StringMap();
		var wereOverrides = false;
		if(this.showControlHints != true) {
			overrides.h["SHOW_CONTROL_HINTS"] = this.showControlHints;
			wereOverrides = true;
		}
		if(this.clearOnXMode != "RESTART") {
			overrides.h["CLEAR_ON_X_MODE"] = this.clearOnXMode;
			wereOverrides = true;
		}
		if(this.autoClear != true) {
			overrides.h["AUTO_CLEAR"] = this.autoClear;
			wereOverrides = true;
		}
		if(this.minAttackTime != 10) {
			overrides.h["MIN_ATTACK_TIME"] = this.minAttackTime;
			wereOverrides = true;
		}
		if(this.maxAttackTime != 10) {
			overrides.h["MAX_ATTACK_TIME"] = this.maxAttackTime;
			wereOverrides = true;
		}
		if(this.minAttackChain != 3) {
			overrides.h["MIN_ATTACK_CHAIN"] = this.minAttackChain;
			wereOverrides = true;
		}
		if(this.maxAttackChain != 3) {
			overrides.h["MAX_ATTACK_CHAIN"] = this.maxAttackChain;
			wereOverrides = true;
		}
		if(this.minAttackGroupDiff != 0) {
			overrides.h["MIN_ATTACK_GROUP_DIFF"] = this.minAttackGroupDiff;
			wereOverrides = true;
		}
		if(this.maxAttackGroupDiff != 0) {
			overrides.h["MAX_ATTACK_GROUP_DIFF"] = this.maxAttackGroupDiff;
			wereOverrides = true;
		}
		if(this.minAttackColors != 1) {
			overrides.h["MIN_ATTACK_COLORS"] = this.minAttackColors;
			wereOverrides = true;
		}
		if(this.maxAttackColors != 1) {
			overrides.h["MAX_ATTACK_COLORS"] = this.maxAttackColors;
			wereOverrides = true;
		}
		if(this.groupBlindMode != false) {
			overrides.h["GROUP_BLIND_MODE"] = this.groupBlindMode;
			wereOverrides = true;
		}
		if(this.keepGroupCount != 0) {
			overrides.h["KEEP_GROUP_COUNT"] = this.keepGroupCount;
			wereOverrides = true;
		}
		if(wereOverrides) {
			return overrides;
		} else {
			return null;
		}
	}
	,__class__: save_$data_TrainingSettings
};
var side_$setup_InputDeviceIcon = function(name,device) {
	this.font = kha_Assets.fonts.Pixellari;
	this.name = name;
	this.device = device;
	this.slot = 2;
};
$hxClasses["side_setup.InputDeviceIcon"] = side_$setup_InputDeviceIcon;
side_$setup_InputDeviceIcon.__name__ = "side_setup.InputDeviceIcon";
side_$setup_InputDeviceIcon.prototype = {
	font: null
	,fontSize: null
	,nameTextHalfWidth: null
	,name: null
	,device: null
	,height: null
	,slot: null
	,getLeftAction: function() {
		return this.device.getAction("MENU_LEFT");
	}
	,getRightAction: function() {
		return this.device.getAction("MENU_RIGHT");
	}
	,getControlsAction: function() {
		return this.device.getAction("MENU_UP");
	}
	,getReadyAction: function() {
		return this.device.getAction("CONFIRM");
	}
	,onResize: function() {
		this.fontSize = 56 * ScaleManager.screen.smallerScale | 0;
		this.nameTextHalfWidth = this.font.width(this.fontSize,this.name) / 2;
		this.height = this.font.height(this.fontSize);
	}
	,render: function(g,y) {
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		g.drawString(this.name,ScaleManager.screen.width / 4 * this.slot - this.nameTextHalfWidth,y);
	}
	,__class__: side_$setup_InputDeviceIcon
};
var side_$setup_SideSetupScreen = function(onReady) {
	this.font = kha_Assets.fonts.DigitalDisco;
	this.onReady = onReady;
	ScaleManager.addOnResizeCallback($bind(this,this.onResize));
};
$hxClasses["side_setup.SideSetupScreen"] = side_$setup_SideSetupScreen;
side_$setup_SideSetupScreen.__name__ = "side_setup.SideSetupScreen";
side_$setup_SideSetupScreen.__interfaces__ = [IScreen];
side_$setup_SideSetupScreen.prototype = {
	font: null
	,onReady: null
	,fontSize: null
	,leftBoardTextCenter: null
	,rightBoardTextCenter: null
	,leftSlot: null
	,rightSlot: null
	,devices: null
	,onResize: function() {
		this.fontSize = 80 * ScaleManager.screen.smallerScale | 0;
		this.leftBoardTextCenter = this.font.width(this.fontSize,"Left Board") / 2;
		this.rightBoardTextCenter = this.font.width(this.fontSize,"Right Board") / 2;
		var _g = 0;
		var _g1 = this.devices;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			d.onResize();
		}
	}
	,onLeft: function(d) {
		if(d.slot == 2 && this.leftSlot == null) {
			d.slot = 1;
			this.leftSlot = d;
			return;
		}
		if(d.slot == 3) {
			d.slot = 2;
			this.rightSlot = null;
		}
	}
	,onRight: function(d) {
		if(d.slot == 2 && this.rightSlot == null) {
			d.slot = 3;
			this.rightSlot = d;
			return;
		}
		if(d.slot == 1) {
			d.slot = 2;
			this.leftSlot = null;
		}
	}
	,dispose: function() {
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.devices;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.device.getAction("MENU_LEFT")) {
				if(d.slot == 2 && this.leftSlot == null) {
					d.slot = 1;
					this.leftSlot = d;
				} else if(d.slot == 3) {
					d.slot = 2;
					this.rightSlot = null;
				}
			} else if(d.device.getAction("MENU_RIGHT")) {
				if(d.slot == 2 && this.rightSlot == null) {
					d.slot = 3;
					this.rightSlot = d;
				} else if(d.slot == 1) {
					d.slot = 2;
					this.leftSlot = null;
				}
			}
		}
	}
	,render: function(g,g4,alpha) {
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		var quarterW = ScaleManager.screen.width / 4;
		var eightH = ScaleManager.screen.height / 8;
		g.drawString("Left Board",quarterW - this.leftBoardTextCenter,eightH);
		g.drawString("Right Board",quarterW * 3 - this.rightBoardTextCenter,eightH);
		var _g = 0;
		var _g1 = this.devices.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.devices[i];
			if(d.slot == 2) {
				d.render(g,eightH + (i + 2) * d.height);
			}
		}
		if(this.leftSlot != null) {
			this.leftSlot.render(g,eightH + this.leftSlot.height * 2);
		}
		if(this.rightSlot != null) {
			this.rightSlot.render(g,eightH + this.rightSlot.height * 2);
		}
	}
	,__class__: side_$setup_SideSetupScreen
};
var side_$setup_VersusSideSetupScreen = function(onReady) {
	this.isLeftReady = false;
	this.isRightReady = false;
	var tmp = new side_$setup_InputDeviceIcon("Keyboard (Arrows)",new input_KeyboardInputDevice(new save_$data_InputSettings(new haxe_ds_StringMap())));
	var _g = new haxe_ds_StringMap();
	var _g1 = new haxe_ds_StringMap();
	var value = new input_InputMapping(65,14,new input_AxisMapping(0,-1)).asString();
	_g1.h["MENU_LEFT"] = value;
	var value = new input_InputMapping(68,15,new input_AxisMapping(0,1)).asString();
	_g1.h["MENU_RIGHT"] = value;
	var value = new input_InputMapping(83,13,new input_AxisMapping(1,1)).asString();
	_g1.h["MENU_DOWN"] = value;
	var value = new input_InputMapping(87,12,new input_AxisMapping(1,-1)).asString();
	_g1.h["MENU_UP"] = value;
	var value = new input_InputMapping(9,1,new input_AxisMapping(null,null)).asString();
	_g1.h["CONFIRM"] = value;
	_g.h["MAPPINGS"] = _g1;
	this.devices = [tmp,new side_$setup_InputDeviceIcon("Keyboard (WASD)",new input_KeyboardInputDevice(new save_$data_InputSettings(_g)))];
	side_$setup_SideSetupScreen.call(this,onReady);
};
$hxClasses["side_setup.VersusSideSetupScreen"] = side_$setup_VersusSideSetupScreen;
side_$setup_VersusSideSetupScreen.__name__ = "side_setup.VersusSideSetupScreen";
side_$setup_VersusSideSetupScreen.__super__ = side_$setup_SideSetupScreen;
side_$setup_VersusSideSetupScreen.prototype = $extend(side_$setup_SideSetupScreen.prototype,{
	isLeftReady: null
	,isRightReady: null
	,update: function() {
		side_$setup_SideSetupScreen.prototype.update.call(this);
		if(this.leftSlot != null) {
			if(this.leftSlot.device.getAction("CONFIRM")) {
				this.isLeftReady = !this.isLeftReady;
			}
		}
		if(this.rightSlot != null) {
			if(this.rightSlot.device.getAction("CONFIRM")) {
				this.isRightReady = !this.isRightReady;
			}
		}
		if(this.isLeftReady && this.isRightReady) {
			this.onReady(this.leftSlot.device,this.rightSlot.device);
		}
	}
	,__class__: side_$setup_VersusSideSetupScreen
});
var ui_AnyGamepadDetectWrapperOptions = function(keyboardDevice,pageBuilder) {
	this.keyboardDevice = keyboardDevice;
	this.pageBuilder = pageBuilder;
};
$hxClasses["ui.AnyGamepadDetectWrapperOptions"] = ui_AnyGamepadDetectWrapperOptions;
ui_AnyGamepadDetectWrapperOptions.__name__ = "ui.AnyGamepadDetectWrapperOptions";
ui_AnyGamepadDetectWrapperOptions.prototype = {
	keyboardDevice: null
	,pageBuilder: null
	,__class__: ui_AnyGamepadDetectWrapperOptions
};
var ui_AnyGamepadDetectWrapper = function(opts) {
	this.keyboardDevice = opts.keyboardDevice;
	this.pageBuilder = opts.pageBuilder;
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(64,"Select Gamepad",[new ui_ControlHint(["BACK"],"Back")],null));
};
$hxClasses["ui.AnyGamepadDetectWrapper"] = ui_AnyGamepadDetectWrapper;
ui_AnyGamepadDetectWrapper.__name__ = "ui.AnyGamepadDetectWrapper";
ui_AnyGamepadDetectWrapper.__super__ = ui_MenuPageBase;
ui_AnyGamepadDetectWrapper.prototype = $extend(ui_MenuPageBase.prototype,{
	keyboardDevice: null
	,pageBuilder: null
	,popPage: function() {
		var _this = this.menu;
		var _this1 = _this.inputDevices;
		var k = _this1.head;
		if(k != null) {
			_this1.head = k.next;
		}
		_this.setInputDevice();
		this.menu.popPage();
	}
	,onShow: function(menu) {
		ui_MenuPageBase.prototype.onShow.call(this,menu);
		var _this = menu.inputDevices;
		_this.head = new haxe_ds_GenericCell(this.keyboardDevice,_this.head);
		menu.setInputDevice();
		input_AnyInputDevice.instance.resetLastDeviceID();
	}
	,update: function() {
		var anyDevice = input_AnyInputDevice.instance;
		var lastID = input_AnyInputDevice.lastDeviceID;
		if(lastID != -1) {
			var page = this.pageBuilder(js_Boot.__cast(anyDevice.devices.h[lastID] , input_GamepadInputDevice));
			var _this = this.menu;
			var _this1 = _this.inputDevices;
			var k = _this1.head;
			if(k != null) {
				_this1.head = k.next;
			}
			_this.setInputDevice();
			this.menu.popPage();
			this.menu.pushPage(page);
			return;
		}
		if(anyDevice.getAction("BACK")) {
			var _this = this.menu;
			var _this1 = _this.inputDevices;
			var k = _this1.head;
			if(k != null) {
				_this1.head = k.next;
			}
			_this.setInputDevice();
			this.menu.popPage();
		}
	}
	,render: function(g,x,y) {
		ui_MenuPageBase.prototype.render.call(this,g,x,y);
		var _g = 0;
		var _g1 = ui_AnyGamepadDetectWrapper.TEXT.length;
		while(_g < _g1) {
			var i = _g++;
			g.drawString(ui_AnyGamepadDetectWrapper.TEXT[i],x,y + i * this.fontHeight);
		}
	}
	,__class__: ui_AnyGamepadDetectWrapper
});
var ui_AreYouSurePage = function(content,callback) {
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(64,"Are You Sure?",[new ui_ControlHint(["BACK"],"Back"),new ui_ControlHint(["CONFIRM"],"Confirm")],null));
	this.content = content;
	this.callback = callback;
};
$hxClasses["ui.AreYouSurePage"] = ui_AreYouSurePage;
ui_AreYouSurePage.__name__ = "ui.AreYouSurePage";
ui_AreYouSurePage.__super__ = ui_MenuPageBase;
ui_AreYouSurePage.prototype = $extend(ui_MenuPageBase.prototype,{
	content: null
	,callback: null
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("BACK")) {
			this.menu.popPage();
			return;
		}
		if(inputDevice.getAction("CONFIRM")) {
			this.callback();
			this.menu.popPage();
		}
	}
	,render: function(g,x,y) {
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		g.drawString(this.content,x,y);
	}
	,__class__: ui_AreYouSurePage
});
var ui_ButtonWidgetOptions = function(callback,title,description) {
	this.callback = callback;
	this.title = title;
	this.description = description;
};
$hxClasses["ui.ButtonWidgetOptions"] = ui_ButtonWidgetOptions;
ui_ButtonWidgetOptions.__name__ = "ui.ButtonWidgetOptions";
ui_ButtonWidgetOptions.prototype = {
	callback: null
	,title: null
	,description: null
	,__class__: ui_ButtonWidgetOptions
};
var ui_AreYouSureSubPageWidgetOptions = function(content,callback,title,description) {
	ui_ButtonWidgetOptions.call(this,callback,title,description);
	this.content = content;
};
$hxClasses["ui.AreYouSureSubPageWidgetOptions"] = ui_AreYouSureSubPageWidgetOptions;
ui_AreYouSureSubPageWidgetOptions.__name__ = "ui.AreYouSureSubPageWidgetOptions";
ui_AreYouSureSubPageWidgetOptions.__super__ = ui_ButtonWidgetOptions;
ui_AreYouSureSubPageWidgetOptions.prototype = $extend(ui_ButtonWidgetOptions.prototype,{
	content: null
	,__class__: ui_AreYouSureSubPageWidgetOptions
});
var ui_AreYouSureSubPageWidget = function(opts) {
	var _g = opts.description;
	ui_SubPageWidget.call(this,new ui_SubPageWidgetOptions(opts.title,new ui_AreYouSurePage(opts.content,opts.callback),_g));
};
$hxClasses["ui.AreYouSureSubPageWidget"] = ui_AreYouSureSubPageWidget;
ui_AreYouSureSubPageWidget.__name__ = "ui.AreYouSureSubPageWidget";
ui_AreYouSureSubPageWidget.__super__ = ui_SubPageWidget;
ui_AreYouSureSubPageWidget.prototype = $extend(ui_SubPageWidget.prototype,{
	__class__: ui_AreYouSureSubPageWidget
});
var ui_ErrorPageOptons = function(controlDescription,message,callback) {
	this.controlDescription = controlDescription;
	this.message = message;
	this.callback = callback;
};
$hxClasses["ui.ErrorPageOptons"] = ui_ErrorPageOptons;
ui_ErrorPageOptons.__name__ = "ui.ErrorPageOptons";
ui_ErrorPageOptons.prototype = {
	controlDescription: null
	,message: null
	,callback: null
	,__class__: ui_ErrorPageOptons
};
var ui_ErrorPage = function(opts) {
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(64,"Error",[new ui_ControlHint(["BACK","CONFIRM"],opts.controlDescription)],null));
	this.message = opts.message;
	this.callback = opts.callback;
};
$hxClasses["ui.ErrorPage"] = ui_ErrorPage;
ui_ErrorPage.__name__ = "ui.ErrorPage";
ui_ErrorPage.mainMenuPage = function(message) {
	return new ui_ErrorPage(new ui_ErrorPageOptons("Return To Main Menu",message,function() {
		ScreenManager.switchScreen(new main_$menu_MainMenuScreen());
	}));
};
ui_ErrorPage.__super__ = ui_MenuPageBase;
ui_ErrorPage.prototype = $extend(ui_MenuPageBase.prototype,{
	message: null
	,callback: null
	,update: function() {
		if(this.menu.inputDevice.getAction("BACK") || this.menu.inputDevice.getAction("CONFIRM")) {
			this.callback();
		}
	}
	,render: function(g,x,y) {
		ui_MenuPageBase.prototype.render.call(this,g,x,y);
		g.drawString(this.message,x,y);
	}
	,__class__: ui_ErrorPage
});
var ui_ListMenuPageOptions = function(widgetBuilder,header) {
	this.widgetBuilder = widgetBuilder;
	this.header = header;
};
$hxClasses["ui.ListMenuPageOptions"] = ui_ListMenuPageOptions;
ui_ListMenuPageOptions.__name__ = "ui.ListMenuPageOptions";
ui_ListMenuPageOptions.prototype = {
	widgetBuilder: null
	,header: null
	,__class__: ui_ListMenuPageOptions
};
var ui_InputLimitedListPageOptions = function(inputDevice,widgetBuilder,header) {
	ui_ListMenuPageOptions.call(this,widgetBuilder,header);
	this.inputDevice = inputDevice;
};
$hxClasses["ui.InputLimitedListPageOptions"] = ui_InputLimitedListPageOptions;
ui_InputLimitedListPageOptions.__name__ = "ui.InputLimitedListPageOptions";
ui_InputLimitedListPageOptions.__super__ = ui_ListMenuPageOptions;
ui_InputLimitedListPageOptions.prototype = $extend(ui_ListMenuPageOptions.prototype,{
	inputDevice: null
	,__class__: ui_InputLimitedListPageOptions
});
var ui_KeyboardConfirmWrapperOptions = function(keyboardDevice,pageBuilder) {
	this.keyboardDevice = keyboardDevice;
	this.pageBuilder = pageBuilder;
};
$hxClasses["ui.KeyboardConfirmWrapperOptions"] = ui_KeyboardConfirmWrapperOptions;
ui_KeyboardConfirmWrapperOptions.__name__ = "ui.KeyboardConfirmWrapperOptions";
ui_KeyboardConfirmWrapperOptions.prototype = {
	keyboardDevice: null
	,pageBuilder: null
	,__class__: ui_KeyboardConfirmWrapperOptions
};
var ui_KeyboardConfirmWrapper = function(opts) {
	ui_MenuPageBase.call(this,new ui_MenuPageBaseOptions(64,"Confirm Keyboard",[new ui_ControlHint(["BACK"],"Back")],null));
	this.keyboardDevice = opts.keyboardDevice;
	this.pageBuilder = opts.pageBuilder;
};
$hxClasses["ui.KeyboardConfirmWrapper"] = ui_KeyboardConfirmWrapper;
ui_KeyboardConfirmWrapper.__name__ = "ui.KeyboardConfirmWrapper";
ui_KeyboardConfirmWrapper.__super__ = ui_MenuPageBase;
ui_KeyboardConfirmWrapper.prototype = $extend(ui_MenuPageBase.prototype,{
	keyboardDevice: null
	,pageBuilder: null
	,onShow: function(menu) {
		ui_MenuPageBase.prototype.onShow.call(this,menu);
		this.keyboardDevice.resetIsAnyKeyDown();
	}
	,update: function() {
		if(input_AnyInputDevice.instance.getAction("BACK")) {
			this.menu.popPage();
			return;
		}
		if(this.keyboardDevice.isAnyKeyDown) {
			this.menu.popPage();
			this.menu.pushPage(this.pageBuilder());
		}
	}
	,render: function(g,x,y) {
		ui_MenuPageBase.prototype.render.call(this,g,x,y);
		g.drawString(ui_KeyboardConfirmWrapper.TEXT,x,y);
	}
	,__class__: ui_KeyboardConfirmWrapper
});
var ui_MenuOptions = function(initialPage,positionFactor,widthFactor,backgroundOpacity,prefsSettings) {
	this.initialPage = initialPage;
	this.positionFactor = positionFactor;
	this.widthFactor = widthFactor;
	this.backgroundOpacity = backgroundOpacity;
	this.prefsSettings = prefsSettings;
};
$hxClasses["ui.MenuOptions"] = ui_MenuOptions;
ui_MenuOptions.__name__ = "ui.MenuOptions";
ui_MenuOptions.prototype = {
	initialPage: null
	,positionFactor: null
	,widthFactor: null
	,backgroundOpacity: null
	,prefsSettings: null
	,__class__: ui_MenuOptions
};
var ui_MenuPageBaseOptions = function(designFontSize,header,controlHints,font) {
	this.font = "Pixellari";
	this.designFontSize = designFontSize;
	this.header = header;
	this.controlHints = controlHints;
	if(font != null) {
		this.font = font;
	}
};
$hxClasses["ui.MenuPageBaseOptions"] = ui_MenuPageBaseOptions;
ui_MenuPageBaseOptions.__name__ = "ui.MenuPageBaseOptions";
ui_MenuPageBaseOptions.prototype = {
	designFontSize: null
	,header: null
	,controlHints: null
	,font: null
	,__class__: ui_MenuPageBaseOptions
};
var ui_NumberRangeWidgetOptions = function(title,minValue,maxValue,delta,startValue,onChange,description) {
	this.title = title;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.delta = delta;
	this.startValue = startValue;
	this.onChange = onChange;
	this.description = description;
};
$hxClasses["ui.NumberRangeWidgetOptions"] = ui_NumberRangeWidgetOptions;
ui_NumberRangeWidgetOptions.__name__ = "ui.NumberRangeWidgetOptions";
ui_NumberRangeWidgetOptions.prototype = {
	title: null
	,minValue: null
	,maxValue: null
	,delta: null
	,startValue: null
	,onChange: null
	,description: null
	,__class__: ui_NumberRangeWidgetOptions
};
var ui_NumberRangeWidget = function(opts) {
	this.controlHints = [new ui_ControlHint(["MENU_LEFT","MENU_RIGHT"],"Change")];
	this.title = opts.title;
	this.minValue = opts.minValue;
	this.maxValue = opts.maxValue;
	this.delta = opts.delta;
	this.startValue = opts.startValue;
	this.onChange = opts.onChange;
	this.description = opts.description;
	this.font = kha_Assets.fonts.Pixellari;
	var multiplier = Math.pow(10,2);
	this.value = Math.round(this.startValue * multiplier) / multiplier;
};
$hxClasses["ui.NumberRangeWidget"] = ui_NumberRangeWidget;
ui_NumberRangeWidget.__name__ = "ui.NumberRangeWidget";
ui_NumberRangeWidget.__interfaces__ = [ui_IListWidget];
ui_NumberRangeWidget.prototype = {
	title: null
	,minValue: null
	,maxValue: null
	,delta: null
	,startValue: null
	,onChange: null
	,description: null
	,font: null
	,fontSize: null
	,menu: null
	,value: null
	,controlHints: null
	,height: null
	,setValue: function(v) {
		var multiplier = Math.pow(10,2);
		this.value = Math.round(v * multiplier) / multiplier;
		this.onChange(v);
	}
	,onShow: function(menu) {
		this.menu = menu;
	}
	,onResize: function() {
		this.fontSize = 60 * this.menu.scaleManager.smallerScale | 0;
		this.height = this.font.height(this.fontSize);
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("MENU_LEFT")) {
			var nextValue = this.value - this.delta;
			if(nextValue < this.minValue) {
				var v = this.maxValue;
				var multiplier = Math.pow(10,2);
				this.value = Math.round(v * multiplier) / multiplier;
				this.onChange(v);
			} else {
				var multiplier = Math.pow(10,2);
				this.value = Math.round(nextValue * multiplier) / multiplier;
				this.onChange(nextValue);
			}
		} else if(inputDevice.getAction("MENU_RIGHT")) {
			var nextValue = this.value + this.delta;
			if(nextValue > this.maxValue) {
				var v = this.minValue;
				var multiplier = Math.pow(10,2);
				this.value = Math.round(v * multiplier) / multiplier;
				this.onChange(v);
			} else {
				var multiplier = Math.pow(10,2);
				this.value = Math.round(nextValue * multiplier) / multiplier;
				this.onChange(nextValue);
			}
		}
	}
	,render: function(g,x,y,isSelected) {
		g.set_color(isSelected ? -23296 : -1);
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		g.drawString("" + this.title + ": < " + this.value + " >",x,y);
		g.set_color(-1);
	}
	,__class__: ui_NumberRangeWidget
};
var ui_OptionListWidgetOptions = function(title,options,startIndex,onChange,description) {
	this.title = title;
	this.options = options;
	this.startIndex = startIndex;
	this.onChange = onChange;
	this.description = description;
};
$hxClasses["ui.OptionListWidgetOptions"] = ui_OptionListWidgetOptions;
ui_OptionListWidgetOptions.__name__ = "ui.OptionListWidgetOptions";
ui_OptionListWidgetOptions.prototype = {
	title: null
	,options: null
	,startIndex: null
	,onChange: null
	,description: null
	,__class__: ui_OptionListWidgetOptions
};
var ui_OptionListWidget = function(opts) {
	this.controlHints = [new ui_ControlHint(["MENU_LEFT","MENU_RIGHT"],"Change")];
	this.title = opts.title;
	this.options = opts.options;
	this.startIndex = opts.startIndex;
	this.onChange = opts.onChange;
	this.description = opts.description;
	this.font = kha_Assets.fonts.Pixellari;
	this.index = this.startIndex;
	this.value = this.options[this.index];
};
$hxClasses["ui.OptionListWidget"] = ui_OptionListWidget;
ui_OptionListWidget.__name__ = "ui.OptionListWidget";
ui_OptionListWidget.__interfaces__ = [ui_IListWidget];
ui_OptionListWidget.prototype = {
	title: null
	,options: null
	,startIndex: null
	,onChange: null
	,description: null
	,font: null
	,fontSize: null
	,menu: null
	,index: null
	,value: null
	,controlHints: null
	,height: null
	,changeValue: function(delta) {
		var d = this.options.length;
		var r = (this.index + delta) % d;
		this.index = (r < 0 ? r + d : r) | 0;
		this.value = this.options[this.index];
		this.onChange(this.value);
	}
	,onShow: function(menu) {
		this.menu = menu;
	}
	,onResize: function() {
		this.fontSize = 60 * this.menu.scaleManager.smallerScale | 0;
		this.height = this.font.height(this.fontSize);
	}
	,update: function() {
		var inputDevice = this.menu.inputDevice;
		if(inputDevice.getAction("MENU_LEFT")) {
			this.changeValue(-1);
		} else if(inputDevice.getAction("MENU_RIGHT")) {
			this.changeValue(1);
		}
	}
	,render: function(g,x,y,isSelected) {
		g.set_color(isSelected ? -23296 : -1);
		g.set_font(this.font);
		g.set_fontSize(this.fontSize);
		g.drawString("" + this.title + ": < " + this.value + " >",x,y);
		g.set_color(-1);
	}
	,__class__: ui_OptionListWidget
};
var ui_SubPageWidgetOptions = function(title,subPage,description) {
	this.title = title;
	this.subPage = subPage;
	this.description = description;
};
$hxClasses["ui.SubPageWidgetOptions"] = ui_SubPageWidgetOptions;
ui_SubPageWidgetOptions.__name__ = "ui.SubPageWidgetOptions";
ui_SubPageWidgetOptions.prototype = {
	title: null
	,subPage: null
	,description: null
	,__class__: ui_SubPageWidgetOptions
};
var ui_YesNoWidgetOptions = function(title,description,defaultValue,onChange) {
	this.title = title;
	this.description = description;
	this.defaultValue = defaultValue;
	this.onChange = onChange;
};
$hxClasses["ui.YesNoWidgetOptions"] = ui_YesNoWidgetOptions;
ui_YesNoWidgetOptions.__name__ = "ui.YesNoWidgetOptions";
ui_YesNoWidgetOptions.prototype = {
	title: null
	,description: null
	,defaultValue: null
	,onChange: null
	,__class__: ui_YesNoWidgetOptions
};
var ui_YesNoWidget = function(opts) {
	ui_OptionListWidget.call(this,new ui_OptionListWidgetOptions(opts.title,["YES","NO"],opts.defaultValue ? 0 : 1,function(value) {
		opts.onChange(value == "YES");
	},opts.description));
};
$hxClasses["ui.YesNoWidget"] = ui_YesNoWidget;
ui_YesNoWidget.__name__ = "ui.YesNoWidget";
ui_YesNoWidget.__super__ = ui_OptionListWidget;
ui_YesNoWidget.prototype = $extend(ui_OptionListWidget.prototype,{
	__class__: ui_YesNoWidget
});
var utils_Utils = function() { };
$hxClasses["utils.Utils"] = utils_Utils;
utils_Utils.__name__ = "utils.Utils";
utils_Utils.clamp = function(min,v,max) {
	return Math.min(max,Math.max(v,min));
};
utils_Utils.intClamp = function(min,v,max) {
	return Math.min(max,Math.max(v,min)) | 0;
};
utils_Utils.negativeMod = function(n,d) {
	var r = n % d;
	if(r < 0) {
		return r + d;
	} else {
		return r;
	}
};
utils_Utils.lerp = function(min,max,v) {
	return min + (max - min) * v;
};
utils_Utils.limitDecimals = function(v,decimals) {
	var multiplier = Math.pow(10,decimals);
	return Math.round(v * multiplier) / multiplier;
};
utils_Utils.pointLerp = function(minPoint,maxPoint,v) {
	var min = minPoint.x;
	var x = min + (maxPoint.x - min) * v;
	var min = minPoint.y;
	var y = min + (maxPoint.y - min) * v;
	return new utils_Point(x,y);
};
utils_Utils.rgbLerp = function(minColor,maxColor,v) {
	var min = ((minColor & 16711680) >>> 16) * 0.00392156862745098;
	var r = min + (((maxColor & 16711680) >>> 16) * 0.00392156862745098 - min) * v;
	var min = ((minColor & 65280) >>> 8) * 0.00392156862745098;
	var g = min + (((maxColor & 65280) >>> 8) * 0.00392156862745098 - min) * v;
	var min = (minColor & 255) * 0.00392156862745098;
	var b = min + ((maxColor & 255) * 0.00392156862745098 - min) * v;
	return kha_Color.fromFloats(r,g,b);
};
utils_Utils.easeOutBack = function(x) {
	var c1 = 1.70150;
	var c3 = c1 + 1;
	return 1 + c3 * Math.pow(x - 1,3) + c1 * Math.pow(x - 1,2);
};
utils_Utils.shadowDrawString = function(g,size,bgColor,fgColor,text,x,y) {
	g.set_color(bgColor);
	var _g = 0;
	var _g1 = utils_Utils.AROUND_DIAG;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		g.drawString(text,x + p.x * size,y + p.y * size);
	}
	g.set_color(fgColor);
	g.drawString(text,x,y);
};
utils_Utils.shadowDrawCharacter = function(g,size,bgColor,fgColor,charArray,x,y) {
	g.set_color(bgColor);
	var _g = 0;
	var _g1 = utils_Utils.AROUND_DIAG;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		g.drawCharacters(charArray,0,1,x + p.x * size,y + p.y * size);
	}
	g.set_color(fgColor);
	g.drawCharacters(charArray,0,1,x,y);
};
utils_Utils.randomString = function(length) {
	var rng = new game_copying_CopyableRNG(kha_System.get_time() * 1000000 | 0);
	var _g = [];
	_g.push(48);
	_g.push(49);
	_g.push(50);
	_g.push(51);
	_g.push(52);
	_g.push(53);
	_g.push(54);
	_g.push(55);
	_g.push(56);
	_g.push(57);
	var numbers = _g;
	var _g = [];
	_g.push(65);
	_g.push(66);
	_g.push(67);
	_g.push(68);
	_g.push(69);
	_g.push(70);
	_g.push(71);
	_g.push(72);
	_g.push(73);
	_g.push(74);
	_g.push(75);
	_g.push(76);
	_g.push(77);
	_g.push(78);
	_g.push(79);
	_g.push(80);
	_g.push(81);
	_g.push(82);
	_g.push(83);
	_g.push(84);
	_g.push(85);
	_g.push(86);
	_g.push(87);
	_g.push(88);
	_g.push(89);
	_g.push(90);
	var uppercase = _g;
	var _g = [];
	_g.push(97);
	_g.push(98);
	_g.push(99);
	_g.push(100);
	_g.push(101);
	_g.push(102);
	_g.push(103);
	_g.push(104);
	_g.push(105);
	_g.push(106);
	_g.push(107);
	_g.push(108);
	_g.push(109);
	_g.push(110);
	_g.push(111);
	_g.push(112);
	_g.push(113);
	_g.push(114);
	_g.push(115);
	_g.push(116);
	_g.push(117);
	_g.push(118);
	_g.push(119);
	_g.push(120);
	_g.push(121);
	_g.push(122);
	var lowercase = _g;
	var ascii = numbers.concat(uppercase).concat(lowercase);
	var result = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var _ = _g++;
		var i = rng.data.GetUpTo(ascii.length - 1);
		result += String.fromCodePoint(ascii[i]);
	}
	return result;
};
var utils__$ValueBox_ValueBoxImpl = function(v) {
	this.v = v;
};
$hxClasses["utils._ValueBox.ValueBoxImpl"] = utils__$ValueBox_ValueBoxImpl;
utils__$ValueBox_ValueBoxImpl.__name__ = "utils._ValueBox.ValueBoxImpl";
utils__$ValueBox_ValueBoxImpl.prototype = {
	v: null
	,__class__: utils__$ValueBox_ValueBoxImpl
};
var utils_ValueBox = {};
utils_ValueBox._new = function(v) {
	var this1 = new utils__$ValueBox_ValueBoxImpl(v);
	return this1;
};
utils_ValueBox.fromValue = function(v) {
	var this1 = new utils__$ValueBox_ValueBoxImpl(v);
	return this1;
};
utils_ValueBox.toValue = function(this1) {
	return this1.v;
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Main.FIXED_UPDATE_DELTA = 0.0166666666666666664;
Main.accumulator = 0.0;
NullScreen.instance = new NullScreen();
ScaleManager.SCREEN_DESIGN_WIDTH = 1920;
ScaleManager.SCREEN_DESIGN_HEIGHT = 1080;
ScaleManager.screen = new ScaleManager(1920,1080);
game_AllClearManager.__meta__ = { fields : { rng : { inject : null}, geometries : { inject : null}, particleManager : { inject : null}, borderColorMediator : { inject : null}, targetY : { copy : null}, boardCenterX : { copy : null}, line1 : { copy : null}, line2 : { copy : null}, line1HalfWidth : { copy : null}, line2HalfWidth : { copy : null}, shortStrHalfWidth : { copy : null}, t : { copy : null}, y : { copy : null}, scaleX : { copy : null}, showAnimation : { copy : null}, acCounter : { copy : null}}};
game_AllClearManager.SHORT_STR = "AC!";
kha_Color.Black = -16777216;
kha_Color.White = -1;
kha_Color.Red = -65536;
kha_Color.Blue = -16776961;
kha_Color.Green = -16711936;
kha_Color.Magenta = -65281;
kha_Color.Yellow = -256;
kha_Color.Cyan = -16711681;
kha_Color.Purple = -8388480;
kha_Color.Pink = -16181;
kha_Color.Orange = -23296;
kha_Color.Transparent = 0;
kha_Color.invMaxChannelValue = 0.00392156862745098;
game_ChainCounter.__meta__ = { fields : { x : { copy : null}, y : { copy : null}, number : { copy : null}, numberColor : { copy : null}, numberWidth : { copy : null}, totalHalfWidth : { copy : null}, t : { copy : null}, state : { copy : null}}};
game_ChainCounter.NUMBER_FONTSIZE = 96;
game_ChainCounter.TEXT = "-CHAIN!";
game_ChainCounter.TEXT_FONTSIZE = 48;
game_ChainCounter.POWERED_COLOR = kha_Color._new(-59580);
game_Dropsets.CLASSICAL = [game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR,game_gelogroups_GeloGroupType.PAIR];
game_Queue.__meta__ = { fields : { groups : { copy : null}, currentIndex : { copy : null}}};
game_ScoreManager.__meta__ = { fields : { softDropBonus : { inject : null}, orientation : { inject : null}, actionTextColor : { copy : null}, formulaText : { copy : null}, formulaTextWidth : { copy : null}, lastFormulaT : { copy : null}, formulaT : { copy : null}, showChainFormula : { copy : null}, actionText : { copy : null}, actionTextT : { copy : null}, actionTextCharacters : { copy : null}, showActionText : { copy : null}, score : { copy : null}, dropBonus : { copy : null}}};
game_actionbuffers_LocalActionBuffer.__meta__ = { fields : { frameCounter : { inject : null}, inputDevice : { inject : null}, frameDelay : { inject : null}}};
game_actionbuffers_ReceiveActionBuffer.__meta__ = { fields : { frameCounter : { inject : null}, rollbackMediator : { inject : null}}};
game_actionbuffers_SenderActionBuffer.__meta__ = { fields : { session : { inject : null}}};
game_actions_Action.PAUSE = "PAUSE";
game_actions_Action.MENU_LEFT = "MENU_LEFT";
game_actions_Action.MENU_RIGHT = "MENU_RIGHT";
game_actions_Action.MENU_DOWN = "MENU_DOWN";
game_actions_Action.MENU_UP = "MENU_UP";
game_actions_Action.BACK = "BACK";
game_actions_Action.CONFIRM = "CONFIRM";
game_actions_Action.SHIFT_LEFT = "SHIFT_LEFT";
game_actions_Action.SHIFT_RIGHT = "SHIFT_RIGHT";
game_actions_Action.SOFT_DROP = "SOFT_DROP";
game_actions_Action.HARD_DROP = "HARD_DROP";
game_actions_Action.ROTATE_LEFT = "ROTATE_LEFT";
game_actions_Action.ROTATE_RIGHT = "ROTATE_RIGHT";
game_actions_Action.TOGGLE_EDIT_MODE = "TOGGLE_EDIT_MODE";
game_actions_Action.EDIT_LEFT = "EDIT_LEFT";
game_actions_Action.EDIT_RIGHT = "EDIT_RIGHT";
game_actions_Action.EDIT_DOWN = "EDIT_DOWN";
game_actions_Action.EDIT_UP = "EDIT_UP";
game_actions_Action.EDIT_SET = "EDIT_SET";
game_actions_Action.EDIT_CLEAR = "EDIT_CLEAR";
game_actions_Action.PREVIOUS_STEP = "PREVIOUS_STEP";
game_actions_Action.NEXT_STEP = "NEXT_STEP";
game_actions_Action.PREVIOUS_COLOR = "PREVIOUS_COLOR";
game_actions_Action.NEXT_COLOR = "NEXT_COLOR";
game_actions_Action.PREVIOUS_GROUP = "PREVIOUS_GROUP";
game_actions_Action.NEXT_GROUP = "NEXT_GROUP";
game_actions_Action.TOGGLE_MARKERS = "TOGGLE_MARKERS";
game_actions_Action.QUICK_RESTART = "QUICK_RESTART";
game_actions_Action.SAVE_STATE = "SAVE_STATE";
game_actions_Action.LOAD_STATE = "LOAD_STATE";
var game_actions_ActionData_ACTION_DATA = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = new game_actions_ActionDataEntry("Pause",["Pause/Unpause The Game"],input_InputType.PRESS,false);
		_g.h["PAUSE"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Left",["Move Left In Menus"],input_InputType.REPEAT,false);
		_g.h["MENU_LEFT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Right",["Move Right In Menus"],input_InputType.REPEAT,false);
		_g.h["MENU_RIGHT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Down",["Move Down In Menus"],input_InputType.REPEAT,false);
		_g.h["MENU_DOWN"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Up",["Move Up In Menus"],input_InputType.REPEAT,false);
		_g.h["MENU_UP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Back",["Go Back One Submenu"],input_InputType.PRESS,false);
		_g.h["BACK"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Confirm",["Activate A Menu Entry"],input_InputType.PRESS,false);
		_g.h["CONFIRM"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Shift Left",["Shift The Gelo Group","To The Left"],input_InputType.HOLD,false);
		_g.h["SHIFT_LEFT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Shift Right",["Shift The Gelo Group","To The Right"],input_InputType.HOLD,false);
		_g.h["SHIFT_RIGHT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Soft Drop",["Hold To Make The Gelo Group","Fall Faster"],input_InputType.HOLD,false);
		_g.h["SOFT_DROP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Hard Drop",["Press To Make The Gelo Group","Instantly Fall To The Bottom","(Only When Enabled In The Ruleset)"],input_InputType.HOLD,false);
		_g.h["HARD_DROP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Rotate Left",["Rotate The Gelo Group Counterclockwise"],input_InputType.HOLD,false);
		_g.h["ROTATE_LEFT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Rotate Right",["Rotate The Gelo Group Clockwise"],input_InputType.HOLD,false);
		_g.h["ROTATE_RIGHT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Toggle Edit Mode",["Toggle Between Play Mode And Edit Mode"],input_InputType.PRESS,true);
		_g.h["TOGGLE_EDIT_MODE"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Move Cursor Left",["Move The Editing Cursor Left"],input_InputType.REPEAT,false);
		_g.h["EDIT_LEFT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Move Cursor Right",["Move The Editing Cursor Right"],input_InputType.REPEAT,false);
		_g.h["EDIT_RIGHT"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Move Cursor Down",["Move The Editing Cursor Down"],input_InputType.REPEAT,false);
		_g.h["EDIT_DOWN"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Move Cursor Up",["Move The Editing Cursor Up"],input_InputType.REPEAT,false);
		_g.h["EDIT_UP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Place Gelo / Marker",["Set The Selected Gelo","Or Marker At The Cursor"],input_InputType.PRESS,false);
		_g.h["EDIT_SET"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Clear Gelo / Marker",["Clear The Gelo or Marker At The","Cursor's Location"],input_InputType.PRESS,false);
		_g.h["EDIT_CLEAR"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Previous Step",["Select The Previous Chain Step"],input_InputType.REPEAT,false);
		_g.h["PREVIOUS_STEP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Next Step",["Select The Next Chain Step"],input_InputType.REPEAT,false);
		_g.h["NEXT_STEP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Previous Color / Marker",["Cycle Backwards To The Gelo / Marker You","Want To Place"],input_InputType.REPEAT,false);
		_g.h["PREVIOUS_COLOR"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Next Color / Marker",["Cycle Forwards To The Gelo / Marker You Want to Place"],input_InputType.REPEAT,false);
		_g.h["NEXT_COLOR"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Undo",["Undo The Last Gelo Group Placement"],input_InputType.REPEAT,true);
		_g.h["PREVIOUS_GROUP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Redo",["Redo The Last Undone Placement Or Get","The Next Gelo Group From","The Queue If There Is Nothing","To Undo"],input_InputType.REPEAT,true);
		_g.h["NEXT_GROUP"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Toggle Gelos / Markers",["Alternate Between Editing Gelos And","Editing Markers"],input_InputType.PRESS,true);
		_g.h["TOGGLE_MARKERS"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Quick Restart",["Clear The Field And Reset According","To The 'Clear On X Mode' Settings","(Endless/Training Mode ONLY)"],input_InputType.REPEAT,true);
		_g.h["QUICK_RESTART"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Save State",["Create A 'Rewind Point' That","You Can Return To Using","Load State"],input_InputType.PRESS,true);
		_g.h["SAVE_STATE"] = value;
	}
	{
		var value = new game_actions_ActionDataEntry("Load State",["Return To The 'Rewind Point'","Previously Saved Using","Save State"],input_InputType.PRESS,true);
		_g.h["LOAD_STATE"] = value;
	}
	$r = _g;
	return $r;
}(this));
game_auto_$attack_AutoAttackManager.__meta__ = { fields : { popCount : { inject : null}, rng : { inject : null}, geometries : { inject : null}, trainingSettings : { inject : null}, prefsSettings : { inject : null}, linkBuilder : { inject : null}, garbageManager : { inject : null}, chainCounter : { inject : null}, particleManager : { inject : null}, accumGarbage : { copy : null}, linkIndex : { copy : null}, linkData : { copy : null}, timer : { copy : null}, chain : { copy : null}, state : { copy : null}, isPaused : { copy : null}, type : { copy : null}}};
game_auto_$attack_AutoAttackManager.EFFECT_Y = 800;
game_boardmanagers_DualBoardManager.__meta__ = { fields : { doesBoardOneHavePriority : { inject : null}, boardOne : { inject : null}, boardTwo : { inject : null}}};
game_boardmanagers_SingleBoardManager.__meta__ = { fields : { geometries : { inject : null}, board : { inject : null}}};
game_boards_SingleStateBoard.__meta__ = { fields : { pauseMediator : { inject : null}, inputDevice : { inject : null}, state : { inject : null}}};
game_boards_EndlessBoard.__meta__ = { fields : { endlessState : { inject : null}}};
game_boards_TrainingBoard.__meta__ = { fields : { pauseMediator : { inject : null}, inputDevice : { inject : null}, infoState : { inject : null}, controlHintContainer : { inject : null}, saveGameStateMediator : { inject : null}, playState : { inject : null}, editState : { inject : null}, activeState : { copy : null}}};
game_boards_TrainingBoard.GAME_CONTROL_HINTS = [new ui_ControlHint(["TOGGLE_EDIT_MODE"],"Edit Mode"),new ui_ControlHint(["PREVIOUS_GROUP"],"Undo"),new ui_ControlHint(["NEXT_GROUP"],"Redo / Get Next Group"),new ui_ControlHint(["QUICK_RESTART"],"Quick Restart"),new ui_ControlHint(["SAVE_STATE"],"Save State"),new ui_ControlHint(["LOAD_STATE"],"Load State")];
game_boards_TrainingBoard.EDIT_CONTROL_HINTS = [new ui_ControlHint(["TOGGLE_EDIT_MODE"],"Play Mode"),new ui_ControlHint(["EDIT_SET"],"Set"),new ui_ControlHint(["EDIT_CLEAR"],"Clear"),new ui_ControlHint(["PREVIOUS_STEP","NEXT_STEP"],"Cycle Chain Steps"),new ui_ControlHint(["PREVIOUS_COLOR","NEXT_COLOR"],"Cycle Gelos / Markers"),new ui_ControlHint(["TOGGLE_MARKERS"],"Toggle Gelos / Markers")];
game_boardstates_EditingBoardState.__meta__ = { fields : { geometries : { inject : null}, inputDevice : { inject : null}, chainSim : { inject : null}, chainCounter : { inject : null}, prefsSettings : { inject : null}, cursorX : { copy : null}, cursorY : { copy : null}, cursorDisplayX : { copy : null}, cursorDisplayY : { copy : null}, selectedIndex : { copy : null}, mode : { copy : null}, field : { inject : null}}};
game_boardstates_EditingBoardState.COLORS = [0,1,2,3,4,6];
game_boardstates_StandardBoardState.__meta__ = { fields : { animations : { inject : null}, randomizeGarbage : { inject : null}, prefsSettings : { inject : null}, rng : { inject : null}, geometries : { inject : null}, particleManager : { inject : null}, geloGroup : { inject : null}, queue : { inject : null}, preview : { inject : null}, allClearManager : { inject : null}, scoreManager : { inject : null}, actionBuffer : { inject : null}, chainCounter : { inject : null}, field : { inject : null}, chainSim : { inject : null}, garbageManager : { inject : null}, popPauseMaxT : { copy : null}, currentActions : { copy : null}, popPauseT : { copy : null}, firstDropFrame : { copy : null}, canRotateLeft : { copy : null}, canRotateRight : { copy : null}, borderColor : { copy : null}, beginBorderColor : { copy : null}, targetBorderColor : { copy : null}, borderColorT : { copy : null}, currentBeginStep : { copy : null}, currentDropStep : { copy : null}, currentPopStep : { copy : null}, currentEndStep : { copy : null}, canDropGarbage : { copy : null}, state : { copy : null}}};
game_boardstates_EndlessBoardState.__meta__ = { fields : { clearOnXModeContainer : { inject : null}, randomizer : { inject : null}, marginManager : { inject : null}}};
game_boardstates_TrainingBoardState.__meta__ = { fields : { trainingSettings : { inject : null}, infoState : { inject : null}, autoAttackManager : { inject : null}}};
game_boardstates_TrainingInfoBoardState.__meta__ = { fields : { popCount : { inject : null}, geometries : { inject : null}, marginManager : { inject : null}, linkBuilder : { inject : null}, trainingSettings : { inject : null}, chainAdvantageDisplay : { inject : null}, afterCounterDisplay : { inject : null}, garbageManager : { inject : null}, prefsSettings : { inject : null}, autoAttackManager : { inject : null}, playerScoreManager : { inject : null}, playerChainSim : { inject : null}, linkStandardDamages : { copy : null}, chain : { copy : null}, chainLength : { copy : null}, linkDamage : { copy : null}, linkRemainder : { copy : null}, chainDamage : { copy : null}, totalDamage : { copy : null}, chainAdvantage : { copy : null}, toCounterChain : { copy : null}, counterDifference : { copy : null}, groupCounter : { copy : null}, ppsT : { copy : null}, splitT : { copy : null}, currentGreatSplits : { copy : null}, currentOkaySplits : { copy : null}, currentSlowSplits : { copy : null}, currentSplitCounter : { copy : null}, overallGreatSplits : { copy : null}, overallOkaySplits : { copy : null}, overallSlowSplits : { copy : null}, overallSplitCounter : { copy : null}, updateSplitT : { copy : null}, showSteps : { copy : null}, viewMin : { copy : null}, shouldUpdatePPST : { copy : null}}};
game_boardstates_TrainingInfoBoardState.TITLE_FONT_SIZE = 40;
game_boardstates_TrainingInfoBoardState.CARD_FONT_SIZE = 32;
game_boardstates_TrainingInfoBoardState.CARD_SIZE = 512;
game_boardstates_TrainingInfoBoardState.GAME_INFO_X = -64;
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
hxbit_Serializer.EMPTY_MAP = new haxe_ds_StringMap();
hxbit_Serializer.ENUM_CLASSES = new haxe_ds_StringMap();
game_fields_ChainFieldMarker.__meta__ = { fields : { chain : { copy : null}, chainString : { copy : null}, fontWidth : { copy : null}}};
game_fields_ChainFieldMarker.SPRITE_X = 770;
game_fields_ChainFieldMarker.SPRITE_Y = 455;
game_fields_ChainFieldMarker.FONTSIZE = 30;
game_fields_ChainFieldMarker.__clid = hxbit_Serializer.registerClass(game_fields_ChainFieldMarker);
game_fields_Field.__meta__ = { fields : { prefsSettings : { inject : null}, markers : { copy : null}, gelos : { copy : null}, columns : { inject : null}, playAreaRows : { inject : null}, garbageRows : { inject : null}, hiddenRows : { inject : null}, outerRows : { copy : null}, totalRows : { copy : null}, centerColumnIndex : { copy : null}, garbageAccelerations : { copy : null}, garbageColumns : { copy : null}}};
game_fields_Field.ORIGINAL_GARBAGE_ACCELERATIONS = [0.5625,0.59375,0.5,0.5625,0.53125,0.625];
game_fields_Field.ORIGINAL_GARBAGE_COLUMNS = [0,3,2,5,1,4];
game_fields_FieldPopInfo.__meta__ = { fields : { beginners : { copy : null}, clears : { copy : null}, clearsByColor : { copy : null}, hasPops : { copy : null}}};
game_fields_MultiColorFieldMarker.__meta__ = { fields : { prefsSettings : { inject : null}, spriteCoordinates : { inject : null}, defaultColor : { inject : null}, colors : { copy : null}, type : { inject : null}}};
game_fields_MultiColorFieldMarker.__clid = hxbit_Serializer.registerClass(game_fields_MultiColorFieldMarker);
game_fields_NullFieldMarker.__clid = hxbit_Serializer.registerClass(game_fields_NullFieldMarker);
game_gamestatebuilders_EndlessGameStateBuilder.__meta__ = { fields : { rule : { inject : null}, inputDevice : { inject : null}, replayData : { inject : null}, rng : { copy : null}, randomizer : { copy : null}, particleManager : { copy : null}, marginManager : { copy : null}, frameCounter : { copy : null}, scoreManager : { copy : null}, chainSim : { copy : null}, chainCounter : { copy : null}, field : { copy : null}, queue : { copy : null}, geloGroup : { copy : null}, allClearManager : { copy : null}, boardState : { copy : null}, board : { copy : null}, controlHintContainer : { copy : null}}};
game_gamestatebuilders_NetplayEndlessGameStateBuilder.__meta__ = { fields : { rule : { inject : null}, isLocalOnLeft : { inject : null}, session : { inject : null}, frameCounter : { inject : null, copy : null}, rng : { copy : null}, randomizer : { copy : null}, particleManager : { copy : null}, marginManager : { copy : null}, leftBorderColorMediator : { copy : null}, leftTargetMediator : { copy : null}, rightBorderColorMediator : { copy : null}, rightTargetMediator : { copy : null}, leftGarbageTray : { copy : null}, leftGarbageManager : { copy : null}, leftScoreManager : { copy : null}, leftChainSimDisplay : { copy : null}, leftChainSimAccumDisplay : { copy : null}, leftChainSim : { copy : null}, leftChainCounter : { copy : null}, leftField : { copy : null}, leftQueue : { copy : null}, leftGeloGroup : { copy : null}, leftAllClearManager : { copy : null}, leftPreview : { copy : null}, rightGarbageTray : { copy : null}, rightGarbageManager : { copy : null}, rightScoreManager : { copy : null}, rightChainSimDisplay : { copy : null}, rightChainSimAccumDisplay : { copy : null}, rightChainSim : { copy : null}, rightChainCounter : { copy : null}, rightField : { copy : null}, rightQueue : { copy : null}, rightGeloGroup : { copy : null}, rightAllClearManager : { copy : null}, rightPreview : { copy : null}, leftState : { copy : null}, rightState : { copy : null}, controlHintContainer : { copy : null}}};
game_gamestatebuilders_TrainingGameStateBuilder.__meta__ = { fields : { rng : { copy : null}, randomizer : { copy : null}, particleManager : { copy : null}, marginManager : { copy : null}, frameCounter : { copy : null}, playerGarbageTray : { copy : null}, playerGarbageManager : { copy : null}, playerScoreManager : { copy : null}, playerChainSimDisplay : { copy : null}, playerChainSimAccumDisplay : { copy : null}, playerChainSim : { copy : null}, playerChainCounter : { copy : null}, playerField : { copy : null}, playerQueue : { copy : null}, playerPreview : { copy : null}, playerInputDevice : { copy : null}, playerGeloGroupChainSim : { copy : null}, playerGeloGroup : { copy : null}, playerAllClearManager : { copy : null}, infoGarbageTray : { copy : null}, infoGarbageManager : { copy : null}, autoAttackChainCounter : { copy : null}, autoAttackManager : { copy : null}, infoChainAdvantageDisplay : { copy : null}, infoAfterCounterDisplay : { copy : null}, editField : { copy : null}, infoState : { copy : null}, playState : { copy : null}, editState : { copy : null}, playerBoard : { copy : null}, infoBoard : { copy : null}, controlHintContainer : { copy : null}}};
var game_garbage_GarbageIcon_GARBAGE_ICON_GEOMETRIES = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(game_garbage_GarbageIcon.SMALL,new utils_Geometry(64,64,128,680));
	_g.set(game_garbage_GarbageIcon.LARGE,new utils_Geometry(64,64,192,680));
	_g.set(game_garbage_GarbageIcon.ROCK,new utils_Geometry(64,64,256,680));
	_g.set(game_garbage_GarbageIcon.STAR,new utils_Geometry(64,64,320,680));
	_g.set(game_garbage_GarbageIcon.MOON,new utils_Geometry(64,64,384,680));
	_g.set(game_garbage_GarbageIcon.CROWN,new utils_Geometry(64,64,448,680));
	_g.set(game_garbage_GarbageIcon.COMET,new utils_Geometry(104,96,512,680));
	$r = _g;
	return $r;
}(this));
game_garbage_GarbageManager.__meta__ = { fields : { garbageDropLimit : { inject : null}, confirmGracePeriod : { inject : null}, rng : { inject : null}, prefsSettings : { inject : null}, particleManager : { inject : null}, geometries : { inject : null}, tray : { inject : null}, target : { inject : null}, currentGarbage : { copy : null}, confirmedGarbage : { copy : null}, graceT : { copy : null}, canReceiveGarbage : { copy : null}}};
game_garbage_GarbageManager.__clid = hxbit_Serializer.registerClass(game_garbage_GarbageManager);
game_garbage_NullGarbageManager.__clid = hxbit_Serializer.registerClass(game_garbage_NullGarbageManager);
game_garbage_trays_GarbageTray.__meta__ = { fields : { display : { copy : null}, state : { copy : null}}};
game_garbage_trays_CenterGarbageTray.__meta__ = { fields : { lastScaleX : { copy : null}, scaleX : { copy : null}, garbage : { copy : null}}};
game_garbage_trays_NullGarbageTray.instance = new game_garbage_trays_NullGarbageTray();
game_gelogroups_GeloGroup.__meta__ = { fields : { physics : { inject : null}, animations : { inject : null}, dropSpeed : { inject : null}, prefsSettings : { inject : null}, scoreManager : { inject : null}, field : { inject : null}, chainSim : { inject : null}, others : { copy : null}, otherShadows : { copy : null}, main : { copy : null}, x : { copy : null}, y : { copy : null}, prevDisplayX : { copy : null}, prevDisplayY : { copy : null}, displayX : { copy : null}, displayY : { copy : null}, prevRotationAngle : { copy : null}, rotationID : { copy : null}, rotationAngle : { copy : null}, targetRotationAngle : { copy : null}, rotationIncrement : { copy : null}, stuckRotationCount : { copy : null}, lockResetCount : { copy : null}, graceT : { copy : null}, das : { copy : null}, dasDirection : { copy : null}, arr : { copy : null}, mainShadow : { copy : null}, willTriggerChain : { copy : null}, shouldLock : { copy : null}, willTriggerChainT : { copy : null}, isVisible : { copy : null}, isShadowVisible : { copy : null}}};
game_gelogroups_TrainingGeloGroup.__meta__ = { fields : { trainingSettings : { inject : null}}};
game_gelogroups_TrainingGeloGroup.BLIND_MODE_COLOR = kha_Color._new(-10066330);
game_gelos_Gelo.__meta__ = { fields : { prefsSettings : { inject : null}, spriteVariation : { copy : null}, subImageCoords : { copy : null}, bounceT : { copy : null}, bounceType : { copy : null}, popT : { copy : null}, popType : { copy : null}, isVisible : { copy : null}, prevScaleX : { copy : null}, prevScaleY : { copy : null}, color : { inject : null}, scaleX : { copy : null}, scaleY : { copy : null}, willTriggerChain : { copy : null}}};
game_gelos_Gelo.SIZE = 64;
game_gelos_Gelo.HALFSIZE = 32;
game_gelos_FieldGelo.__meta__ = { fields : { x : { inject : null, copy : null}, y : { inject : null, copy : null}, distanceCounter : { copy : null}, velocity : { copy : null}, velocityLimit : { copy : null}, accel : { copy : null}, state : { copy : null}}};
var game_gelos_GeloBounceTables_GELO_TSU_SHORT_BOUNCE_TABLE = [new utils_Point(1,0.80),new utils_Point(1,1),new utils_Point(0.80,1),new utils_Point(0.80,1),new utils_Point(0.80,1),new utils_Point(1,1),new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,1),new utils_Point(0.80,1),new utils_Point(0.80,1)];
var game_gelos_GeloBounceTables_GELO_TSU_LONG_BOUNCE_TABLE = [new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,1),new utils_Point(0.80,1),new utils_Point(0.80,1),new utils_Point(1,1),new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,1),new utils_Point(0.80,1),new utils_Point(0.80,1),new utils_Point(1,0.80),new utils_Point(1,1),new utils_Point(0.80,1),new utils_Point(1,1),new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,0.80),new utils_Point(1,0.80)];
game_gelos_GeloColor.COLOR1 = 0;
game_gelos_GeloColor.COLOR2 = 1;
game_gelos_GeloColor.COLOR3 = 2;
game_gelos_GeloColor.COLOR4 = 3;
game_gelos_GeloColor.COLOR5 = 4;
game_gelos_GeloColor.EMPTY = 5;
game_gelos_GeloColor.GARBAGE = 6;
var game_gelos_GeloSpriteCoordinates_GELO_SPRITE_COORDINATES = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(0,0);
		_g1.h[0] = value;
		var value = new utils_Point(64,0);
		_g1.h[4] = value;
		var value = new utils_Point(128,0);
		_g1.h[8] = value;
		var value = new utils_Point(192,0);
		_g1.h[12] = value;
		var value = new utils_Point(256,0);
		_g1.h[1] = value;
		var value = new utils_Point(320,0);
		_g1.h[5] = value;
		var value = new utils_Point(384,0);
		_g1.h[9] = value;
		var value = new utils_Point(448,0);
		_g1.h[13] = value;
		var value = new utils_Point(512,0);
		_g1.h[2] = value;
		var value = new utils_Point(576,0);
		_g1.h[6] = value;
		var value = new utils_Point(640,0);
		_g1.h[10] = value;
		var value = new utils_Point(704,0);
		_g1.h[14] = value;
		var value = new utils_Point(768,0);
		_g1.h[3] = value;
		var value = new utils_Point(832,0);
		_g1.h[7] = value;
		var value = new utils_Point(896,0);
		_g1.h[11] = value;
		var value = new utils_Point(960,0);
		_g1.h[15] = value;
		_g.h[0] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(0,64);
		_g1.h[0] = value;
		var value = new utils_Point(64,64);
		_g1.h[4] = value;
		var value = new utils_Point(128,64);
		_g1.h[8] = value;
		var value = new utils_Point(192,64);
		_g1.h[12] = value;
		var value = new utils_Point(256,64);
		_g1.h[1] = value;
		var value = new utils_Point(320,64);
		_g1.h[5] = value;
		var value = new utils_Point(384,64);
		_g1.h[9] = value;
		var value = new utils_Point(448,64);
		_g1.h[13] = value;
		var value = new utils_Point(512,64);
		_g1.h[2] = value;
		var value = new utils_Point(576,64);
		_g1.h[6] = value;
		var value = new utils_Point(640,64);
		_g1.h[10] = value;
		var value = new utils_Point(704,64);
		_g1.h[14] = value;
		var value = new utils_Point(768,64);
		_g1.h[3] = value;
		var value = new utils_Point(832,64);
		_g1.h[7] = value;
		var value = new utils_Point(896,64);
		_g1.h[11] = value;
		var value = new utils_Point(960,64);
		_g1.h[15] = value;
		_g.h[1] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(0,128);
		_g1.h[0] = value;
		var value = new utils_Point(64,128);
		_g1.h[4] = value;
		var value = new utils_Point(128,128);
		_g1.h[8] = value;
		var value = new utils_Point(192,128);
		_g1.h[12] = value;
		var value = new utils_Point(256,128);
		_g1.h[1] = value;
		var value = new utils_Point(320,128);
		_g1.h[5] = value;
		var value = new utils_Point(384,128);
		_g1.h[9] = value;
		var value = new utils_Point(448,128);
		_g1.h[13] = value;
		var value = new utils_Point(512,128);
		_g1.h[2] = value;
		var value = new utils_Point(576,128);
		_g1.h[6] = value;
		var value = new utils_Point(640,128);
		_g1.h[10] = value;
		var value = new utils_Point(704,128);
		_g1.h[14] = value;
		var value = new utils_Point(768,128);
		_g1.h[3] = value;
		var value = new utils_Point(832,128);
		_g1.h[7] = value;
		var value = new utils_Point(896,128);
		_g1.h[11] = value;
		var value = new utils_Point(960,128);
		_g1.h[15] = value;
		_g.h[2] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(0,192);
		_g1.h[0] = value;
		var value = new utils_Point(64,192);
		_g1.h[4] = value;
		var value = new utils_Point(128,192);
		_g1.h[8] = value;
		var value = new utils_Point(192,192);
		_g1.h[12] = value;
		var value = new utils_Point(256,192);
		_g1.h[1] = value;
		var value = new utils_Point(320,192);
		_g1.h[5] = value;
		var value = new utils_Point(384,192);
		_g1.h[9] = value;
		var value = new utils_Point(448,192);
		_g1.h[13] = value;
		var value = new utils_Point(512,192);
		_g1.h[2] = value;
		var value = new utils_Point(576,192);
		_g1.h[6] = value;
		var value = new utils_Point(640,192);
		_g1.h[10] = value;
		var value = new utils_Point(704,192);
		_g1.h[14] = value;
		var value = new utils_Point(768,192);
		_g1.h[3] = value;
		var value = new utils_Point(832,192);
		_g1.h[7] = value;
		var value = new utils_Point(896,192);
		_g1.h[11] = value;
		var value = new utils_Point(960,192);
		_g1.h[15] = value;
		_g.h[3] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(0,256);
		_g1.h[0] = value;
		var value = new utils_Point(64,256);
		_g1.h[4] = value;
		var value = new utils_Point(128,256);
		_g1.h[8] = value;
		var value = new utils_Point(192,256);
		_g1.h[12] = value;
		var value = new utils_Point(256,256);
		_g1.h[1] = value;
		var value = new utils_Point(320,256);
		_g1.h[5] = value;
		var value = new utils_Point(384,256);
		_g1.h[9] = value;
		var value = new utils_Point(448,256);
		_g1.h[13] = value;
		var value = new utils_Point(512,256);
		_g1.h[2] = value;
		var value = new utils_Point(576,256);
		_g1.h[6] = value;
		var value = new utils_Point(640,256);
		_g1.h[10] = value;
		var value = new utils_Point(704,256);
		_g1.h[14] = value;
		var value = new utils_Point(768,256);
		_g1.h[3] = value;
		var value = new utils_Point(832,256);
		_g1.h[7] = value;
		var value = new utils_Point(896,256);
		_g1.h[11] = value;
		var value = new utils_Point(960,256);
		_g1.h[15] = value;
		_g.h[4] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		_g1.h[0] = null;
		_g.h[5] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Point(960,320);
		_g1.h[0] = value;
		_g.h[6] = _g1;
	}
	$r = _g;
	return $r;
}(this));
game_gelos_OtherGelo.__meta__ = { fields : { positionID : { inject : null}, relX : { copy : null}, relY : { copy : null}}};
var game_gelos_OtherGeloPositions_OTHERGELO_POSITIONS = [[new utils_IntPoint(-1,-1),new utils_IntPoint(1,-1),new utils_IntPoint(1,1),new utils_IntPoint(-1,1)],[new utils_IntPoint(0,-1),new utils_IntPoint(1,0),new utils_IntPoint(0,1),new utils_IntPoint(-1,0)],[new utils_IntPoint(1,-1),new utils_IntPoint(1,1),new utils_IntPoint(-1,1),new utils_IntPoint(-1,-1)],[new utils_IntPoint(-1,0),new utils_IntPoint(0,-1),new utils_IntPoint(1,0),new utils_IntPoint(-1,1)],[new utils_IntPoint(1,0),new utils_IntPoint(0,1),new utils_IntPoint(-1,0),new utils_IntPoint(0,-1)],[new utils_IntPoint(-1,1),new utils_IntPoint(-1,-1),new utils_IntPoint(1,-1),new utils_IntPoint(1,1)],[new utils_IntPoint(0,1),new utils_IntPoint(-1,0),new utils_IntPoint(0,-1),new utils_IntPoint(1,0)],[new utils_IntPoint(1,1),new utils_IntPoint(-1,1),new utils_IntPoint(-1,-1),new utils_IntPoint(1,-1)]];
game_geometries_BoardGeometries.WIDTH = 384;
game_geometries_BoardGeometries.HEIGHT = 768;
game_geometries_BoardGeometries.CENTER = new utils_Point(game_geometries_BoardGeometries.WIDTH / 2,game_geometries_BoardGeometries.HEIGHT / 2);
game_geometries_BoardGeometries.LEFT = new game_geometries_BoardGeometries(new utils_Point(168,160),1,game_geometries_BoardOrientation.LEFT,new utils_Point(game_geometries_BoardGeometries.WIDTH + 48,32),new utils_Point(game_geometries_BoardGeometries.CENTER.x,game_geometries_BoardGeometries.HEIGHT / 5),game_geometries_BoardGeometries.HEIGHT + 33,new utils_Point(0,-77),new utils_Point(game_geometries_BoardGeometries.WIDTH + 48,game_geometries_BoardGeometries.HEIGHT - 64));
game_geometries_BoardGeometries.RIGHT = new game_geometries_BoardGeometries(new utils_Point(888,160),1,game_geometries_BoardOrientation.RIGHT,new utils_Point(-48,32),new utils_Point(game_geometries_BoardGeometries.CENTER.x,game_geometries_BoardGeometries.HEIGHT / 5),game_geometries_BoardGeometries.HEIGHT + 33,new utils_Point(0,-77),new utils_Point(-48,game_geometries_BoardGeometries.HEIGHT - 64));
game_geometries_BoardGeometries.CENTERED = new game_geometries_BoardGeometries(new utils_Point(528,160),1,game_geometries_BoardOrientation.LEFT,new utils_Point(game_geometries_BoardGeometries.WIDTH + 48,32),new utils_Point(game_geometries_BoardGeometries.CENTER.x,game_geometries_BoardGeometries.HEIGHT / 5),game_geometries_BoardGeometries.HEIGHT + 33,new utils_Point(0,-77),new utils_Point(game_geometries_BoardGeometries.WIDTH + 48,game_geometries_BoardGeometries.HEIGHT - 64));
game_geometries_BoardGeometries.INFO = new game_geometries_BoardGeometries(new utils_Point(888,160),1,game_geometries_BoardOrientation.RIGHT,new utils_Point(-48,32),new utils_Point(game_geometries_BoardGeometries.CENTER.x,game_geometries_BoardGeometries.HEIGHT / 5),game_geometries_BoardGeometries.HEIGHT + 33,new utils_Point(-64,-77),new utils_Point(-48,game_geometries_BoardGeometries.HEIGHT - 64));
game_mediators_ControlHintContainer.__meta__ = { fields : { value : { copy : null}, isVisible : { copy : null}}};
game_mediators_FrameCounter.__meta__ = { fields : { value : { copy : null}}};
game_particles_GarbageBulletParticle.__meta__ = { fields : { begin : { inject : null}, control : { inject : null}, target : { inject : null}, beginScale : { inject : null}, targetScale : { inject : null}, duration : { inject : null}, color : { inject : null}, onFinish : { inject : null}, trailParts : { copy : null}, prevX : { copy : null}, prevY : { copy : null}, currentX : { copy : null}, currentY : { copy : null}, t : { copy : null}, isAnimationFinished : { copy : null}}};
game_particles_GarbageBulletTrailParticle.__meta__ = { fields : { x : { inject : null}, y : { inject : null}, color : { inject : null}, lastT : { copy : null}, t : { copy : null}, isAnimationFinished : { copy : null}}};
game_particles_GeloPopParticle.__meta__ = { fields : { dx : { inject : null}, dyIncrement : { inject : null}, color : { inject : null}, maxT : { inject : null}, x : { inject : null, copy : null}, y : { inject : null, copy : null}, dy : { inject : null, copy : null}, lastX : { copy : null}, lastY : { copy : null}, t : { copy : null}, isAnimationFinished : { copy : null}}};
game_particles_ParticleManager.__meta__ = { fields : { backParticles : { copy : null}, frontParticles : { copy : null}}};
game_particles_PixelFloatParticle.__meta__ = { fields : { dx : { inject : null}, dy : { inject : null}, maxT : { inject : null}, color : { inject : null}, size : { inject : null}, x : { inject : null, copy : null}, y : { inject : null, copy : null}, lastX : { copy : null}, lastY : { copy : null}, lastT : { copy : null}, t : { copy : null}, isAnimationFinished : { copy : null}}};
game_particles_SmallStarParticle.__meta__ = { fields : { x : { inject : null}, y : { inject : null}, color : { inject : null}, t : { copy : null}, isAnimationFinished : { copy : null}}};
game_previews_VerticalPreview.__meta__ = { fields : { t : { copy : null}, queueY : { copy : null}, beginY : { copy : null}, targetY : { copy : null}, isAnimationFinished : { copy : null}}};
game_randomizers_Randomizer.__meta__ = { fields : { rng : { inject : null}, prefsSettings : { inject : null}, currentPool : { copy : null}}};
var game_rules_ColorBonusTables_COLOR_BONUS_TABLES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["TSU"] = [0,3,6,12,24];
	_g.h["FEVER"] = [0,2,4,8,16];
	$r = _g;
	return $r;
}(this));
game_rules_EndlessRule.__clid = hxbit_Serializer.registerClass(game_rules_EndlessRule);
var game_rules_GroupBonusTables_GROUP_BONUS_TABLES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["TSU"] = [0,0,0,0,2,3,4,5,6,7,10];
	_g.h["FEVER"] = [0,0,0,0,1,2,3,4,5,6,8];
	$r = _g;
	return $r;
}(this));
game_rules_MarginTimeManager.__meta__ = { fields : { changeCounter : { copy : null}, marginTime : { copy : null}, startMarginTime : { copy : null}, startTargetPoints : { copy : null}, isEnabled : { copy : null}, targetPoints : { copy : null}}};
game_rules_MarginTimeManager.__clid = hxbit_Serializer.registerClass(game_rules_MarginTimeManager);
var game_rules_PowerTables_POWER_TABLES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = new game_rules_QueryablePowerTable([0,8,16,32,64,128,256,512,999],0);
		_g.h["OPP"] = value;
	}
	{
		var value = new game_rules_QueryablePowerTable([0,8,16,32],32);
		_g.h["TSU"] = value;
	}
	{
		var value = new game_rules_QueryablePowerTable([4,20,24,32,48,96,160,240,320,480,600,700,800,900,999],0);
		_g.h["TSU (Singleplayer)"] = value;
	}
	$r = _g;
	return $r;
}(this));
game_rules_VersusRule.__clid = hxbit_Serializer.registerClass(game_rules_VersusRule);
game_screens_GameScreenBase.CONTROLS_FONT_SIZE = 32;
game_screens_GameScreenBase.PLAY_AREA_DESIGN_WIDTH = 1440;
game_screens_GameScreenBase.PLAY_AREA_DESIGN_HEIGHT = 1080;
game_screens_NetplayGameScreen.__meta__ = { fields : { session : { inject : null}, frameCounter : { inject : null}, gameStateBuilder : { inject : null}}};
game_simulation_SimulationStep.__meta__ = { fields : { chain : { inject : null}, fieldSnapshot : { inject : null}}};
game_simulation_SimulationStep.LABEL_SIZE = 64;
game_simulation_SimulationStep.CARD_SIZE = 512;
game_simulation_SimulationStep.TITLE_FONT_SIZE = 40;
game_simulation_SimulationStep.CARD_FONT_SIZE = 32;
game_simulation_BeginSimStep.__meta__ = { fields : { groupData : { inject : null}, sendsAllClearBonus : { inject : null}, dropBonus : { inject : null}, groupIndex : { inject : null}}};
game_simulation_ChainSimulator.__meta__ = { fields : { popCount : { inject : null}, vanishHiddenRows : { inject : null}, linkBuilder : { inject : null}, garbageDisplay : { inject : null}, accumulatedDisplay : { inject : null}, latestChainCounter : { copy : null}, latestGarbageCounter : { copy : null}, viewIndex : { copy : null}, stepIndex : { copy : null}}};
game_simulation_EndSimStep.__meta__ = { fields : { links : { inject : null}, endsInAllClear : { inject : null}}};
game_simulation_LinkInfoBuilder.__meta__ = { fields : { groupBonusTableType : { inject : null}, colorBonusTableType : { inject : null}, powerTableType : { inject : null}, dropBonusGarbage : { inject : null}, allClearReward : { inject : null}, marginManager : { inject : null}}};
game_simulation_PopSimStep.__meta__ = { fields : { garbageDisplay : { inject : null}, accumulatedDisplay : { inject : null}, popInfo : { inject : null}, linkInfo : { inject : null}}};
game_states_GameState.__meta__ = { fields : { particleManager : { inject : null}, frameCounter : { inject : null}, boardManager : { inject : null}, marginManager : { inject : null}}};
ui_ListMenuPage.__meta__ = { fields : { widgetBuilder : { inject : null}, header : { inject : null}}};
ui_ListMenuPage.DESC_FONT_SIZE = 48;
ui_ListMenuPage.MAX_WIDGETS_PER_VIEW = 7;
ui_ListMenuPage.WIDGET_BOTTOM_PADDING = 16;
ui_ListMenuPage.DEFAULT_CONTROL_DISPLAYS = [new ui_ControlHint(["MENU_UP","MENU_DOWN"],"Select"),new ui_ControlHint(["BACK"],"Back")];
ui_InputLimitedListPage.__meta__ = { fields : { inputDevice : { inject : null}}};
ui_ButtonWidget.__meta__ = { fields : { callback : { inject : null}, title : { inject : null}, description : { inject : null}}};
ui_ButtonWidget.FONT_SIZE = 60;
ui_Menu.__meta__ = { fields : { positionFactor : { inject : null}, widthFactor : { inject : null}, backgroundOpacity : { inject : null}, prefsSettings : { inject : null}}};
ui_Menu.HEADER_FONT_SIZE = 128;
ui_Menu.CONTROLS_FONT_SIZE = 48;
ui_Menu.WARNING_FONT_SIZE = 24;
ui_Menu.PADDING = 64;
ui_Menu.WARNING = ["BEWARE! This Is A Pre-Alpha Build of GelaVolt.","Everything Is Subject To Change. Expect Bugs and Crashes.","Thank You For Trying GelaVolt! Please Consider Leaving","Feedback On The Official Server! :)"];
game_ui_EndlessPauseMenu.__meta__ = { fields : { endlessSettings : { inject : null}, controlHintContainer : { inject : null}, actionBuffer : { inject : null}}};
game_ui_GroupEditorPage.GRID_COLOR = kha_Color._new(-12303292);
game_ui_InputWidget.FONT_SIZE = 60;
game_ui_QueueEditorPage.__meta__ = { fields : { queue : { inject : null}, groupEditor : { inject : null}}};
game_ui_ReplayPauseMenu.__meta__ = { fields : { actionBuffer : { inject : null}}};
game_ui_TrainingPauseMenu.__meta__ = { fields : { popCount : { inject : null}, vanishHiddenRows : { inject : null}, dropSpeed : { inject : null}, physics : { inject : null}, powerTableType : { inject : null}, colorBonusTableType : { inject : null}, groupBonusTableType : { inject : null}, dropBonusGarbage : { inject : null}, allClearReward : { inject : null}, randomizer : { inject : null}, queue : { inject : null}, playState : { inject : null}, trainingBoard : { inject : null}, allClearManager : { inject : null}, chainSim : { inject : null}, marginManager : { inject : null}, trainingSettings : { inject : null}, playerGarbageManager : { inject : null}, infoGarbageManager : { inject : null}, controlHintContainer : { inject : null}, autoAttackManager : { inject : null}}};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
hxbit_Convert.convFuns = new haxe_ds_StringMap();
hxbit_Macros.IN_ENUM_SER = false;
hxbit_Macros.NW_BUILD_STACK = [];
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
input_AnyInputDevice.FONT_SIZE = 48;
input_AnyInputDevice.KEYBOARD_ID = -1;
input_AnyInputDevice.rebindCounter = 0;
input_AnyInputDevice.lastDeviceID = -1;
var input_AxisSpriteCoordinates_AXIS_SPRITE_COORDINATES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,384,128);
		_g1.h[-1] = value;
		var value = new utils_Geometry(64,64,448,128);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,512,0);
		_g1.h[15] = value;
		var value = new utils_Geometry(64,64,576,0);
		_g1.h[17] = value;
		var value = new utils_Geometry(64,64,640,0);
		_g1.h[31] = value;
		var value = new utils_Geometry(64,64,512,64);
		_g1.h[33] = value;
		var value = new utils_Geometry(64,64,576,64);
		_g1.h[47] = value;
		var value = new utils_Geometry(64,64,640,64);
		_g1.h[49] = value;
		_g.h["DS4"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,384,128);
		_g1.h[-1] = value;
		var value = new utils_Geometry(64,64,448,128);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,512,0);
		_g1.h[15] = value;
		var value = new utils_Geometry(64,64,576,0);
		_g1.h[17] = value;
		var value = new utils_Geometry(64,64,640,0);
		_g1.h[31] = value;
		var value = new utils_Geometry(64,64,512,64);
		_g1.h[33] = value;
		var value = new utils_Geometry(64,64,576,64);
		_g1.h[47] = value;
		var value = new utils_Geometry(64,64,640,64);
		_g1.h[49] = value;
		_g.h["SW Pro Controller"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,384,128);
		_g1.h[-1] = value;
		var value = new utils_Geometry(64,64,448,128);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,512,0);
		_g1.h[15] = value;
		var value = new utils_Geometry(64,64,576,0);
		_g1.h[17] = value;
		var value = new utils_Geometry(64,64,640,0);
		_g1.h[31] = value;
		var value = new utils_Geometry(64,64,512,64);
		_g1.h[33] = value;
		var value = new utils_Geometry(64,64,576,64);
		_g1.h[47] = value;
		var value = new utils_Geometry(64,64,640,64);
		_g1.h[49] = value;
		_g.h["JOYCON"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,640,256);
		_g1.h[-1] = value;
		var value = new utils_Geometry(64,64,512,320);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,576,320);
		_g1.h[15] = value;
		var value = new utils_Geometry(64,64,640,320);
		_g1.h[17] = value;
		var value = new utils_Geometry(64,64,512,384);
		_g1.h[31] = value;
		var value = new utils_Geometry(64,64,576,384);
		_g1.h[33] = value;
		var value = new utils_Geometry(64,64,640,384);
		_g1.h[47] = value;
		var value = new utils_Geometry(64,64,512,448);
		_g1.h[49] = value;
		_g.h["XBONE"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,512,128);
		_g1.h[-1] = value;
		var value = new utils_Geometry(64,64,576,128);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,640,128);
		_g1.h[15] = value;
		var value = new utils_Geometry(64,64,512,192);
		_g1.h[17] = value;
		var value = new utils_Geometry(64,64,576,192);
		_g1.h[31] = value;
		var value = new utils_Geometry(64,64,640,192);
		_g1.h[33] = value;
		var value = new utils_Geometry(64,64,512,256);
		_g1.h[47] = value;
		var value = new utils_Geometry(64,64,576,256);
		_g1.h[49] = value;
		_g.h["XB360"] = _g1;
	}
	$r = _g;
	return $r;
}(this));
var input_ButtonSpriteCoordinates_BUTTON_SPRITE_COORDINATES = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,0,0);
		_g1.h[0] = value;
		var value = new utils_Geometry(64,64,64,0);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,128,0);
		_g1.h[2] = value;
		var value = new utils_Geometry(64,64,192,0);
		_g1.h[3] = value;
		var value = new utils_Geometry(64,64,256,0);
		_g1.h[4] = value;
		var value = new utils_Geometry(64,64,320,0);
		_g1.h[5] = value;
		var value = new utils_Geometry(64,64,384,0);
		_g1.h[6] = value;
		var value = new utils_Geometry(64,64,448,0);
		_g1.h[7] = value;
		var value = new utils_Geometry(64,64,128,64);
		_g1.h[10] = value;
		var value = new utils_Geometry(64,64,192,64);
		_g1.h[11] = value;
		var value = new utils_Geometry(128,64,384,64);
		_g1.h[8] = value;
		var value = new utils_Geometry(128,64,256,64);
		_g1.h[9] = value;
		var value = new utils_Geometry(64,64,192,128);
		_g1.h[12] = value;
		var value = new utils_Geometry(64,64,256,128);
		_g1.h[13] = value;
		var value = new utils_Geometry(64,64,64,128);
		_g1.h[14] = value;
		var value = new utils_Geometry(64,64,128,128);
		_g1.h[15] = value;
		_g.h["DS4"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,64,192);
		_g1.h[0] = value;
		var value = new utils_Geometry(64,64,0,192);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,192,192);
		_g1.h[2] = value;
		var value = new utils_Geometry(64,64,128,192);
		_g1.h[3] = value;
		var value = new utils_Geometry(64,64,256,192);
		_g1.h[4] = value;
		var value = new utils_Geometry(64,64,320,192);
		_g1.h[5] = value;
		var value = new utils_Geometry(64,64,384,192);
		_g1.h[6] = value;
		var value = new utils_Geometry(64,64,448,192);
		_g1.h[7] = value;
		var value = new utils_Geometry(64,64,0,256);
		_g1.h[10] = value;
		var value = new utils_Geometry(64,64,64,256);
		_g1.h[11] = value;
		var value = new utils_Geometry(64,64,320,320);
		_g1.h[8] = value;
		var value = new utils_Geometry(64,64,384,320);
		_g1.h[9] = value;
		var value = new utils_Geometry(64,64,192,320);
		_g1.h[12] = value;
		var value = new utils_Geometry(64,64,256,320);
		_g1.h[13] = value;
		var value = new utils_Geometry(64,64,64,320);
		_g1.h[14] = value;
		var value = new utils_Geometry(64,64,128,320);
		_g1.h[15] = value;
		_g.h["SW Pro Controller"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,64,192);
		_g1.h[0] = value;
		var value = new utils_Geometry(64,64,0,192);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,192,192);
		_g1.h[2] = value;
		var value = new utils_Geometry(64,64,128,192);
		_g1.h[3] = value;
		var value = new utils_Geometry(64,64,256,192);
		_g1.h[4] = value;
		var value = new utils_Geometry(64,64,320,192);
		_g1.h[5] = value;
		var value = new utils_Geometry(64,64,384,192);
		_g1.h[6] = value;
		var value = new utils_Geometry(64,64,448,192);
		_g1.h[7] = value;
		var value = new utils_Geometry(64,64,0,256);
		_g1.h[10] = value;
		var value = new utils_Geometry(64,64,64,256);
		_g1.h[11] = value;
		var value = new utils_Geometry(64,64,320,320);
		_g1.h[8] = value;
		var value = new utils_Geometry(64,64,384,320);
		_g1.h[9] = value;
		var value = new utils_Geometry(64,64,192,384);
		_g1.h[12] = value;
		var value = new utils_Geometry(64,64,256,384);
		_g1.h[13] = value;
		var value = new utils_Geometry(64,64,64,384);
		_g1.h[14] = value;
		var value = new utils_Geometry(64,64,128,384);
		_g1.h[15] = value;
		_g.h["JOYCON"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,0,640);
		_g1.h[0] = value;
		var value = new utils_Geometry(64,64,64,640);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,128,640);
		_g1.h[2] = value;
		var value = new utils_Geometry(64,64,192,640);
		_g1.h[3] = value;
		var value = new utils_Geometry(64,64,256,640);
		_g1.h[4] = value;
		var value = new utils_Geometry(64,64,320,640);
		_g1.h[5] = value;
		var value = new utils_Geometry(64,64,384,640);
		_g1.h[6] = value;
		var value = new utils_Geometry(64,64,448,640);
		_g1.h[7] = value;
		var value = new utils_Geometry(64,64,0,704);
		_g1.h[10] = value;
		var value = new utils_Geometry(64,64,64,704);
		_g1.h[11] = value;
		var value = new utils_Geometry(64,64,128,704);
		_g1.h[8] = value;
		var value = new utils_Geometry(64,64,192,704);
		_g1.h[9] = value;
		var value = new utils_Geometry(64,64,192,768);
		_g1.h[12] = value;
		var value = new utils_Geometry(64,64,256,768);
		_g1.h[13] = value;
		var value = new utils_Geometry(64,64,64,768);
		_g1.h[14] = value;
		var value = new utils_Geometry(64,64,128,768);
		_g1.h[15] = value;
		_g.h["XBONE"] = _g1;
	}
	{
		var _g1 = new haxe_ds_IntMap();
		var value = new utils_Geometry(64,64,0,448);
		_g1.h[0] = value;
		var value = new utils_Geometry(64,64,64,448);
		_g1.h[1] = value;
		var value = new utils_Geometry(64,64,128,448);
		_g1.h[2] = value;
		var value = new utils_Geometry(64,64,192,448);
		_g1.h[3] = value;
		var value = new utils_Geometry(64,64,256,448);
		_g1.h[4] = value;
		var value = new utils_Geometry(64,64,320,448);
		_g1.h[5] = value;
		var value = new utils_Geometry(64,64,384,448);
		_g1.h[6] = value;
		var value = new utils_Geometry(64,64,448,448);
		_g1.h[7] = value;
		var value = new utils_Geometry(64,64,0,512);
		_g1.h[10] = value;
		var value = new utils_Geometry(64,64,64,512);
		_g1.h[11] = value;
		var value = new utils_Geometry(64,64,128,512);
		_g1.h[8] = value;
		var value = new utils_Geometry(64,64,192,512);
		_g1.h[9] = value;
		var value = new utils_Geometry(64,64,192,576);
		_g1.h[12] = value;
		var value = new utils_Geometry(64,64,256,576);
		_g1.h[13] = value;
		var value = new utils_Geometry(64,64,64,576);
		_g1.h[14] = value;
		var value = new utils_Geometry(64,64,128,576);
		_g1.h[15] = value;
		_g.h["XB360"] = _g1;
	}
	$r = _g;
	return $r;
}(this));
input_InputDevice.instances = [];
input_GamepadInputDevice.SEPARATOR = " / ";
var input_KeyCodeToString_KEY_CODE_TO_STRING = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = "Unknown";
	_g.h[1] = "Back";
	_g.h[3] = "Cancel";
	_g.h[6] = "Help";
	_g.h[8] = "BKSP";
	_g.h[9] = "Tab";
	_g.h[12] = "Clear";
	_g.h[13] = "Return";
	_g.h[16] = "Shift";
	_g.h[17] = "Control";
	_g.h[18] = "Alt";
	_g.h[19] = "Pause";
	_g.h[20] = "CapsLock";
	_g.h[21] = "Kana / Hangul";
	_g.h[22] = "Eisu";
	_g.h[23] = "Junja";
	_g.h[24] = "Final";
	_g.h[25] = "Hanja / Kanji";
	_g.h[27] = "ESC";
	_g.h[28] = "Convert";
	_g.h[29] = "NonConvert";
	_g.h[30] = "Accept";
	_g.h[31] = "ModeChange";
	_g.h[32] = "Space";
	_g.h[33] = "PageUp";
	_g.h[34] = "PageDown";
	_g.h[35] = "End";
	_g.h[36] = "Home";
	_g.h[37] = "Left";
	_g.h[38] = "Up";
	_g.h[39] = "Right";
	_g.h[40] = "Down";
	_g.h[41] = "Select";
	_g.h[42] = "Print";
	_g.h[43] = "Execute";
	_g.h[44] = "PrintScreen";
	_g.h[45] = "Insert";
	_g.h[46] = "Delete";
	_g.h[48] = "Zero";
	_g.h[49] = "One";
	_g.h[50] = "Two";
	_g.h[51] = "Three";
	_g.h[52] = "Four";
	_g.h[53] = "Five";
	_g.h[54] = "Six";
	_g.h[55] = "Seven";
	_g.h[56] = "Eight";
	_g.h[57] = "Nine";
	_g.h[58] = "Colon";
	_g.h[59] = "Semicolon";
	_g.h[60] = "LessThan";
	_g.h[61] = "Equals";
	_g.h[62] = "GreaterThan";
	_g.h[63] = "QuestionMark";
	_g.h[64] = "At";
	_g.h[65] = "A";
	_g.h[66] = "B";
	_g.h[67] = "C";
	_g.h[68] = "D";
	_g.h[69] = "E";
	_g.h[70] = "F";
	_g.h[71] = "G";
	_g.h[72] = "H";
	_g.h[73] = "I";
	_g.h[74] = "J";
	_g.h[75] = "K";
	_g.h[76] = "L";
	_g.h[77] = "M";
	_g.h[78] = "N";
	_g.h[79] = "O";
	_g.h[80] = "P";
	_g.h[81] = "Q";
	_g.h[82] = "R";
	_g.h[83] = "S";
	_g.h[84] = "T";
	_g.h[85] = "U";
	_g.h[86] = "V";
	_g.h[87] = "W";
	_g.h[88] = "X";
	_g.h[89] = "Y";
	_g.h[90] = "Z";
	_g.h[91] = "Win";
	_g.h[93] = "ContextMenu";
	_g.h[95] = "Sleep";
	_g.h[96] = "Num0";
	_g.h[97] = "Num1";
	_g.h[98] = "Num2";
	_g.h[99] = "Num3";
	_g.h[100] = "Num4";
	_g.h[101] = "Num5";
	_g.h[102] = "Num6";
	_g.h[103] = "Num7";
	_g.h[104] = "Num8";
	_g.h[105] = "Num9";
	_g.h[106] = "Multiply";
	_g.h[107] = "Add";
	_g.h[108] = "Separator";
	_g.h[109] = "Subtract";
	_g.h[110] = "Decimal";
	_g.h[111] = "Divide";
	_g.h[112] = "F1";
	_g.h[113] = "F2";
	_g.h[114] = "F3";
	_g.h[115] = "F4";
	_g.h[116] = "F5";
	_g.h[117] = "F6";
	_g.h[118] = "F7";
	_g.h[119] = "F8";
	_g.h[120] = "F9";
	_g.h[121] = "F10";
	_g.h[122] = "F11";
	_g.h[123] = "F12";
	_g.h[124] = "F13";
	_g.h[125] = "F14";
	_g.h[126] = "F15";
	_g.h[127] = "F16";
	_g.h[128] = "F17";
	_g.h[129] = "F18";
	_g.h[130] = "F19";
	_g.h[131] = "F20";
	_g.h[132] = "F21";
	_g.h[133] = "F22";
	_g.h[134] = "F23";
	_g.h[135] = "F24";
	_g.h[144] = "NumLock";
	_g.h[145] = "ScrollLock";
	_g.h[146] = "WinOemFjJisho";
	_g.h[147] = "WinOemFjMasshou";
	_g.h[148] = "WinOemFjTouroku";
	_g.h[149] = "WinOemFjLoya";
	_g.h[150] = "WinOemFjRoya";
	_g.h[160] = "Circumflex";
	_g.h[161] = "Exclamation";
	_g.h[162] = "DoubleQuote";
	_g.h[163] = "Hash";
	_g.h[164] = "Dollar";
	_g.h[165] = "Percent";
	_g.h[166] = "Ampersand";
	_g.h[167] = "Underscore";
	_g.h[168] = "OpenParen";
	_g.h[169] = "CloseParen";
	_g.h[170] = "Asterisk";
	_g.h[171] = "Plus";
	_g.h[172] = "Pipe";
	_g.h[173] = "HyphenMinus";
	_g.h[174] = "OpenCurlyBracket";
	_g.h[175] = "CloseCurlyBracket";
	_g.h[176] = "Tilde";
	_g.h[181] = "VolumeMute";
	_g.h[182] = "VolumeDown";
	_g.h[183] = "VolumeUp";
	_g.h[188] = "Comma";
	_g.h[190] = "Period";
	_g.h[191] = "Slash";
	_g.h[192] = "BackQuote";
	_g.h[219] = "OpenBracket";
	_g.h[220] = "BackSlash";
	_g.h[221] = "CloseBracket";
	_g.h[222] = "Quote";
	_g.h[224] = "Meta";
	_g.h[225] = "AltGr";
	_g.h[227] = "WinIcoHelp";
	_g.h[228] = "WinIco00";
	_g.h[230] = "WinIcoClear";
	_g.h[233] = "WinOemReset";
	_g.h[234] = "WinOemJump";
	_g.h[235] = "WinOemPA1";
	_g.h[236] = "WinOemPA2";
	_g.h[237] = "WinOemPA3";
	_g.h[238] = "WinOemWSCTRL";
	_g.h[239] = "WinOemCUSEL";
	_g.h[240] = "WinOemATTN";
	_g.h[241] = "WinOemFinish";
	_g.h[242] = "WinOemCopy";
	_g.h[243] = "WinOemAuto";
	_g.h[244] = "WinOemENLW";
	_g.h[245] = "WinOemBackTab";
	_g.h[246] = "ATTN";
	_g.h[247] = "CRSEL";
	_g.h[248] = "EXSEL";
	_g.h[249] = "EREOF";
	_g.h[250] = "Play";
	_g.h[251] = "Zoom";
	_g.h[253] = "PA1";
	_g.h[254] = "WinOemClear";
	$r = _g;
	return $r;
}(this));
input_NullInputDevice.instance = new input_NullInputDevice();
io_colyseus_Connection.isRunnerInitialized = false;
io_colyseus_serializer_fossil_$delta_FossilDelta.NHASH = 16;
io_colyseus_serializer_fossil_$delta_FossilDelta.zDigits = [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126];
io_colyseus_serializer_fossil_$delta_FossilDelta.zValue = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,36,-1,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,-1,-1,-1,63,-1];
io_colyseus_serializer_schema_CustomType.instance = new io_colyseus_serializer_schema_CustomType();
io_colyseus_serializer_schema_Schema.decoder = new io_colyseus_serializer_schema_Decoder();
io_colyseus_serializer_schema_SPEC.SWITCH_TO_STRUCTURE = 255;
io_colyseus_serializer_schema_SPEC.TYPE_ID = 213;
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha_Display.instance = new kha_Display();
kha_LoaderImpl.dropFiles = new haxe_ds_StringMap();
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.fade_to_white_fragData0 = "s476:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIGZsb2F0IGNvbXA7Cgp2YXJ5aW5nIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7CnZhcnlpbmcgaGlnaHAgdmVjNCBjb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgdGV4QyA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIHRleEMueCArPSAoY29tcCAqIHRleEMudyk7CiAgICB0ZXhDLnkgKz0gKGNvbXAgKiB0ZXhDLncpOwogICAgdGV4Qy56ICs9IChjb21wICogdGV4Qy53KTsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdGV4QzsKfQoK";
kha_Shaders.fade_to_white_fragData1 = "s492:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIGZsb2F0IGNvbXA7CgppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7CmluIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleEMgPSB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpOwogICAgdGV4Qy54ICs9IChjb21wICogdGV4Qy53KTsKICAgIHRleEMueSArPSAoY29tcCAqIHRleEMudyk7CiAgICB0ZXhDLnogKz0gKGNvbXAgKiB0ZXhDLncpOwogICAgRnJhZ0NvbG9yID0gdGV4QzsKfQoK";
kha_Shaders.fade_to_white_fragData2 = "s450:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSBmbG9hdCBjb21wOwoKdmFyeWluZyB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHRleEMgPSB0ZXh0dXJlMkQodGV4LCB0ZXhDb29yZCk7CiAgICB0ZXhDLnggKz0gKGNvbXAgKiB0ZXhDLncpOwogICAgdGV4Qy55ICs9IChjb21wICogdGV4Qy53KTsKICAgIHRleEMueiArPSAoY29tcCAqIHRleEMudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleEM7Cn0KCg";
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_fragData2 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData2 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData0 = "s407:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s372:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHZlcnRleFVWOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData2 = "s471:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData2 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_vertData0 = "s428:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB2ZXJ0ZXhVVjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s394:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_text_vertData2 = "s492:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB2ZXJ0ZXhVVjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData0 = "s407:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s372:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHZlcnRleFVWOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData2 = "s471:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.safari = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.estimatedRefreshRate = 60;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.lastCanvasClientWidth = -1;
kha_SystemImpl.lastCanvasClientHeight = -1;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_Window.windows = [];
kha_Window.resizeCallbacks = [];
kha_WindowFeatures.None = 0;
kha_WindowFeatures.FeatureResizable = 1;
kha_WindowFeatures.FeatureMinimizable = 2;
kha_WindowFeatures.FeatureMaximizable = 4;
kha_WindowFeatures.FeatureBorderless = 8;
kha_WindowFeatures.FeatureOnTop = 16;
kha_arrays_ByteArray.LITTLE_ENDIAN = new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x78;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_vcubic = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 6;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_graphics4_VertexData.Float32_1X = 0;
kha_graphics4_VertexData.Float32_2X = 1;
kha_graphics4_VertexData.Float32_3X = 2;
kha_graphics4_VertexData.Float32_4X = 3;
kha_graphics4_VertexData.Float32_4X4 = 4;
kha_graphics4_VertexData.Int8_1X = 5;
kha_graphics4_VertexData.UInt8_1X = 6;
kha_graphics4_VertexData.Int8_1X_Normalized = 7;
kha_graphics4_VertexData.UInt8_1X_Normalized = 8;
kha_graphics4_VertexData.Int8_2X = 9;
kha_graphics4_VertexData.UInt8_2X = 10;
kha_graphics4_VertexData.Int8_2X_Normalized = 11;
kha_graphics4_VertexData.UInt8_2X_Normalized = 12;
kha_graphics4_VertexData.Int8_4X = 13;
kha_graphics4_VertexData.UInt8_4X = 14;
kha_graphics4_VertexData.Int8_4X_Normalized = 15;
kha_graphics4_VertexData.UInt8_4X_Normalized = 16;
kha_graphics4_VertexData.Int16_1X = 17;
kha_graphics4_VertexData.UInt16_1X = 18;
kha_graphics4_VertexData.Int16_1X_Normalized = 19;
kha_graphics4_VertexData.UInt16_1X_Normalized = 20;
kha_graphics4_VertexData.Int16_2X = 21;
kha_graphics4_VertexData.UInt16_2X = 22;
kha_graphics4_VertexData.Int16_2X_Normalized = 23;
kha_graphics4_VertexData.UInt16_2X_Normalized = 24;
kha_graphics4_VertexData.Int16_4X = 25;
kha_graphics4_VertexData.UInt16_4X = 26;
kha_graphics4_VertexData.Int16_4X_Normalized = 27;
kha_graphics4_VertexData.UInt16_4X_Normalized = 28;
kha_graphics4_VertexData.Int32_1X = 29;
kha_graphics4_VertexData.UInt32_1X = 30;
kha_graphics4_VertexData.Int32_2X = 31;
kha_graphics4_VertexData.UInt32_2X = 32;
kha_graphics4_VertexData.Int32_3X = 33;
kha_graphics4_VertexData.UInt32_3X = 34;
kha_graphics4_VertexData.Int32_4X = 35;
kha_graphics4_VertexData.UInt32_4X = 36;
kha_graphics4_VertexData.Float1 = 0;
kha_graphics4_VertexData.Float2 = 1;
kha_graphics4_VertexData.Float3 = 2;
kha_graphics4_VertexData.Float4 = 3;
kha_graphics4_VertexData.Float4x4 = 4;
kha_graphics4_VertexData.Short2Norm = 23;
kha_graphics4_VertexData.Short4Norm = 27;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Sensor.isInited = false;
kha_input_Sensor.accelerometer = new kha_input_Sensor();
kha_input_Sensor.gyroscope = new kha_input_Sensor();
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_internal_BytesBlob.bufferSize = 2000;
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.useVertexAttributes = 0;
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
lobby_LobbyPage.RELAY_PORT_MESSAGE_TYPE = 1;
lobby_LobbyPage.SERVER_URL = "szi5os.colyseus.de";
main_$menu_ui_MainMenuPage.DISCORD_INVITE = "https://discord.gg/wsWArpAFJK";
main_$menu_ui_MainMenuPage.RELEASES_URL = "https://github.com/doczi-dominik/gelavolt/releases";
org_msgpack_Encoder.FLOAT_SINGLE_MIN = 1.40129846432481707e-45;
org_msgpack_Encoder.FLOAT_SINGLE_MAX = 3.40282346638528860e+38;
org_msgpack_Encoder.FLOAT_DOUBLE_MIN = 4.94065645841246544e-324;
org_msgpack_Encoder.FLOAT_DOUBLE_MAX = 1.79769313486231570e+308;
peerjs_DataConnectionEventType.Data = "data";
peerjs_DataConnectionEventType.Open = "open";
peerjs_DataConnectionEventType.Close = "close";
peerjs_DataConnectionEventType.Error = "error";
peerjs_PeerDataSerialization.None = "none";
peerjs_PeerDataSerialization.Binary = "binary";
peerjs_PeerDataSerialization.UTF8 = "binary-utf8";
peerjs_PeerDataSerialization.JSON = "json";
peerjs_PeerErrorType.BrowserIncompatible = "browser-incompatible";
peerjs_PeerErrorType.InvalidId = "invalid-id";
peerjs_PeerErrorType.InvalidKey = "invalid-key";
peerjs_PeerErrorType.UnavailableId = "unavailable-id";
peerjs_PeerErrorType.SSLUnavailable = "ssl-unavailable";
peerjs_PeerErrorType.ServerDisconnected = "server-disconnected";
peerjs_PeerErrorType.ServerError = "server-error";
peerjs_PeerErrorType.SocketError = "socket-error";
peerjs_PeerErrorType.SocketClosed = "socket-closed";
peerjs_PeerEventType.Open = "open";
peerjs_PeerEventType.Connection = "connection";
peerjs_PeerEventType.Close = "close";
peerjs_PeerEventType.Error = "error";
save_$data_EndlessSettings.SHOW_CONTROL_HINTS_DEFAULT = true;
save_$data_EndlessSettings.CLEAR_ON_X_MODE_DEFAULT = "NEW";
save_$data_GraphicsSettings.FULLSCREEN_DEFAULT = true;
save_$data_InputSettings.MAPPINGS_DEFAULTS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = new input_InputMapping(27,9,new input_AxisMapping(null,null));
		_g.h["PAUSE"] = value;
	}
	{
		var value = new input_InputMapping(37,14,new input_AxisMapping(0,-1));
		_g.h["MENU_LEFT"] = value;
	}
	{
		var value = new input_InputMapping(39,15,new input_AxisMapping(0,1));
		_g.h["MENU_RIGHT"] = value;
	}
	{
		var value = new input_InputMapping(40,13,new input_AxisMapping(1,1));
		_g.h["MENU_DOWN"] = value;
	}
	{
		var value = new input_InputMapping(38,12,new input_AxisMapping(1,-1));
		_g.h["MENU_UP"] = value;
	}
	{
		var value = new input_InputMapping(8,0,new input_AxisMapping(null,null));
		_g.h["BACK"] = value;
	}
	{
		var value = new input_InputMapping(13,1,new input_AxisMapping(null,null));
		_g.h["CONFIRM"] = value;
	}
	{
		var value = new input_InputMapping(37,14,new input_AxisMapping(0,-1));
		_g.h["SHIFT_LEFT"] = value;
	}
	{
		var value = new input_InputMapping(39,15,new input_AxisMapping(0,1));
		_g.h["SHIFT_RIGHT"] = value;
	}
	{
		var value = new input_InputMapping(40,13,new input_AxisMapping(1,1));
		_g.h["SOFT_DROP"] = value;
	}
	{
		var value = new input_InputMapping(38,12,new input_AxisMapping(1,-1));
		_g.h["HARD_DROP"] = value;
	}
	{
		var value = new input_InputMapping(68,0,new input_AxisMapping(null,null));
		_g.h["ROTATE_LEFT"] = value;
	}
	{
		var value = new input_InputMapping(70,1,new input_AxisMapping(null,null));
		_g.h["ROTATE_RIGHT"] = value;
	}
	{
		var value = new input_InputMapping(81,8,new input_AxisMapping(null,null));
		_g.h["TOGGLE_EDIT_MODE"] = value;
	}
	{
		var value = new input_InputMapping(37,14,new input_AxisMapping(0,-1));
		_g.h["EDIT_LEFT"] = value;
	}
	{
		var value = new input_InputMapping(39,15,new input_AxisMapping(0,1));
		_g.h["EDIT_RIGHT"] = value;
	}
	{
		var value = new input_InputMapping(40,13,new input_AxisMapping(1,1));
		_g.h["EDIT_DOWN"] = value;
	}
	{
		var value = new input_InputMapping(38,12,new input_AxisMapping(1,-1));
		_g.h["EDIT_UP"] = value;
	}
	{
		var value = new input_InputMapping(68,0,new input_AxisMapping(null,null));
		_g.h["EDIT_CLEAR"] = value;
	}
	{
		var value = new input_InputMapping(70,1,new input_AxisMapping(null,null));
		_g.h["EDIT_SET"] = value;
	}
	{
		var value = new input_InputMapping(89,2,new input_AxisMapping(null,null));
		_g.h["PREVIOUS_STEP"] = value;
	}
	{
		var value = new input_InputMapping(88,3,new input_AxisMapping(null,null));
		_g.h["NEXT_STEP"] = value;
	}
	{
		var value = new input_InputMapping(67,6,new input_AxisMapping(null,null));
		_g.h["PREVIOUS_COLOR"] = value;
	}
	{
		var value = new input_InputMapping(86,7,new input_AxisMapping(null,null));
		_g.h["NEXT_COLOR"] = value;
	}
	{
		var value = new input_InputMapping(89,2,new input_AxisMapping(null,null));
		_g.h["PREVIOUS_GROUP"] = value;
	}
	{
		var value = new input_InputMapping(88,3,new input_AxisMapping(null,null));
		_g.h["NEXT_GROUP"] = value;
	}
	{
		var value = new input_InputMapping(66,5,new input_AxisMapping(null,null));
		_g.h["TOGGLE_MARKERS"] = value;
	}
	{
		var value = new input_InputMapping(82,4,new input_AxisMapping(null,null));
		_g.h["QUICK_RESTART"] = value;
	}
	{
		var value = new input_InputMapping(79,5,new input_AxisMapping(null,null));
		_g.h["SAVE_STATE"] = value;
	}
	{
		var value = new input_InputMapping(80,7,new input_AxisMapping(null,null));
		_g.h["LOAD_STATE"] = value;
	}
	$r = _g;
	return $r;
}(this));
save_$data_InputSettings.DEADZONE_DEFAULT = 0.5;
save_$data_InputSettings.GAMEPAD_BRAND_DEFAULT = "DS4";
save_$data_InputSettings.LOCAL_DELAY_DEFAULT = 0;
save_$data_InputSettings.NETPLAY_DELAY_DEFAULT = 2;
save_$data_PrefsSettings.COLOR_TINTS_DEFAULT = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = -1;
	_g.h[1] = -1;
	_g.h[2] = -1;
	_g.h[3] = -1;
	_g.h[4] = -1;
	_g.h[5] = -1;
	_g.h[6] = -1;
	$r = _g;
	return $r;
}(this));
save_$data_PrefsSettings.PRIMARY_COLORS_DEFAULT = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	{
		var value = kha_Color._new(-65506);
		_g.h[0] = value;
	}
	{
		var value = kha_Color._new(-16711915);
		_g.h[1] = value;
	}
	{
		var value = kha_Color._new(-16749057);
		_g.h[2] = value;
	}
	{
		var value = kha_Color._new(-3328);
		_g.h[3] = value;
	}
	{
		var value = kha_Color._new(-4128513);
		_g.h[4] = value;
	}
	_g.h[5] = 0;
	_g.h[6] = 0;
	$r = _g;
	return $r;
}(this));
save_$data_PrefsSettings.BOARD_BACKGROUND_DEFAULT = kha_Color.fromBytes(64,32,32);
save_$data_PrefsSettings.MENU_REMEMBER_CURSOR_DEFAULT = true;
save_$data_PrefsSettings.CAP_AT_CROWNS_DEFAULT = true;
save_$data_PrefsSettings.SHOW_GROUP_SHADOW_DEFAULT = true;
save_$data_PrefsSettings.SHADOW_OPACITY_DEFAULT = 0.5;
save_$data_PrefsSettings.SHADOW_HIGHLIGHT_OTHERS_DEFAULT = true;
save_$data_PrefsSettings.SHADOW_WILL_TRIGGER_CHAIN_DEFAULT = true;
save_$data_Profile.NAME_DEFAULT = "GUGU";
save_$data_Profile.onChangePrimary = [];
save_$data_SaveManager.PROFILES_FILENAME = "profiles";
save_$data_SaveManager.GRAPHICS_FIELNAME = "graphics";
save_$data_SaveManager.profiles = [];
save_$data_TrainingSettings.SHOW_CONTROL_HINTS_DEFAULT = true;
save_$data_TrainingSettings.CLEAR_ON_X_MODE_DEFAULT = "RESTART";
save_$data_TrainingSettings.AUTO_CLEAR_DEFAULT = true;
save_$data_TrainingSettings.AUTO_ATTACK_DEFAULT = false;
save_$data_TrainingSettings.ATTACK_TIME_DEFAULT = 10;
save_$data_TrainingSettings.ATTACK_CHAIN_DEFAULT = 3;
save_$data_TrainingSettings.ATTACK_GROUP_DIFF_DEFAULT = 0;
save_$data_TrainingSettings.ATTACK_COLORS_DEFAULT = 1;
save_$data_TrainingSettings.GROUP_BLIND_MODE_DEFAULT = false;
save_$data_TrainingSettings.KEEP_GROUP_COUNT_DEFAULT = 0;
side_$setup_InputDeviceIcon.FONT_SIZE = 56;
side_$setup_SideSetupScreen.FONT_SIZE = 80;
side_$setup_SideSetupScreen.LEFT_BOARD_STR = "Left Board";
side_$setup_SideSetupScreen.RIGHT_BOARD_STR = "Right Board";
ui_AnyGamepadDetectWrapper.__meta__ = { fields : { keyboardDevice : { inject : null}, pageBuilder : { inject : null}}};
ui_AnyGamepadDetectWrapper.TEXT = ["Press any button on","the gamepad you wish","to use"];
ui_ErrorPage.__meta__ = { fields : { message : { inject : null}, callback : { inject : null}}};
ui_KeyboardConfirmWrapper.__meta__ = { fields : { keyboardDevice : { inject : null}, pageBuilder : { inject : null}}};
ui_KeyboardConfirmWrapper.TEXT = "Press any button to continue";
ui_NumberRangeWidget.__meta__ = { fields : { title : { inject : null}, minValue : { inject : null}, maxValue : { inject : null}, delta : { inject : null}, startValue : { inject : null}, onChange : { inject : null}, description : { inject : null}}};
ui_NumberRangeWidget.FONT_SIZE = 60;
ui_OptionListWidget.__meta__ = { fields : { title : { inject : null}, options : { inject : null}, startIndex : { inject : null}, onChange : { inject : null}, description : { inject : null}}};
ui_OptionListWidget.FONT_SIZE = 60;
utils_Utils.AROUND = [new utils_IntPoint(1,0),new utils_IntPoint(-1,0),new utils_IntPoint(0,1),new utils_IntPoint(0,-1)];
utils_Utils.AROUND_DIAG = [new utils_IntPoint(1,0),new utils_IntPoint(-1,0),new utils_IntPoint(0,1),new utils_IntPoint(0,-1),new utils_IntPoint(-1,-1),new utils_IntPoint(1,-1),new utils_IntPoint(1,1),new utils_IntPoint(-1,1)];
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
